/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of FASTRPC is licensed to you under the terms described in the
 * FASTRPC_LICENSE file included in this distribution.
 *
 *************************************************************************
 * 
 * @file MultiInterfacesTestServerImplExample.cxx
 * This source file contains the definition of the skeleton for all interfaces.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "MultiInterfacesTestServerImplExample.h"

uint8_t BasicTypeTestServerImplExample::getOctet(/*in*/ uint8_t oc1, /*inout*/ uint8_t& oc2, /*out*/ uint8_t& oc3)
{
    uint8_t  getOctet_ret = 0;

    oc3 = oc2;
    getOctet_ret = oc1;
    oc2 = oc1 + oc2;

    return getOctet_ret;
} 

char BasicTypeTestServerImplExample::getChar(/*in*/ char ch1, /*inout*/ char& ch2, /*out*/ char& ch3)
{
    char  getChar_ret = 0;

    ch3 = ch2;
    getChar_ret = ch1;
    ch2 = ch1 + ch2;

    return getChar_ret;
} 

wchar_t BasicTypeTestServerImplExample::getWChar(/*in*/ wchar_t wch1, /*inout*/ wchar_t& wch2, /*out*/ wchar_t& wch3)
{
    wchar_t  getWChar_ret = 0;

    wch3 = wch2;
    getWChar_ret = wch1;
    wch2 = wch1 + wch2;

    return getWChar_ret;
} 

int16_t BasicTypeTestServerImplExample::getShort(/*in*/ int16_t sh1, /*inout*/ int16_t& sh2, /*out*/ int16_t& sh3)
{
    int16_t  getShort_ret = 0;

    sh3 = sh2;
    getShort_ret = sh1;
    sh2 = sh1 + sh2;

    return getShort_ret;
} 

uint16_t BasicTypeTestServerImplExample::getUShort(/*in*/ uint16_t ush1, /*inout*/ uint16_t& ush2, /*out*/ uint16_t& ush3)
{
    uint16_t  getUShort_ret = 0;

    ush3 = ush2;
    getUShort_ret = ush1;
    ush2 = ush1 + ush2;

    return getUShort_ret;
} 

int32_t BasicTypeTestServerImplExample::getLong(/*in*/ int32_t lo1, /*inout*/ int32_t& lo2, /*out*/ int32_t& lo3)
{
    int32_t  getLong_ret = 0;

    lo3 = lo2;
    getLong_ret = lo1;
    lo2 = lo1 + lo2;

    return getLong_ret;
} 

uint32_t BasicTypeTestServerImplExample::getULong(/*in*/ uint32_t ulo1, /*inout*/ uint32_t& ulo2, /*out*/ uint32_t& ulo3)
{
    uint32_t  getULong_ret = 0;

    ulo3 = ulo2;
    getULong_ret = ulo1;
    ulo2 = ulo1 + ulo2;

    return getULong_ret;
} 

int64_t BasicTypeTestServerImplExample::getLLong(/*in*/ int64_t llo1, /*inout*/ int64_t& llo2, /*out*/ int64_t& llo3)
{
    int64_t  getLLong_ret = 0;

    llo3 = llo2;
    getLLong_ret = llo1;
    llo2 = llo1 + llo2;

    return getLLong_ret;
} 

uint64_t BasicTypeTestServerImplExample::getULLong(/*in*/ uint64_t ullo1, /*inout*/ uint64_t& ullo2, /*out*/ uint64_t& ullo3)
{
    uint64_t  getULLong_ret = 0;

    ullo3 = ullo2;
    getULLong_ret = ullo1;
    ullo2 = ullo1 + ullo2;

    return getULLong_ret;
} 

float BasicTypeTestServerImplExample::getFloat(/*in*/ float fl1, /*inout*/ float& fl2, /*out*/ float& fl3)
{
    float  getFloat_ret = 0;

    fl3 = fl2;
    getFloat_ret = fl1;
    fl2 = fl1 + fl2;

    return getFloat_ret;
} 

double BasicTypeTestServerImplExample::getDouble(/*in*/ double do1, /*inout*/ double& do2, /*out*/ double& do3)
{
    double  getDouble_ret = 0;

    do3 = do2;
    getDouble_ret = do1;
    do2 = do1 + do2;

    return getDouble_ret;
} 

bool BasicTypeTestServerImplExample::getBoolean(/*in*/ bool bo1, /*inout*/ bool& bo2, /*out*/ bool& bo3)
{
    bool  getBoolean_ret = false;

    bo3 = bo2;
    getBoolean_ret = bo1;
    bo2 = bo1 | bo2;

    return getBoolean_ret;
} 

Struct::Recepcion StructTestServerImplExample::duplicate(/*in*/ const Struct::Envio& ev)
{
    Struct::Recepcion duplicate_ret;

    duplicate_ret.devolucion(ev.dato());
    duplicate_ret.message(ev.message());

    return duplicate_ret;
} 

Struct::Recepcion StructTestServerImplExample::suma(/*in*/ const Struct::Envio& ev1, /*in*/ const Struct::Envio& ev2)
{
    Struct::Recepcion suma_ret;

    suma_ret.devolucion(ev1.dato() + ev2.dato());
    suma_ret.message(ev1.message() + ev2.message());

    return suma_ret;
} 
