/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of FASTRPC is licensed to you under the terms described in the
 * FASTRPC_LICENSE file included in this distribution.
 *
 *************************************************************************
 * 
 * @file MultiInterfacesTestServerExample.cxx
 * This source file shows a simple example of how to create a server for an interface.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "MultiInterfacesTestServer.h"
#include <strategies/ThreadPoolStrategy.h>
#include "MultiInterfacesTestDDSProtocol.h"
#include <transports/dds/UDPServerTransport.h>
#include <exceptions/Exceptions.h>
#include <utils/Utilities.h>
#include "MultiInterfacesTestServerImplExample.h"

#include <iostream>

using namespace eprosima::rpc;
using namespace ::exception;
using namespace ::transport::dds;
using namespace ::protocol::dds;
using namespace ::strategy;

int main(int argc, char **argv)
{
    unsigned int threadPoolSize = 5;
    ThreadPoolStrategy *basicpool = NULL;
    ThreadPoolStrategy *structpool = NULL;
    MultiInterfacesTestProtocol *protocol = NULL;
    UDPServerTransport *transport = NULL;
    BasicTypes::BasicTypeTestServer *basicserver = NULL;
    BasicTypeTestServerImplExample bservant;
    Struct::StructTestServer *structserver = NULL;
    StructTestServerImplExample sservant;

    
    // Create and initialize the server for interface "BasicTypes::BasicTypeTest".
    try
    {
        protocol = new MultiInterfacesTestProtocol();
        transport = new UDPServerTransport("MultiInterfacesTestService", "Instance");
        basicpool = new ThreadPoolStrategy(threadPoolSize);
        basicserver = new BasicTypes::BasicTypeTestServer(*basicpool, *transport, *protocol, bservant);
        basicserver->serve();
        structpool = new ThreadPoolStrategy(threadPoolSize);
        structserver = new Struct::StructTestServer(*structpool, *transport, *protocol, sservant);
        structserver->serve();
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }
    
    while(1)
    {
        eprosima::rpc::sleep(10000);
    }
    
    // Stop and delete the server.
    basicserver->stop();
    structserver->stop();
    delete basicserver;
    delete basicpool;
    delete structserver;
    delete structpool;
    delete transport;
    delete protocol;
    
    return 0;
}
















