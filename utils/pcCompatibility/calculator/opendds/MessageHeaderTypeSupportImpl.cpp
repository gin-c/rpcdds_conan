/* Generated by opendds_idl.exe version 3.3 (ACE version 5.6a_p13) running on input file D:\richi\workspace\desarrollo\DDS\proyectos\rpcdds\idl\MessageHeader.idl*/
#include "MessageHeaderTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/FilterEvaluator.h"


/* Begin STRUCT: Identification */

namespace OpenDDS { namespace DCPS {

void gen_find_size(const Identification& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.value_1);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.value_2);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.value_3);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.value_4);
}

bool operator<<(Serializer& strm, const Identification& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value_1)
    && (strm << stru.value_2)
    && (strm << stru.value_3)
    && (strm << stru.value_4);
}

bool operator>>(Serializer& strm, Identification& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value_1)
    && (strm >> stru.value_2)
    && (strm >> stru.value_3)
    && (strm >> stru.value_4);
}

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Identification> : MetaStruct {
  typedef Identification T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const Identification& typed = *static_cast<const Identification*>(stru);
    if (std::strcmp(field, "value_1") == 0) {
      return typed.value_1;
    }
    if (std::strcmp(field, "value_2") == 0) {
      return typed.value_2;
    }
    if (std::strcmp(field, "value_3") == 0) {
      return typed.value_3;
    }
    if (std::strcmp(field, "value_4") == 0) {
      return typed.value_4;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in Struct Identification)");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "value_1") == 0) {
      return make_field_cmp(&T::value_1, next);
    }
    if (std::strcmp(field, "value_2") == 0) {
      return make_field_cmp(&T::value_2, next);
    }
    if (std::strcmp(field, "value_3") == 0) {
      return make_field_cmp(&T::value_3, next);
    }
    if (std::strcmp(field, "value_4") == 0) {
      return make_field_cmp(&T::value_4, next);
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in Struct Identification)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"value_1", "value_2", "value_3", "value_4", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "value_1") == 0) {
      return &static_cast<const T*>(stru)->value_1;
    }
    if (std::strcmp(field, "value_2") == 0) {
      return &static_cast<const T*>(stru)->value_2;
    }
    if (std::strcmp(field, "value_3") == 0) {
      return &static_cast<const T*>(stru)->value_3;
    }
    if (std::strcmp(field, "value_4") == 0) {
      return &static_cast<const T*>(stru)->value_4;
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in Struct Identification)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "value_1") == 0) {
      static_cast<T*>(lhs)->value_1 = *static_cast<const CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "value_2") == 0) {
      static_cast<T*>(lhs)->value_2 = *static_cast<const CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "value_3") == 0) {
      static_cast<T*>(lhs)->value_3 = *static_cast<const CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "value_4") == 0) {
      static_cast<T*>(lhs)->value_4 = *static_cast<const CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in Struct Identification)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "value_1") == 0) {
      return static_cast<const T*>(lhs)->value_1 == static_cast<const T*>(rhs)->value_1;
    }
    if (std::strcmp(field, "value_2") == 0) {
      return static_cast<const T*>(lhs)->value_2 == static_cast<const T*>(rhs)->value_2;
    }
    if (std::strcmp(field, "value_3") == 0) {
      return static_cast<const T*>(lhs)->value_3 == static_cast<const T*>(rhs)->value_3;
    }
    if (std::strcmp(field, "value_4") == 0) {
      return static_cast<const T*>(lhs)->value_4 == static_cast<const T*>(rhs)->value_4;
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in Struct Identification)");
  }
};

template<>
const MetaStruct& getMetaStruct<Identification>()
{
  static MetaStructImpl<Identification> msi;
  return msi;
}

}  }

#endif

/* End STRUCT: Identification */


/* Begin STRUCT: RequestHeader */

namespace OpenDDS { namespace DCPS {

void gen_find_size(const RequestHeader& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  gen_find_size(stru.clientId, size, padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.remoteServiceName) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.requestSequenceNumber);
}

bool operator<<(Serializer& strm, const RequestHeader& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.clientId)
    && (strm << stru.remoteServiceName)
    && (strm << stru.requestSequenceNumber);
}

bool operator>>(Serializer& strm, RequestHeader& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.clientId)
    && (strm >> stru.remoteServiceName.out())
    && (strm >> stru.requestSequenceNumber);
}

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<RequestHeader> : MetaStruct {
  typedef RequestHeader T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const RequestHeader& typed = *static_cast<const RequestHeader*>(stru);
    if (std::strncmp(field, "clientId.", 9) == 0) {
      return getMetaStruct<Identification>().getValue(&typed.clientId, field + 9);
    }
    if (std::strcmp(field, "remoteServiceName") == 0) {
      return typed.remoteServiceName.in();
    }
    if (std::strcmp(field, "requestSequenceNumber") == 0) {
      return typed.requestSequenceNumber;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in Struct RequestHeader)");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "clientId.", 9) == 0) {
      return make_struct_cmp(&T::clientId, getMetaStruct<Identification>().create_qc_comparator(field + 9, 0), next);
    }
    if (std::strcmp(field, "remoteServiceName") == 0) {
      return make_field_cmp(&T::remoteServiceName, next);
    }
    if (std::strcmp(field, "requestSequenceNumber") == 0) {
      return make_field_cmp(&T::requestSequenceNumber, next);
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in Struct RequestHeader)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"clientId", "remoteServiceName", "requestSequenceNumber", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "clientId") == 0) {
      return &static_cast<const T*>(stru)->clientId;
    }
    if (std::strcmp(field, "remoteServiceName") == 0) {
      return &static_cast<const T*>(stru)->remoteServiceName;
    }
    if (std::strcmp(field, "requestSequenceNumber") == 0) {
      return &static_cast<const T*>(stru)->requestSequenceNumber;
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in Struct RequestHeader)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "clientId") == 0) {
      static_cast<T*>(lhs)->clientId = *static_cast<const Identification*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "remoteServiceName") == 0) {
      static_cast<T*>(lhs)->remoteServiceName = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "requestSequenceNumber") == 0) {
      static_cast<T*>(lhs)->requestSequenceNumber = *static_cast<const CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in Struct RequestHeader)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "remoteServiceName") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->remoteServiceName, static_cast<const T*>(rhs)->remoteServiceName);
    }
    if (std::strcmp(field, "requestSequenceNumber") == 0) {
      return static_cast<const T*>(lhs)->requestSequenceNumber == static_cast<const T*>(rhs)->requestSequenceNumber;
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in Struct RequestHeader)");
  }
};

template<>
const MetaStruct& getMetaStruct<RequestHeader>()
{
  static MetaStructImpl<RequestHeader> msi;
  return msi;
}

}  }

#endif

/* End STRUCT: RequestHeader */


/* Begin STRUCT: ReplyHeader */

namespace OpenDDS { namespace DCPS {

void gen_find_size(const ReplyHeader& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  gen_find_size(stru.clientId, size, padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.requestSequenceNumber);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.rpcddsRetCode);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.rpcddsRetMsg) + 1;
}

bool operator<<(Serializer& strm, const ReplyHeader& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.clientId)
    && (strm << stru.requestSequenceNumber)
    && (strm << stru.rpcddsRetCode)
    && (strm << stru.rpcddsRetMsg);
}

bool operator>>(Serializer& strm, ReplyHeader& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.clientId)
    && (strm >> stru.requestSequenceNumber)
    && (strm >> stru.rpcddsRetCode)
    && (strm >> stru.rpcddsRetMsg.out());
}

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<ReplyHeader> : MetaStruct {
  typedef ReplyHeader T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const ReplyHeader& typed = *static_cast<const ReplyHeader*>(stru);
    if (std::strncmp(field, "clientId.", 9) == 0) {
      return getMetaStruct<Identification>().getValue(&typed.clientId, field + 9);
    }
    if (std::strcmp(field, "requestSequenceNumber") == 0) {
      return typed.requestSequenceNumber;
    }
    if (std::strcmp(field, "rpcddsRetCode") == 0) {
      return typed.rpcddsRetCode;
    }
    if (std::strcmp(field, "rpcddsRetMsg") == 0) {
      return typed.rpcddsRetMsg.in();
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in Struct ReplyHeader)");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "clientId.", 9) == 0) {
      return make_struct_cmp(&T::clientId, getMetaStruct<Identification>().create_qc_comparator(field + 9, 0), next);
    }
    if (std::strcmp(field, "requestSequenceNumber") == 0) {
      return make_field_cmp(&T::requestSequenceNumber, next);
    }
    if (std::strcmp(field, "rpcddsRetCode") == 0) {
      return make_field_cmp(&T::rpcddsRetCode, next);
    }
    if (std::strcmp(field, "rpcddsRetMsg") == 0) {
      return make_field_cmp(&T::rpcddsRetMsg, next);
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in Struct ReplyHeader)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"clientId", "requestSequenceNumber", "rpcddsRetCode", "rpcddsRetMsg", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "clientId") == 0) {
      return &static_cast<const T*>(stru)->clientId;
    }
    if (std::strcmp(field, "requestSequenceNumber") == 0) {
      return &static_cast<const T*>(stru)->requestSequenceNumber;
    }
    if (std::strcmp(field, "rpcddsRetCode") == 0) {
      return &static_cast<const T*>(stru)->rpcddsRetCode;
    }
    if (std::strcmp(field, "rpcddsRetMsg") == 0) {
      return &static_cast<const T*>(stru)->rpcddsRetMsg;
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in Struct ReplyHeader)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "clientId") == 0) {
      static_cast<T*>(lhs)->clientId = *static_cast<const Identification*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "requestSequenceNumber") == 0) {
      static_cast<T*>(lhs)->requestSequenceNumber = *static_cast<const CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "rpcddsRetCode") == 0) {
      static_cast<T*>(lhs)->rpcddsRetCode = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "rpcddsRetMsg") == 0) {
      static_cast<T*>(lhs)->rpcddsRetMsg = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in Struct ReplyHeader)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "requestSequenceNumber") == 0) {
      return static_cast<const T*>(lhs)->requestSequenceNumber == static_cast<const T*>(rhs)->requestSequenceNumber;
    }
    if (std::strcmp(field, "rpcddsRetCode") == 0) {
      return static_cast<const T*>(lhs)->rpcddsRetCode == static_cast<const T*>(rhs)->rpcddsRetCode;
    }
    if (std::strcmp(field, "rpcddsRetMsg") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->rpcddsRetMsg, static_cast<const T*>(rhs)->rpcddsRetMsg);
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in Struct ReplyHeader)");
  }
};

template<>
const MetaStruct& getMetaStruct<ReplyHeader>()
{
  static MetaStructImpl<ReplyHeader> msi;
  return msi;
}

}  }

#endif

/* End STRUCT: ReplyHeader */
