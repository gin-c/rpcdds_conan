/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of RPCDDS is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorProxy.cxx
 * This source file contains the definition of the proxy for interface Calculator.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "CalculatorProxy.h"
#include "client/ClientRPC.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "CalculatorRequestReplyPlugin.h"
#include "CalculatorAsyncSupport.h"
#include "exceptions/Exceptions.h"

CalculatorProxy::CalculatorProxy(std::string remoteServiceName, int domainId, long timeout) :
    Client(remoteServiceName, NULL, domainId, timeout)
{
    createRPCs();
}

CalculatorProxy::CalculatorProxy(std::string remoteServiceName, eProsima::RPCDDS::Transport *transport, int domainId, long timeout) :
    Client(remoteServiceName, transport, domainId, timeout)
{
    createRPCs();
}

CalculatorProxy::~CalculatorProxy()
{
    delete addition_Service;
    delete substraction_Service;
    delete multiplication_Service;
    delete division_Service;
}

void CalculatorProxy::createRPCs()
{
    this->addition_Service = new Calculator_additionClientRPC("addition",
                                  Calculator_additionRequestUtils::registerType(getParticipant()),
                                  Calculator_additionReplyUtils::registerType(getParticipant()),
                                  this);
    this->substraction_Service = new Calculator_substractionClientRPC("substraction",
                                  Calculator_substractionRequestUtils::registerType(getParticipant()),
                                  Calculator_substractionReplyUtils::registerType(getParticipant()),
                                  this);
    this->multiplication_Service = new Calculator_multiplicationClientRPC("multiplication",
                                  Calculator_multiplicationRequestUtils::registerType(getParticipant()),
                                  Calculator_multiplicationReplyUtils::registerType(getParticipant()),
                                  this);
    this->division_Service = new Calculator_divisionClientRPC("division",
                                  Calculator_divisionRequestUtils::registerType(getParticipant()),
                                  Calculator_divisionReplyUtils::registerType(getParticipant()),
                                  this);

}

 
DDS_Long CalculatorProxy::addition(/*in*/ DDS_Long x, /*in*/ DDS_Long y) 
{
    eProsima::RPCDDS::ReturnMessage retcode = eProsima::RPCDDS::CLIENT_INTERNAL_ERROR;
    DDS_Long  addition_ret = 0;
    Calculator_additionRequest instance;
    Calculator_additionReply retInstance;

    Calculator_additionReply_initialize(&retInstance);
    Calculator_additionRequestUtils::setTypeData(instance, x, y);
    retcode = addition_Service->execute(&instance, &retInstance, getTimeout());
    
    if(retcode == eProsima::RPCDDS::OPERATION_SUCCESSFUL)
    {
        Calculator_additionReplyUtils::extractTypeData(retInstance, retcode, addition_ret);  
    }
    
    switch (retcode)
    {
        case eProsima::RPCDDS::CLIENT_INTERNAL_ERROR:
            throw eProsima::RPCDDS::ClientInternalException("Error in client side");
            break;
        case eProsima::RPCDDS::NO_SERVER:
            throw eProsima::RPCDDS::ServerNotFoundException("Cannot connect to the server");
            break;
        case eProsima::RPCDDS::SERVER_TIMEOUT:
            throw eProsima::RPCDDS::ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case eProsima::RPCDDS::SERVER_INTERNAL_ERROR:
            throw eProsima::RPCDDS::ServerInternalException(retInstance.header.rpcddsRetMsg);
            break;
    };
    

    return addition_ret;
}
 
DDS_Long CalculatorProxy::substraction(/*in*/ DDS_Long x, /*in*/ DDS_Long y) 
{
    eProsima::RPCDDS::ReturnMessage retcode = eProsima::RPCDDS::CLIENT_INTERNAL_ERROR;
    DDS_Long  substraction_ret = 0;
    Calculator_substractionRequest instance;
    Calculator_substractionReply retInstance;

    Calculator_substractionReply_initialize(&retInstance);
    Calculator_substractionRequestUtils::setTypeData(instance, x, y);
    retcode = substraction_Service->execute(&instance, &retInstance, getTimeout());
    
    if(retcode == eProsima::RPCDDS::OPERATION_SUCCESSFUL)
    {
        Calculator_substractionReplyUtils::extractTypeData(retInstance, retcode, substraction_ret);  
    }
    
    switch (retcode)
    {
        case eProsima::RPCDDS::CLIENT_INTERNAL_ERROR:
            throw eProsima::RPCDDS::ClientInternalException("Error in client side");
            break;
        case eProsima::RPCDDS::NO_SERVER:
            throw eProsima::RPCDDS::ServerNotFoundException("Cannot connect to the server");
            break;
        case eProsima::RPCDDS::SERVER_TIMEOUT:
            throw eProsima::RPCDDS::ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case eProsima::RPCDDS::SERVER_INTERNAL_ERROR:
            throw eProsima::RPCDDS::ServerInternalException(retInstance.header.rpcddsRetMsg);
            break;
    };
    

    return substraction_ret;
}
 
DDS_Long CalculatorProxy::multiplication(/*in*/ DDS_Long x, /*in*/ DDS_Long y) 
{
    eProsima::RPCDDS::ReturnMessage retcode = eProsima::RPCDDS::CLIENT_INTERNAL_ERROR;
    DDS_Long  multiplication_ret = 0;
    Calculator_multiplicationRequest instance;
    Calculator_multiplicationReply retInstance;

    Calculator_multiplicationReply_initialize(&retInstance);
    Calculator_multiplicationRequestUtils::setTypeData(instance, x, y);
    retcode = multiplication_Service->execute(&instance, &retInstance, getTimeout());
    
    if(retcode == eProsima::RPCDDS::OPERATION_SUCCESSFUL)
    {
        Calculator_multiplicationReplyUtils::extractTypeData(retInstance, retcode, multiplication_ret);  
    }
    
    switch (retcode)
    {
        case eProsima::RPCDDS::CLIENT_INTERNAL_ERROR:
            throw eProsima::RPCDDS::ClientInternalException("Error in client side");
            break;
        case eProsima::RPCDDS::NO_SERVER:
            throw eProsima::RPCDDS::ServerNotFoundException("Cannot connect to the server");
            break;
        case eProsima::RPCDDS::SERVER_TIMEOUT:
            throw eProsima::RPCDDS::ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case eProsima::RPCDDS::SERVER_INTERNAL_ERROR:
            throw eProsima::RPCDDS::ServerInternalException(retInstance.header.rpcddsRetMsg);
            break;
    };
    

    return multiplication_ret;
}
 
DDS_Long CalculatorProxy::division(/*in*/ DDS_Long x, /*in*/ DDS_Long y) 
{
    eProsima::RPCDDS::ReturnMessage retcode = eProsima::RPCDDS::CLIENT_INTERNAL_ERROR;
    DDS_Long  division_ret = 0;
    Calculator_divisionRequest instance;
    Calculator_divisionReply retInstance;

    Calculator_divisionReply_initialize(&retInstance);
    Calculator_divisionRequestUtils::setTypeData(instance, x, y);
    retcode = division_Service->execute(&instance, &retInstance, getTimeout());
    
    if(retcode == eProsima::RPCDDS::OPERATION_SUCCESSFUL)
    {
        Calculator_divisionReplyUtils::extractTypeData(retInstance, retcode, division_ret);  
    }
    
    switch (retcode)
    {
        case eProsima::RPCDDS::CLIENT_INTERNAL_ERROR:
            throw eProsima::RPCDDS::ClientInternalException("Error in client side");
            break;
        case eProsima::RPCDDS::NO_SERVER:
            throw eProsima::RPCDDS::ServerNotFoundException("Cannot connect to the server");
            break;
        case eProsima::RPCDDS::SERVER_TIMEOUT:
            throw eProsima::RPCDDS::ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case eProsima::RPCDDS::SERVER_INTERNAL_ERROR:
            throw eProsima::RPCDDS::ServerInternalException(retInstance.header.rpcddsRetMsg);
            break;
    };
    

    return division_ret;
}

 
void CalculatorProxy::addition_async(Calculator_additionCallbackHandler &obj, /*in*/ DDS_Long x, /*in*/ DDS_Long y) 
{
	eProsima::RPCDDS::ReturnMessage retcode = eProsima::RPCDDS::CLIENT_INTERNAL_ERROR;
    Calculator_additionRequest instance;
    Calculator_additionTask *task = NULL;
    Calculator_additionRequestUtils::setTypeData(instance, x, y);
    task = new Calculator_additionTask(obj, this);
    retcode = addition_Service->executeAsync(&instance, task, getTimeout());
    
    switch (retcode)
    {
        case eProsima::RPCDDS::CLIENT_INTERNAL_ERROR:
            throw eProsima::RPCDDS::ClientInternalException("Error in client side");
            break;
        case eProsima::RPCDDS::NO_SERVER:
             throw eProsima::RPCDDS::ServerNotFoundException("Cannot connect to the server");
             break;
    }
}
 
void CalculatorProxy::substraction_async(Calculator_substractionCallbackHandler &obj, /*in*/ DDS_Long x, /*in*/ DDS_Long y) 
{
	eProsima::RPCDDS::ReturnMessage retcode = eProsima::RPCDDS::CLIENT_INTERNAL_ERROR;
    Calculator_substractionRequest instance;
    Calculator_substractionTask *task = NULL;
    Calculator_substractionRequestUtils::setTypeData(instance, x, y);
    task = new Calculator_substractionTask(obj, this);
    retcode = substraction_Service->executeAsync(&instance, task, getTimeout());
    
    switch (retcode)
    {
        case eProsima::RPCDDS::CLIENT_INTERNAL_ERROR:
            throw eProsima::RPCDDS::ClientInternalException("Error in client side");
            break;
        case eProsima::RPCDDS::NO_SERVER:
             throw eProsima::RPCDDS::ServerNotFoundException("Cannot connect to the server");
             break;
    }
}
 
void CalculatorProxy::multiplication_async(Calculator_multiplicationCallbackHandler &obj, /*in*/ DDS_Long x, /*in*/ DDS_Long y) 
{
	eProsima::RPCDDS::ReturnMessage retcode = eProsima::RPCDDS::CLIENT_INTERNAL_ERROR;
    Calculator_multiplicationRequest instance;
    Calculator_multiplicationTask *task = NULL;
    Calculator_multiplicationRequestUtils::setTypeData(instance, x, y);
    task = new Calculator_multiplicationTask(obj, this);
    retcode = multiplication_Service->executeAsync(&instance, task, getTimeout());
    
    switch (retcode)
    {
        case eProsima::RPCDDS::CLIENT_INTERNAL_ERROR:
            throw eProsima::RPCDDS::ClientInternalException("Error in client side");
            break;
        case eProsima::RPCDDS::NO_SERVER:
             throw eProsima::RPCDDS::ServerNotFoundException("Cannot connect to the server");
             break;
    }
}
 
void CalculatorProxy::division_async(Calculator_divisionCallbackHandler &obj, /*in*/ DDS_Long x, /*in*/ DDS_Long y) 
{
	eProsima::RPCDDS::ReturnMessage retcode = eProsima::RPCDDS::CLIENT_INTERNAL_ERROR;
    Calculator_divisionRequest instance;
    Calculator_divisionTask *task = NULL;
    Calculator_divisionRequestUtils::setTypeData(instance, x, y);
    task = new Calculator_divisionTask(obj, this);
    retcode = division_Service->executeAsync(&instance, task, getTimeout());
    
    switch (retcode)
    {
        case eProsima::RPCDDS::CLIENT_INTERNAL_ERROR:
            throw eProsima::RPCDDS::ClientInternalException("Error in client side");
            break;
        case eProsima::RPCDDS::NO_SERVER:
             throw eProsima::RPCDDS::ServerNotFoundException("Cannot connect to the server");
             break;
    }
}