/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of RPCDDS is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorRequestReplyUtils.cxx
 * This source file contains the definition of helpful functions for the DDS messages for interface Calculator.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "CalculatorRequestReplyUtils.h"
#include "CalculatorRequestReplyPlugin.h"


const char* Calculator_additionRequestUtils::registerType(DDS::DomainParticipant *participant)
{
    const char *typeName = NULL;

    if(participant != NULL)
    {
        typeName = "Calculator_additionRequest";

        if(Calculator_additionRequestTypeSupport::register_type(participant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void Calculator_additionRequestUtils::setTypeData(Calculator_additionRequest& instance, /*in*/ DDS_Long x, /*in*/ DDS_Long y)
{
    instance.x = x;
    instance.y = y;
    
}

void Calculator_additionRequestUtils::extractTypeData(Calculator_additionRequest& data, /*in*/ DDS_Long& x, /*in*/ DDS_Long& y)
{
    x = data.x;
    y = data.y;  
    
}


const char* Calculator_additionReplyUtils::registerType(DDS::DomainParticipant *participant)
{
    const char *typeName = NULL;

    if(participant != NULL)
    {
        typeName = "Calculator_additionReply";

        if(Calculator_additionReplyTypeSupport::register_type(participant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void Calculator_additionReplyUtils::setTypeData(Calculator_additionReply& instance, /*out*/ DDS_Long addition_ret)
{
    instance.addition_ret = addition_ret;            
}

void Calculator_additionReplyUtils::extractTypeData(Calculator_additionReply& data, eProsima::RPCDDS::ReturnMessage& retcode, /*out*/ DDS_Long& addition_ret)
{
retcode = (eProsima::RPCDDS::ReturnMessage)data.header.rpcddsRetCode;
  
    addition_ret = data.addition_ret;            
}


const char* Calculator_substractionRequestUtils::registerType(DDS::DomainParticipant *participant)
{
    const char *typeName = NULL;

    if(participant != NULL)
    {
        typeName = "Calculator_substractionRequest";

        if(Calculator_substractionRequestTypeSupport::register_type(participant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void Calculator_substractionRequestUtils::setTypeData(Calculator_substractionRequest& instance, /*in*/ DDS_Long x, /*in*/ DDS_Long y)
{
    instance.x = x;
    instance.y = y;
    
}

void Calculator_substractionRequestUtils::extractTypeData(Calculator_substractionRequest& data, /*in*/ DDS_Long& x, /*in*/ DDS_Long& y)
{
    x = data.x;
    y = data.y;  
    
}


const char* Calculator_substractionReplyUtils::registerType(DDS::DomainParticipant *participant)
{
    const char *typeName = NULL;

    if(participant != NULL)
    {
        typeName = "Calculator_substractionReply";

        if(Calculator_substractionReplyTypeSupport::register_type(participant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void Calculator_substractionReplyUtils::setTypeData(Calculator_substractionReply& instance, /*out*/ DDS_Long substraction_ret)
{
    instance.substraction_ret = substraction_ret;            
}

void Calculator_substractionReplyUtils::extractTypeData(Calculator_substractionReply& data, eProsima::RPCDDS::ReturnMessage& retcode, /*out*/ DDS_Long& substraction_ret)
{
retcode = (eProsima::RPCDDS::ReturnMessage)data.header.rpcddsRetCode;
  
    substraction_ret = data.substraction_ret;            
}


const char* Calculator_multiplicationRequestUtils::registerType(DDS::DomainParticipant *participant)
{
    const char *typeName = NULL;

    if(participant != NULL)
    {
        typeName = "Calculator_multiplicationRequest";

        if(Calculator_multiplicationRequestTypeSupport::register_type(participant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void Calculator_multiplicationRequestUtils::setTypeData(Calculator_multiplicationRequest& instance, /*in*/ DDS_Long x, /*in*/ DDS_Long y)
{
    instance.x = x;
    instance.y = y;
    
}

void Calculator_multiplicationRequestUtils::extractTypeData(Calculator_multiplicationRequest& data, /*in*/ DDS_Long& x, /*in*/ DDS_Long& y)
{
    x = data.x;
    y = data.y;  
    
}


const char* Calculator_multiplicationReplyUtils::registerType(DDS::DomainParticipant *participant)
{
    const char *typeName = NULL;

    if(participant != NULL)
    {
        typeName = "Calculator_multiplicationReply";

        if(Calculator_multiplicationReplyTypeSupport::register_type(participant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void Calculator_multiplicationReplyUtils::setTypeData(Calculator_multiplicationReply& instance, /*out*/ DDS_Long multiplication_ret)
{
    instance.multiplication_ret = multiplication_ret;            
}

void Calculator_multiplicationReplyUtils::extractTypeData(Calculator_multiplicationReply& data, eProsima::RPCDDS::ReturnMessage& retcode, /*out*/ DDS_Long& multiplication_ret)
{
retcode = (eProsima::RPCDDS::ReturnMessage)data.header.rpcddsRetCode;
  
    multiplication_ret = data.multiplication_ret;            
}


const char* Calculator_divisionRequestUtils::registerType(DDS::DomainParticipant *participant)
{
    const char *typeName = NULL;

    if(participant != NULL)
    {
        typeName = "Calculator_divisionRequest";

        if(Calculator_divisionRequestTypeSupport::register_type(participant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void Calculator_divisionRequestUtils::setTypeData(Calculator_divisionRequest& instance, /*in*/ DDS_Long x, /*in*/ DDS_Long y)
{
    instance.x = x;
    instance.y = y;
    
}

void Calculator_divisionRequestUtils::extractTypeData(Calculator_divisionRequest& data, /*in*/ DDS_Long& x, /*in*/ DDS_Long& y)
{
    x = data.x;
    y = data.y;  
    
}


const char* Calculator_divisionReplyUtils::registerType(DDS::DomainParticipant *participant)
{
    const char *typeName = NULL;

    if(participant != NULL)
    {
        typeName = "Calculator_divisionReply";

        if(Calculator_divisionReplyTypeSupport::register_type(participant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void Calculator_divisionReplyUtils::setTypeData(Calculator_divisionReply& instance, /*out*/ DDS_Long division_ret)
{
    instance.division_ret = division_ret;            
}

void Calculator_divisionReplyUtils::extractTypeData(Calculator_divisionReply& data, eProsima::RPCDDS::ReturnMessage& retcode, /*out*/ DDS_Long& division_ret)
{
retcode = (eProsima::RPCDDS::ReturnMessage)data.header.rpcddsRetCode;
  
    division_ret = data.division_ret;            
}

 