/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SimpleDelay_TYPES_H
#define SimpleDelay_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _Estructura__isset {
  _Estructura__isset() : long1(false), long2(false), string1(false), prueba(false) {}
  bool long1;
  bool long2;
  bool string1;
  bool prueba;
} _Estructura__isset;

class Estructura {
 public:

  static const char* ascii_fingerprint; // = "A04D2A309A2DD67EC5F16AB0BA9DC066";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0x4D,0x2A,0x30,0x9A,0x2D,0xD6,0x7E,0xC5,0xF1,0x6A,0xB0,0xBA,0x9D,0xC0,0x66};

  Estructura() : long1(0), long2(0), string1() {
  }

  virtual ~Estructura() throw() {}

  int32_t long1;
  int32_t long2;
  std::string string1;
  std::vector<int32_t>  prueba;

  _Estructura__isset __isset;

  void __set_long1(const int32_t val) {
    long1 = val;
  }

  void __set_long2(const int32_t val) {
    long2 = val;
  }

  void __set_string1(const std::string& val) {
    string1 = val;
  }

  void __set_prueba(const std::vector<int32_t> & val) {
    prueba = val;
  }

  bool operator == (const Estructura & rhs) const
  {
    if (!(long1 == rhs.long1))
      return false;
    if (!(long2 == rhs.long2))
      return false;
    if (!(string1 == rhs.string1))
      return false;
    if (!(prueba == rhs.prueba))
      return false;
    return true;
  }
  bool operator != (const Estructura &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Estructura & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

void swap(Estructura &a, Estructura &b);



#include "SimpleDelay_types.tcc"

#endif
