/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SimpleDelay_H
#define SimpleDelay_H

#include <thrift/TDispatchProcessor.h>
#include "SimpleDelay_types.h"



class SimpleDelayIf {
 public:
  virtual ~SimpleDelayIf() {}
  virtual int32_t suma(const int32_t value1, const int32_t value2) = 0;
  virtual void duplicate(Estructura& _return, const Estructura& es) = 0;
};

class SimpleDelayIfFactory {
 public:
  typedef SimpleDelayIf Handler;

  virtual ~SimpleDelayIfFactory() {}

  virtual SimpleDelayIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SimpleDelayIf* /* handler */) = 0;
};

class SimpleDelayIfSingletonFactory : virtual public SimpleDelayIfFactory {
 public:
  SimpleDelayIfSingletonFactory(const boost::shared_ptr<SimpleDelayIf>& iface) : iface_(iface) {}
  virtual ~SimpleDelayIfSingletonFactory() {}

  virtual SimpleDelayIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SimpleDelayIf* /* handler */) {}

 protected:
  boost::shared_ptr<SimpleDelayIf> iface_;
};

class SimpleDelayNull : virtual public SimpleDelayIf {
 public:
  virtual ~SimpleDelayNull() {}
  int32_t suma(const int32_t /* value1 */, const int32_t /* value2 */) {
    int32_t _return = 0;
    return _return;
  }
  void duplicate(Estructura& /* _return */, const Estructura& /* es */) {
    return;
  }
};

typedef struct _SimpleDelay_suma_args__isset {
  _SimpleDelay_suma_args__isset() : value1(false), value2(false) {}
  bool value1;
  bool value2;
} _SimpleDelay_suma_args__isset;

class SimpleDelay_suma_args {
 public:

  SimpleDelay_suma_args() : value1(0), value2(0) {
  }

  virtual ~SimpleDelay_suma_args() throw() {}

  int32_t value1;
  int32_t value2;

  _SimpleDelay_suma_args__isset __isset;

  void __set_value1(const int32_t val) {
    value1 = val;
  }

  void __set_value2(const int32_t val) {
    value2 = val;
  }

  bool operator == (const SimpleDelay_suma_args & rhs) const
  {
    if (!(value1 == rhs.value1))
      return false;
    if (!(value2 == rhs.value2))
      return false;
    return true;
  }
  bool operator != (const SimpleDelay_suma_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDelay_suma_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class SimpleDelay_suma_pargs {
 public:


  virtual ~SimpleDelay_suma_pargs() throw() {}

  const int32_t* value1;
  const int32_t* value2;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _SimpleDelay_suma_result__isset {
  _SimpleDelay_suma_result__isset() : success(false) {}
  bool success;
} _SimpleDelay_suma_result__isset;

class SimpleDelay_suma_result {
 public:

  SimpleDelay_suma_result() : success(0) {
  }

  virtual ~SimpleDelay_suma_result() throw() {}

  int32_t success;

  _SimpleDelay_suma_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SimpleDelay_suma_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleDelay_suma_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDelay_suma_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _SimpleDelay_suma_presult__isset {
  _SimpleDelay_suma_presult__isset() : success(false) {}
  bool success;
} _SimpleDelay_suma_presult__isset;

class SimpleDelay_suma_presult {
 public:


  virtual ~SimpleDelay_suma_presult() throw() {}

  int32_t* success;

  _SimpleDelay_suma_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _SimpleDelay_duplicate_args__isset {
  _SimpleDelay_duplicate_args__isset() : es(false) {}
  bool es;
} _SimpleDelay_duplicate_args__isset;

class SimpleDelay_duplicate_args {
 public:

  SimpleDelay_duplicate_args() {
  }

  virtual ~SimpleDelay_duplicate_args() throw() {}

  Estructura es;

  _SimpleDelay_duplicate_args__isset __isset;

  void __set_es(const Estructura& val) {
    es = val;
  }

  bool operator == (const SimpleDelay_duplicate_args & rhs) const
  {
    if (!(es == rhs.es))
      return false;
    return true;
  }
  bool operator != (const SimpleDelay_duplicate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDelay_duplicate_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class SimpleDelay_duplicate_pargs {
 public:


  virtual ~SimpleDelay_duplicate_pargs() throw() {}

  const Estructura* es;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _SimpleDelay_duplicate_result__isset {
  _SimpleDelay_duplicate_result__isset() : success(false) {}
  bool success;
} _SimpleDelay_duplicate_result__isset;

class SimpleDelay_duplicate_result {
 public:

  SimpleDelay_duplicate_result() {
  }

  virtual ~SimpleDelay_duplicate_result() throw() {}

  Estructura success;

  _SimpleDelay_duplicate_result__isset __isset;

  void __set_success(const Estructura& val) {
    success = val;
  }

  bool operator == (const SimpleDelay_duplicate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleDelay_duplicate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleDelay_duplicate_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _SimpleDelay_duplicate_presult__isset {
  _SimpleDelay_duplicate_presult__isset() : success(false) {}
  bool success;
} _SimpleDelay_duplicate_presult__isset;

class SimpleDelay_duplicate_presult {
 public:


  virtual ~SimpleDelay_duplicate_presult() throw() {}

  Estructura* success;

  _SimpleDelay_duplicate_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class SimpleDelayClientT : virtual public SimpleDelayIf {
 public:
  SimpleDelayClientT(boost::shared_ptr< Protocol_> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SimpleDelayClientT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  int32_t suma(const int32_t value1, const int32_t value2);
  void send_suma(const int32_t value1, const int32_t value2);
  int32_t recv_suma();
  void duplicate(Estructura& _return, const Estructura& es);
  void send_duplicate(const Estructura& es);
  void recv_duplicate(Estructura& _return);
 protected:
  boost::shared_ptr< Protocol_> piprot_;
  boost::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef SimpleDelayClientT< ::apache::thrift::protocol::TProtocol> SimpleDelayClient;

template <class Protocol_>
class SimpleDelayProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  boost::shared_ptr<SimpleDelayIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SimpleDelayProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (SimpleDelayProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_suma(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_suma(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_duplicate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_duplicate(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  SimpleDelayProcessorT(boost::shared_ptr<SimpleDelayIf> iface) :
    iface_(iface) {
    processMap_["suma"] = ProcessFunctions(
      &SimpleDelayProcessorT::process_suma,
      &SimpleDelayProcessorT::process_suma);
    processMap_["duplicate"] = ProcessFunctions(
      &SimpleDelayProcessorT::process_duplicate,
      &SimpleDelayProcessorT::process_duplicate);
  }

  virtual ~SimpleDelayProcessorT() {}
};

typedef SimpleDelayProcessorT< ::apache::thrift::protocol::TDummyProtocol > SimpleDelayProcessor;

template <class Protocol_>
class SimpleDelayProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  SimpleDelayProcessorFactoryT(const ::boost::shared_ptr< SimpleDelayIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SimpleDelayIfFactory > handlerFactory_;
};

typedef SimpleDelayProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > SimpleDelayProcessorFactory;

class SimpleDelayMultiface : virtual public SimpleDelayIf {
 public:
  SimpleDelayMultiface(std::vector<boost::shared_ptr<SimpleDelayIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SimpleDelayMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SimpleDelayIf> > ifaces_;
  SimpleDelayMultiface() {}
  void add(boost::shared_ptr<SimpleDelayIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t suma(const int32_t value1, const int32_t value2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->suma(value1, value2);
    }
    return ifaces_[i]->suma(value1, value2);
  }

  void duplicate(Estructura& _return, const Estructura& es) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->duplicate(_return, es);
    }
    ifaces_[i]->duplicate(_return, es);
    return;
  }

};



#include "SimpleDelay.tcc"
#include "SimpleDelay_types.tcc"

#endif
