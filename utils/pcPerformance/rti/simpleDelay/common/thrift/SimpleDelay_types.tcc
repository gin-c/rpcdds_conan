/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SimpleDelay_TYPES_TCC
#define SimpleDelay_TYPES_TCC

#include "SimpleDelay_types.h"



template <class Protocol_>
uint32_t Estructura::read(Protocol_* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->long1);
          this->__isset.long1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->long2);
          this->__isset.long2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->string1);
          this->__isset.string1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->prueba.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->prueba.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->prueba[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.prueba = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Estructura::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Estructura");

  xfer += oprot->writeFieldBegin("long1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->long1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("long2", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->long2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("string1", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->string1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prueba", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->prueba.size()));
    std::vector<int32_t> ::const_iterator _iter5;
    for (_iter5 = this->prueba.begin(); _iter5 != this->prueba.end(); ++_iter5)
    {
      xfer += oprot->writeI32((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}



#endif
