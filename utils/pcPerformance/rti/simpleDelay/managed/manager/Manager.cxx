/* ControlData_publisher.cxx

   A publication of data of type ControlData

   This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language C++ -example <arch> ControlData.idl

Example publication of type ControlData automatically generated by 
'rtiddsgen'. To test them follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription with the command
objs/<arch>/ControlData_subscriber <domain_id> <sample_count>

(3) Start the publication with the command
objs/<arch>/ControlData_publisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.


Example:

To run the example application on domain <domain_id>:

On Unix: 

objs/<arch>/ControlData_publisher <domain_id> o
objs/<arch>/ControlData_subscriber <domain_id> 

On Windows:

objs\<arch>\ControlData_publisher <domain_id>  
objs\<arch>\ControlData_subscriber <domain_id>    


modification history
------------ -------       
*/

#include <stdio.h>
#include <stdlib.h>
#include "ControlData.h"
#include "ControlDataSupport.h"
#include "ndds/ndds_cpp.h"

#include <boost/chrono.hpp>
#include <boost/thread.hpp>

static unsigned int max_clients = 0;
static unsigned int current_clients = 0;

class ControlDataListener : public DDSDataReaderListener {
    public:

        ControlDataListener(boost::condition_variable &cond) : m_cond(cond) {}

        virtual void on_requested_deadline_missed(
                DDSDataReader* /*reader*/,
                const DDS_RequestedDeadlineMissedStatus& /*status*/) {}

        virtual void on_requested_incompatible_qos(
                DDSDataReader* /*reader*/,
                const DDS_RequestedIncompatibleQosStatus& /*status*/) {}

        virtual void on_sample_rejected(
                DDSDataReader* /*reader*/,
                const DDS_SampleRejectedStatus& /*status*/) {}

        virtual void on_liveliness_changed(
                DDSDataReader* /*reader*/,
                const DDS_LivelinessChangedStatus& /*status*/) {}

        virtual void on_sample_lost(
                DDSDataReader* /*reader*/,
                const DDS_SampleLostStatus& /*status*/) {}

        virtual void on_subscription_matched(
                DDSDataReader* /*reader*/,
                const DDS_SubscriptionMatchedStatus& /*status*/) {}

        virtual void on_data_available(DDSDataReader* reader);

    private:

        boost::condition_variable &m_cond;
};

void ControlDataListener::on_data_available(DDSDataReader* reader)
{
    ControlDataDataReader *ControlData_reader = NULL;
    ControlDataSeq data_seq;
    DDS_SampleInfoSeq info_seq;
    DDS_ReturnCode_t retcode;
    int i;

    ControlData_reader = ControlDataDataReader::narrow(reader);
    if (ControlData_reader == NULL) {
        printf("DataReader narrow error\n");
        return;
    }

    retcode = ControlData_reader->take(
            data_seq, info_seq, DDS_LENGTH_UNLIMITED,
            DDS_ANY_SAMPLE_STATE, DDS_ANY_VIEW_STATE, DDS_ANY_INSTANCE_STATE);

    if (retcode == DDS_RETCODE_NO_DATA) {
        return;
    } else if (retcode != DDS_RETCODE_OK) {
        printf("take error %d\n", retcode);
        return;
    }

    for (i = 0; i < data_seq.length(); ++i) {
        if (info_seq[i].valid_data) {
            if(data_seq[i].action == READY)
            {
                ++current_clients;
                if(current_clients == max_clients)
                    m_cond.notify_one();
            }
        }
    }

    retcode = ControlData_reader->return_loan(data_seq, info_seq);
    if (retcode != DDS_RETCODE_OK) {
        printf("return loan error %d\n", retcode);
    }
}

/* Delete all entities */
static int manager_shutdown(
        DDSDomainParticipant *participant)
{
    DDS_ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        retcode = participant->delete_contained_entities();
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = DDSTheParticipantFactory->delete_participant(participant);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* RTI Connext provides finalize_instance() method on
       domain participant factory for people who want to release memory used
       by the participant factory. Uncomment the following block of code for
       clean destruction of the singleton. */
    /*
       retcode = DDSDomainParticipantFactory::finalize_instance();
       if (retcode != DDS_RETCODE_OK) {
       printf("finalize_instance error %d\n", retcode);
       status = -1;
       }
       */

    return status;
}

extern "C" int manager_main()
{
    DDSDomainParticipant *participant = NULL;
    DDSPublisher *publisher = NULL;
    DDSSubscriber *subscriber = NULL;
    DDSTopic *topic = NULL;
    DDSDataWriter *writer = NULL;
    ControlDataListener *reader_listener = NULL; 
    DDSDataReader *reader = NULL;
    ControlDataDataWriter * ControlData_writer = NULL;
    ControlData *instance = NULL;
    DDS_ReturnCode_t retcode;
    DDS_InstanceHandle_t instance_handle = DDS_HANDLE_NIL;
    const char *type_name = NULL;
    int count = 0;  
    DDS_Duration_t wait_period = {DDS_DURATION_INFINITY_SEC, DDS_DURATION_INFINITY_NSEC};
    DDS_DomainParticipantQos pQos;
    boost::mutex mutex;
    boost::condition_variable cond;

    DDSTheParticipantFactory->get_default_participant_qos(pQos);
    pQos.transport_builtin.mask == DDS_TRANSPORTBUILTIN_SHMEM;

    /* To customize participant QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    participant = DDSTheParticipantFactory->create_participant(
            100, pQos, 
            NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (participant == NULL) {
        printf("create_participant error\n");
        manager_shutdown(participant);
        return -1;
    }

    /* To customize publisher QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    publisher = participant->create_publisher(
            DDS_PUBLISHER_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (publisher == NULL) {
        printf("create_publisher error\n");
        manager_shutdown(participant);
        return -1;
    }

    /* To customize the subscriber QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    subscriber = participant->create_subscriber(
            DDS_SUBSCRIBER_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (subscriber == NULL) {
        printf("create_subscriber error\n");
        manager_shutdown(participant);
        return -1;
    }

    /* Register type before creating topic */
    type_name = ControlDataTypeSupport::get_type_name();
    retcode = ControlDataTypeSupport::register_type(
            participant, type_name);
    if (retcode != DDS_RETCODE_OK) {
        printf("register_type error %d\n", retcode);
        manager_shutdown(participant);
        return -1;
    }

    /* To customize topic QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    topic = participant->create_topic(
            "Example ControlData",
            type_name, DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
            DDS_STATUS_MASK_NONE);
    if (topic == NULL) {
        printf("create_topic error\n");
        manager_shutdown(participant);
        return -1;
    }

    DDS_DataWriterQos wQos;
    publisher->get_default_datawriter_qos(wQos);
    wQos.reliability.kind = DDS_RELIABLE_RELIABILITY_QOS;
    wQos.history.kind = DDS_KEEP_ALL_HISTORY_QOS;
    wQos.durability.kind = DDS_TRANSIENT_LOCAL_DURABILITY_QOS;
    /* To customize data writer QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    writer = publisher->create_datawriter(
            topic, wQos, NULL /* listener */,
            DDS_STATUS_MASK_NONE);
    if (writer == NULL) {
        printf("create_datawriter error\n");
        manager_shutdown(participant);
        return -1;
    }
    ControlData_writer = ControlDataDataWriter::narrow(writer);
    if (ControlData_writer == NULL) {
        printf("DataWriter narrow error\n");
        manager_shutdown(participant);
        return -1;
    }

    /* Create a data reader listener */
    reader_listener = new ControlDataListener(cond);

    DDS_DataReaderQos rQos;
    subscriber->get_default_datareader_qos(rQos);
    rQos.reliability.kind = DDS_RELIABLE_RELIABILITY_QOS;
    rQos.history.kind = DDS_KEEP_ALL_HISTORY_QOS;
    rQos.durability.kind = DDS_TRANSIENT_LOCAL_DURABILITY_QOS;
    /* To customize the data reader QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    reader = subscriber->create_datareader(
            topic, rQos, reader_listener,
            DDS_STATUS_MASK_ALL);
    if (reader == NULL) {
        printf("create_datareader error\n");
        manager_shutdown(participant);
        delete reader_listener;
        return -1;
    }

    printf("Waiting to the clients...\n");

    // Esperar a que est√©n todos los clientes activos.
    boost::unique_lock<boost::mutex> lock(mutex);
    cond.wait(lock);

    printf("Detected all clients. Sending the START action.\n");

    /* Create data sample for writing */

    instance = ControlDataTypeSupport::create_data();

    if (instance == NULL) {
        printf("ControlDataTypeSupport::create_data error\n");
        manager_shutdown(participant);
        return -1;
    }

    instance->appId = 0;
    instance->action = START;

    retcode = ControlData_writer->write(*instance, instance_handle);
    if (retcode != DDS_RETCODE_OK) {
        printf("write error %d\n", retcode);
    }

    /* Delete data sample */
    retcode = ControlDataTypeSupport::delete_data(instance);
    if (retcode != DDS_RETCODE_OK) {
        printf("ControlDataTypeSupport::delete_data error %d\n", retcode);
    }

    // Esperar a que todos lo reciban antes de terminar.
    ControlData_writer->wait_for_acknowledgments(wait_period);

    printf("Received START action by all clients\n");

    /* Delete all entities */
    return manager_shutdown(participant);
}

int main(int argc, char *argv[])
{
    if(argc == 2)
    {
        if(sscanf(argv[1], "%u", &max_clients) == 1)
        {
            /* Uncomment this to turn on additional logging
               NDDSConfigLogger::get_instance()->
               set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
               NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
               */

            return manager_main();
        }
        else
        {
            printf("Bad number of clients parameter\n");
        }
    }
    else
    {
        printf("Expected the number of clients\n");
    }

    return -1;
}

