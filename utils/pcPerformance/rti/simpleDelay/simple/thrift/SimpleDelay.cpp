/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include <netinet/in.h>
#include <boost/shared_ptr.hpp>
#include <boost/chrono.hpp>

#include "SimpleDelay.h"
#include "SimpleDelay.tcc"

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TSocket.h>

#include <iostream>
#include <fstream>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;

int main(int argc, char** argv)
{
    boost::chrono::duration<double> suma_call_seconds[10000];
    boost::chrono::duration<double> duplicate_call_seconds[10000];
    boost::chrono::duration<double> suma_procedure_seconds;
    boost::chrono::duration<double> duplicate_procedure_seconds;
    boost::chrono::duration<double> program_seconds;

    if(argc == 3)
    {
        uint16_t ip[4];
        uint32_t data_size;

        // Check that the parameter is a IP address.
        if(sscanf(argv[1], "%hu.%hu.%hu.%hu", &ip[0], &ip[1], &ip[2], &ip[3]) == 4)
        {
            if(sscanf(argv[2], "%u", &data_size) == 1)
            {
                boost::shared_ptr<TSocket> socket(new TSocket(argv[1], 9090));
                boost::shared_ptr<TBufferedTransport> transport(new TBufferedTransport(socket));
                boost::shared_ptr<TBinaryProtocol> protocol(new TBinaryProtocol(transport));
                SimpleDelayClient client(protocol);

                try
                {
                    transport->open();

                    boost::chrono::system_clock::time_point program_start = boost::chrono::system_clock::now();

                    //boost::chrono::system_clock::time_point procedure_start = boost::chrono::system_clock::now();
                    // Testing suma procedure.
                    /*for(int i = 0; i < 10000; ++i)
                      {
                      boost::chrono::system_clock::time_point call_start = boost::chrono::system_clock::now();
                      int32_t result = client.suma(10, i);
                      suma_call_seconds[i] = boost::chrono::system_clock::now() - call_start;
                      }*/

                    //suma_procedure_seconds = boost::chrono::system_clock::now() - procedure_start;

                    //procedure_start = boost::chrono::system_clock::now();
                    // Testing ducplicate procedure.
                    for(int i = 0; i < 10000; ++i)
                    {
                        Estructura es, ret;
                        es.long1 = i;
                        es.long2 = i*2;
                        es.string1 = "Esto es una prueba para el test de performance rpcdds vs thrift vs rpcdds";
                        for(int j = 0; j < data_size; ++j)
                            es.prueba.push_back(j);

                        boost::chrono::system_clock::time_point call_start = boost::chrono::system_clock::now();
                        client.duplicate(ret, es);
                        duplicate_call_seconds[i] = boost::chrono::system_clock::now() - call_start;
                    }

                    //duplicate_procedure_seconds = boost::chrono::system_clock::now() - procedure_start;

                    program_seconds = boost::chrono::system_clock::now() - program_start;

                    // Print the suma call times.
                    //for(int i = 0; i < 10000; ++i)
                    //    std::cout << i << " > suma in " << suma_call_seconds[i].count() << " seconds." << std::endl;
                    // Print the all suma procedure time.
                    //std::cout << "Executed 10000 suma procedures in " << suma_procedure_seconds.count() << " seconds." << std::endl;

                    // Print the duplicate call times.
                    //for(int i = 0; i < 10000; ++i)
                    //    std::cout << i << " > duplicate in " << duplicate_call_seconds[i].count() << " seconds." << std::endl;
                    // Print the all duplicate procedure time.
                    //std::cout << "Executed 10000 duplicate procedures in " << duplicate_procedure_seconds.count() << " seconds." << std::endl;

                    // Print total execution time.
                    std::cout << "Program execution in " << program_seconds.count() << " seconds." << std::endl;

                    // Calcular latencia media y el que mÃ¡s tarda.
                    boost::chrono::duration<double> max_dur = duplicate_call_seconds[0];
                    int max_pos = 0;
                    boost::chrono::duration<double> min_dur = duplicate_call_seconds[0];
                    int min_pos = 0;
                    boost::chrono::duration<double> suma_dur = duplicate_call_seconds[0];

                    for(int count = 1; count < 10000; ++count)
                    {
                        if(duplicate_call_seconds[count] > max_dur)
                        {
                            max_dur = duplicate_call_seconds[count];
                            max_pos = count;
                        }

                        if(duplicate_call_seconds[count] < min_dur)
                        {
                            min_dur = duplicate_call_seconds[count];
                            min_pos = count;
                        }

                        suma_dur = suma_dur + duplicate_call_seconds[count];
                    }

                    std::sort(duplicate_call_seconds, duplicate_call_seconds + 10000);

                    std::cout << "The faster call was " << min_pos << " with " << min_dur << std::endl;
                    std::cout << "The slowest call was " << max_pos << " with " << max_dur << std::endl;
                    std::cout << "The latency average was " << suma_dur / 10000 << std::endl;
                    std::cout << "The 5000th value was " << duplicate_call_seconds[4999] << std::endl;

                    // Guardar datos en ficheros.
                    std::ofstream file;
                    file.open("client.txt", std::ios::app);
                    file << min_dur << " " << max_dur << " " << suma_dur/10000 << " " << duplicate_call_seconds[4999] << std::endl;
                    file.close();

                    transport->close();
                } catch (TException &tx) {
                    printf("ERROR: %s\n", tx.what());
                    std::cout << "Error: " << tx.what() << std::endl;
                }
            }
            else
            {
                std::cout << "Second parameter is not a valid data size." << std::endl;
            }
        }
        else
        {
            std::cout << "First parameter is not a valid IPv4 address." << std::endl;
        }
    }
    else
    {
        std::cout << "The server IP address is expected." << std::endl;
    }

    return 0;
}


