/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 * 
 * @file LatencyDDSProtocol.cxx
 * This source file contains the definition of the protocol used to create DDS messages.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "LatencyDDSProtocol.h"
#include "rpcdds/transports/Transport.h"
#include "rpcdds/transports/dds/ProxyTransport.h"
#include "rpcdds/transports/dds/components/ProxyProcedureEndpoint.h"
#include "LatencyDDSAsyncSupport.h"
#include "rpcdds/transports/dds/ServerTransport.h"
#include "rpcdds/transports/dds/components/ServerProcedureEndpoint.h"
#include "rpcdds/exceptions/Exceptions.h"
#include "LatencyTopicsPlugin.h"
using namespace eprosima::rpc;
using namespace ::protocol::dds;
using namespace ::transport;
using namespace ::exception;

LatencyProtocol::LatencyProtocol() : ::protocol::LatencyProtocol(), m_ddsTransport(NULL)
, Latency_str("Latency")
, Latency_pe(NULL), Latency_se(NULL)
{
}

LatencyProtocol::~LatencyProtocol()
{
}

bool LatencyProtocol::setTransport(Transport &transport)
{
    if(strcmp(transport.getType(), "DDS") == 0)
    {
        m_ddsTransport = dynamic_cast<eprosima::rpc::transport::dds::Transport*>(&transport);
        
        m_ddsTransport->initialize();
        
        Protocol::_setTransport(transport);
        
        return true;  
    }
    else
    {
        throw IncompatibleException("protocol and transport are incompatibles");
    }
    
    return false;
}

// TODO Si falla que elimine los creados.
bool LatencyProtocol::activateInterface(const char* interfaceName)
{
    const char *requesttypeName = NULL, *replytypeName = NULL;

    if(m_ddsTransport != NULL)
    {
        TransportBehaviour behaviour = dynamic_cast<Transport*>(m_ddsTransport)->getBehaviour();
        
        if(strcmp(interfaceName, "Latency") == 0)
        {
            requesttypeName = Latency_RequestPlugin::get_typename();
    
            if(!Latency_RequestPlugin::register_type(m_ddsTransport->getParticipant(), requesttypeName))
            {
                return false;
            }
            
            replytypeName = Latency_ReplyPlugin::get_typename();
    
            if(!Latency_ReplyPlugin::register_type(m_ddsTransport->getParticipant(), replytypeName))
            {
                return false;
            }
            
            if(behaviour == ::transport::PROXY_BEHAVIOUR)
            {
                Latency_pe = dynamic_cast<eprosima::rpc::transport::dds::ProxyProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint(Latency_str,
                requesttypeName,
                replytypeName,
                true,
                (::transport::dds::Transport::Create_data)Latency_ReplyPlugin::create_data,
                (::transport::dds::Transport::Copy_data)Latency_ReplyPlugin::copy_data,
                (::transport::dds::Transport::Destroy_data)Latency_ReplyPlugin::destroy_data,
                NULL,
                sizeof(Latency_Reply)
                ));
            }
            if(behaviour == ::transport::SERVER_BEHAVIOUR)
            {
                Latency_se = dynamic_cast<eprosima::rpc::transport::dds::ServerProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint(Latency_str,
                    replytypeName,
                    requesttypeName,
		            true,
                    (::transport::dds::Transport::Create_data)Latency_RequestPlugin::create_data,
                    (::transport::dds::Transport::Copy_data)Latency_RequestPlugin::copy_data,
                    (::transport::dds::Transport::Destroy_data)Latency_RequestPlugin::destroy_data,
                    LatencyProtocol::Latency_serve,
                    sizeof(Latency_Request)));
            }
        }
        
        return true;
    }
    else
    {
      // TODO Trace.
    }
    
    return false;
}



void LatencyProtocol::Latency_serve(eprosima::rpc::protocol::Protocol &protocol,
    void *_data , eprosima::rpc::transport::Endpoint *endpoint)
{
    LatencyProtocol &_protocol = dynamic_cast<LatencyProtocol&>(protocol);
    Latency_Request &requestData = *(Latency_Request*)_data;

    switch(requestData.request()._d())
    {
                case 0x9E800F53:
                {
                st  param;
                st  return_;   
                Latency_Reply replyData;
                memcpy(replyData.header().request_id().guid().value(), requestData.header().request_id().guid().value(), 16);
                replyData.header().request_id().sequence_number() = requestData.header().request_id().sequence_number();

                replyData.reply()._d() = 0x9E800F53;


                 
                param = std::move(requestData.request().latency().param()); //TODO Probar que esto funciona. 

                try
                {
                    if(_protocol._Latency_impl != NULL)
                    {
                        return_ = _protocol._Latency_impl->latency(param);

                        replyData.reply().latency()._d() = 0;

                        replyData.reply().latency().out_().return_(std::move(return_));

                        _protocol.Latency_se->sendReply(&replyData);
                    }
                    // TODO Send exception.
                }
                catch(const ServerInternalException &)
                {
                    //TODO Quitar el unsetReply
                    //
                    replyData.reply().latency()._d() = 1;
                    replyData.reply().latency().sysx_() = SERVER_INTERNAL_ERROR;

                    _protocol.Latency_se->sendReply(&replyData);
                }



                }
                break;
                
    };        
}
st LatencyProtocol::Latency_latency(/*in*/ const st& param)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    st  return_;
    Latency_Request instance;
    Latency_Reply retInstance;



    instance.request()._d() = 0x9E800F53;
    
    instance.request().latency().param(param);

    retcode = Latency_pe->send(&instance, &retInstance);
    
    if(retcode == OK)
    {
        switch (retInstance.reply().latency()._d())
        {
            case 0:
		         
		        return_ = std::move(retInstance.reply().latency().out_().return_()); //TODO Probar que esto funciona. 
                break;
            case 1:
                retcode = (eprosima::rpc::ReturnMessage)retInstance.reply().latency().sysx_();
                break;
            default:
                throw ClientInternalException("Error extracting information from server");
        }
    }
      
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case SERVER_NOT_FOUND:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        case TIMEOUT:
            throw ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case SERVER_INTERNAL_ERROR:
            throw ServerInternalException("");
            break;
        default:
            break;
    };
    

    return return_;
}
void LatencyProtocol::Latency_latency_async(Latency_latencyCallbackHandler &obj, /*in*/ const st& param)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    Latency_Request instance;
    Latency_latencyTask *task = new Latency_latencyTask(obj);

    instance.request()._d() = 0x9E800F53;
    
    instance.request().latency().param(param);

    retcode = Latency_pe->send_async(&instance, task);
    
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case SERVER_NOT_FOUND:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        default:
            break;
    }
}


