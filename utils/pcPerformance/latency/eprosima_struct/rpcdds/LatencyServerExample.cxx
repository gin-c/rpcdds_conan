/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 * 
 * @file LatencyServerExample.cxx
 * This source file shows a simple example of how to create a server for an interface.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "LatencyServer.h"
#include "rpcdds/strategies/ThreadPoolStrategy.h"
#include "LatencyDDSProtocol.h"
#include "rpcdds/transports/dds/UDPServerTransport.h"
#include "rpcdds/exceptions/Exceptions.h"
#include "rpcdds/utils/Utilities.h"
#include "LatencyServerImplExample.h"

#include <iostream>

using namespace eprosima::rpc;
using namespace ::exception;
using namespace ::strategy;
using namespace ::transport::dds;
using namespace ::protocol::dds;

int main(int argc, char **argv)
{
    unsigned int threadPoolSize = 5;
    ThreadPoolStrategy *pool = NULL;
    LatencyProtocol *protocol = NULL;
    UDPServerTransport *transport = NULL;
    LatencyServer *server = NULL;
    LatencyServerImplExample servant;
    
    // Create and initialize the server for interface "Latency".
    try
    {
        pool = new ThreadPoolStrategy(threadPoolSize);
        protocol = new LatencyProtocol();
        transport = new UDPServerTransport("LatencyService", "Instance");
        server = new LatencyServer(*pool, *transport, *protocol, servant);
        server->serve();
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }
    
    while(1)
    {
        eprosima::rpc::sleep(10000);
    }
    
    // Stop and delete the server.
    server->stop();
    delete server;
    delete protocol;
    delete transport;
    delete pool;
    
    return 0;
}



