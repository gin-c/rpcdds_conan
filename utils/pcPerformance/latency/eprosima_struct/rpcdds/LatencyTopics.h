/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 * 
 * @file LatencyTopics.h
 * This header file contains the declaration of topics generated using operations in the IDL file.
 *
 * This file was generated by the tool rpcddsgen.
 */

#ifndef _Latency_TOPICS_H_
#define _Latency_TOPICS_H_

#include "Latency.h"
#include "rpcdds/protocols/dds/MessageHeader.h"
#include "rpcdds/utils/Messages.h"

#include <cstddef>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define user_cpp_DllExport __declspec( dllexport )
#else
#define user_cpp_DllExport
#endif
#else
#define user_cpp_DllExport
#endif




/*!
 * @brief This class represents the structure Latency_latency_In that can be used to send/receive requests
 * for the operation Latency::latency.
 * @ingroup LATENCY
 */
class Latency_latency_In
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Latency_latency_In();
    
    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Latency_latency_In();
    
    /*
     * @brief Copy constructor.
     * @param x Reference to the object Latency_latency_In that will be copied.
     */
    user_cpp_DllExport Latency_latency_In(const Latency_latency_In &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Latency_latency_In that will be copied.
     */
    user_cpp_DllExport Latency_latency_In(Latency_latency_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency_latency that will be copied.
     */
    user_cpp_DllExport Latency_latency_In& operator=(const Latency_latency_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency_latency that will be copied.
     */
    user_cpp_DllExport Latency_latency_In& operator=(Latency_latency_In &&x);

    /*!
     * @brief This function copies the value in member param
     * @param _param New value to be copied in member param
     */
    inline user_cpp_DllExport void param(const st &_param)
    {
        m_param = _param;
    }

    /*!
     * @brief This function moves the value in member param
     * @param _param New value to be moved in member param
     */
    inline user_cpp_DllExport void param(st &&_param)
    {
        m_param = std::move(_param);
    }

    /*!
     * @brief This function returns a constant reference to member param
     * @return Constant reference to member param
     */
    inline user_cpp_DllExport const st& param() const
    {
        return m_param;
    }

    /*!
     * @brief This function returns a reference to member param
     * @return Reference to member param
     */
    inline user_cpp_DllExport st& param()
    {
        return m_param;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport size_t getSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    st m_param;
};

/*!
 * @brief This class encapsulates output paramaters for operation Latency::latency.
 * @ingroup LATENCY
 */
class Latency_latency_Out
{
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Latency_latency_Out();
    
    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Latency_latency_Out();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Latency_latency_Out that will be copied.
     */
    user_cpp_DllExport Latency_latency_Out(const Latency_latency_Out &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Latency_latency_Out that will be copied.
     */
    user_cpp_DllExport Latency_latency_Out(Latency_latency_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency_latency that will be copied.
     */
    user_cpp_DllExport Latency_latency_Out& operator=(const Latency_latency_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency_latency that will be copied.
     */
    user_cpp_DllExport Latency_latency_Out& operator=(Latency_latency_Out &&x);

    /*!
     * @brief This function copies the value in member return_
     * @param _return_ New value to be copied in member return_
     */
    inline user_cpp_DllExport void return_(const st &_return_)
    {
        m_return_ = _return_;
    }

    /*!
     * @brief This function moves the value in member return_
     * @param _return_ New value to be moved in member return_
     */
    inline user_cpp_DllExport void return_(st &&_return_)
    {
        m_return_ = std::move(_return_);
    }

    /*!
     * @brief This function returns a constant reference to member return_
     * @return Constant reference to member return_
     */
    inline user_cpp_DllExport const st& return_() const
    {
        return m_return_;
    }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport st& return_()
    {
        return m_return_;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport size_t getSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    st m_return_;
};

/*!
 * @brief This class represents the structure Latency_latency_Result that can be used to send/receive replies
 * for the operation Latency::latency.
 * 
 * @ingroup LATENCY
 */
class Latency_latency_Result
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Latency_latency_Result();
    
    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Latency_latency_Result();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Latency_latency_Result that will be copied.
     */
    user_cpp_DllExport Latency_latency_Result(const Latency_latency_Result &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Latency_latency_Result that will be copied.
     */
    user_cpp_DllExport Latency_latency_Result(Latency_latency_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency_latency that will be copied.
     */
    user_cpp_DllExport Latency_latency_Result& operator=(const Latency_latency_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency_latency that will be copied.
     */
    user_cpp_DllExport Latency_latency_Result& operator=(Latency_latency_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);
    
    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;
    
    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t& _d();

    user_cpp_DllExport void unknown_exception(eprosima::rpc::protocol::dds::UnknownException _unknown_exception);

    user_cpp_DllExport eprosima::rpc::protocol::dds::UnknownException unknown_exception() const;
    
    user_cpp_DllExport eprosima::rpc::protocol::dds::UnknownException& unknown_exception();

    /*!
     * @brief This function copies the value in member out_
     * @param _out_ New value to be copied in member out_
     */
    user_cpp_DllExport void out_(const Latency_latency_Out &_out_);

    /*!
     * @brief This function moves the value in member out_
     * @param _out_ New value to be moved in member out_
     */
    user_cpp_DllExport void out_(Latency_latency_Out &&_out_);

    /*!
     * @brief This function returns a constant reference to member out_
     * @return Constant reference to member out_
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    user_cpp_DllExport const Latency_latency_Out& out_() const;

    /*!
     * @brief This function returns a reference to member out_
     * @return Reference to member out_
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    user_cpp_DllExport Latency_latency_Out& out_();

    user_cpp_DllExport void sysx_(eprosima::rpc::ReturnMessage _sysx_);

    user_cpp_DllExport eprosima::rpc::ReturnMessage sysx_() const;
    
    user_cpp_DllExport eprosima::rpc::ReturnMessage& sysx_();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport size_t getSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    int32_t m__d;

    eprosima::rpc::protocol::dds::UnknownException m_unknown_exception;

    Latency_latency_Out m_out_;

    eprosima::rpc::ReturnMessage m_sysx_;

};


/*!
 * @brief This class represents the union used in the DDS topic to encapsulate the operations in request samples.
 * @ingroup LATENCY
 */
class Latency_Call
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Latency_Call();
    
    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Latency_Call();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Latency_Call that will be copied.
     */
    user_cpp_DllExport Latency_Call(const Latency_Call &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Latency_Call that will be copied.
     */
    user_cpp_DllExport Latency_Call(Latency_Call &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency_Call that will be copied.
     */
    user_cpp_DllExport Latency_Call& operator=(const Latency_Call &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object Latency_Call that will be copied.
     */
    user_cpp_DllExport Latency_Call& operator=(Latency_Call &&x);
    
    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);
    
    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;
    
    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t& _d();

    user_cpp_DllExport void unknown_operation(eprosima::rpc::protocol::dds::UnknownOperation _unknown_operation);

    user_cpp_DllExport eprosima::rpc::protocol::dds::UnknownOperation unknown_operation() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::UnknownOperation& unknown_operation();

    /*!
     * @brief This function copies the value in member latency
     * @param _latency New value to be copied in member latency
     */
    user_cpp_DllExport void latency(const Latency_latency_In &_latency);

    /*!
     * @brief This function moves the value in member latency
     * @param _latency New value to be moved in member latency
     */
    user_cpp_DllExport void latency(Latency_latency_In &&_latency);

    /*!
     * @brief This function returns a constant reference to member latency
     * @return Constant reference to member latency
     */
    user_cpp_DllExport const Latency_latency_In& latency() const;

    /*!
     * @brief This function returns a reference to member latency
     * @return Reference to member latency
     */
    user_cpp_DllExport Latency_latency_In& latency();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport size_t getSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);
    
private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::UnknownOperation m_unknown_operation;
    Latency_latency_In m_latency;
};

/*!
 * @brief This class represents the structure Latency_Request that can be used to send/receive requests
 * for the interface Latency.
 * @ingroup LATENCY
 */
class Latency_Request
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Latency_Request();
    
    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Latency_Request();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Latency_Request that will be copied.
     */
    user_cpp_DllExport Latency_Request(const Latency_Request &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Latency_Request that will be copied.
     */
    user_cpp_DllExport Latency_Request(Latency_Request &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency that will be copied.
     */
    user_cpp_DllExport Latency_Request& operator=(const Latency_Request &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency that will be copied.
     */
    user_cpp_DllExport Latency_Request& operator=(Latency_Request &&x);

    /*!
     * @brief This method sets the request header information.
     * @param _header Request header.
     */
    inline user_cpp_DllExport void header(const eprosima::rpc::protocol::dds::RequestHeader &_header)
    {
        m_header = _header;
    }

    /*!
     * @brief This method sets the request header information.
     * @param _header Request header.
     */
    inline user_cpp_DllExport void header(eprosima::rpc::protocol::dds::RequestHeader &&_header)
    {
        m_header = std::move(_header);
    }

    /*!
     * @brief This method returns the request header information.
     * @return Request header.
     */
    inline user_cpp_DllExport const eprosima::rpc::protocol::dds::RequestHeader& header() const
    {
        return m_header;
    }

    /*!
     * @brief This method returns the request header information.
     * @return Request header.
     */
    inline user_cpp_DllExport eprosima::rpc::protocol::dds::RequestHeader& header()
    {
        return m_header;
    }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _request Union.
     */
    inline user_cpp_DllExport void request(const Latency_Call &_request)
    {
        m_request = _request;
    }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _request Union.
     */
    inline user_cpp_DllExport void request(Latency_Call &&_request)
    {
        m_request = std::move(_request);
    }

    /*!
     * @brief This method returns the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport const Latency_Call& request() const
    {
        return m_request;
    }

    /*!
     * @brief This method returns the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport Latency_Call& request()
    {
        return m_request;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport size_t getSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    eprosima::rpc::protocol::dds::RequestHeader m_header;

    Latency_Call m_request;
};

/*!
 * @brief This class represents the union used in the DDS topic to encapsulate the operations in reply samples.
 * @ingroup LATENCY
 */
class Latency_Return
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Latency_Return();
    
    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Latency_Return();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Latency_Return that will be copied.
     */
    user_cpp_DllExport Latency_Return(const Latency_Return &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Latency_Return that will be copied.
     */
    user_cpp_DllExport Latency_Return(Latency_Return &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency_Return that will be copied.
     */
    user_cpp_DllExport Latency_Return& operator=(const Latency_Return &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object Latency_Return that will be copied.
     */
    user_cpp_DllExport Latency_Return& operator=(Latency_Return &&x);
    
    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);
    
    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;
    
    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t& _d();

    user_cpp_DllExport void unknown_operation(eprosima::rpc::protocol::dds::UnknownOperation _unknown_operation);

    user_cpp_DllExport eprosima::rpc::protocol::dds::UnknownOperation unknown_operation() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::UnknownOperation& unknown_operation();

    /*!
     * @brief This function copies the value in member latency
     * @param _latency New value to be copied in member latency
     */
    user_cpp_DllExport void latency(const Latency_latency_Result &_latency);

    /*!
     * @brief This function moves the value in member latency
     * @param _latency New value to be moved in member latency
     */
    user_cpp_DllExport void latency(Latency_latency_Result &&_latency);

    /*!
     * @brief This function returns a constant reference to member latency
     * @return Constant reference to member latency
     */
    user_cpp_DllExport const Latency_latency_Result& latency() const;

    /*!
     * @brief This function returns a reference to member latency
     * @return Reference to member latency
     */
    user_cpp_DllExport Latency_latency_Result& latency();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport size_t getSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);
    
private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::UnknownOperation m_unknown_operation;

    Latency_latency_Result m_latency;
};

/*!
 * @brief This class represents the structure Latency_Reply that can be used to send/receive replies
 * for the interface Latency.
 * @ingroup LATENCY
 */
class Latency_Reply
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Latency_Reply();
    
    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Latency_Reply();
    
    /*
     * @brief Copy constructor.
     * @param x Reference to the object Latency_Reply that will be copied.
     */
    user_cpp_DllExport Latency_Reply(const Latency_Reply &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Latency_Reply that will be copied.
     */
    user_cpp_DllExport Latency_Reply(Latency_Reply &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency that will be copied.
     */
    user_cpp_DllExport Latency_Reply& operator=(const Latency_Reply &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Latency that will be copied.
     */
    user_cpp_DllExport Latency_Reply& operator=(Latency_Reply &&x);

    /*!
     * @brief This method sets the reply header information.
     * @param _header Reply header.
     */
    inline user_cpp_DllExport void header(const eprosima::rpc::protocol::dds::ReplyHeader &_header)
    {
        m_header = _header;
    }

    /*!
     * @brief This method sets the reply header information.
     * @param _header Reply header.
     */
    inline user_cpp_DllExport void header(eprosima::rpc::protocol::dds::ReplyHeader &&_header)
    {
        m_header = std::move(_header);
    }

    /*!
     * @brief This method returns the reply header information.
     * @return Reply header.
     */
    inline user_cpp_DllExport const eprosima::rpc::protocol::dds::ReplyHeader& header() const
    {
        return m_header;
    }

    /*!
     * @brief This method returns the reply header information.
     * @return Reply header.
     */
    inline user_cpp_DllExport eprosima::rpc::protocol::dds::ReplyHeader& header()
    {
        return m_header;
    }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _reply Union.
     */
    inline user_cpp_DllExport void reply(const Latency_Return &_reply)
    {
        m_reply = _reply;
    }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _reply Union.
     */
    inline user_cpp_DllExport void reply(Latency_Return &&_reply)
    {
        m_reply = std::move(_reply);
    }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport const Latency_Return& reply() const
    {
        return m_reply;
    }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport Latency_Return& reply()
    {
        return m_reply;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport size_t getSerializedSize(size_t current_alignment = 0) const;

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    eprosima::rpc::protocol::dds::ReplyHeader m_header;

    Latency_Return m_reply;
};

#endif // _Latency_TOPICS_H_