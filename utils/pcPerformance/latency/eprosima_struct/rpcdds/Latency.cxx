/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * _LICENSE file included in this  distribution.
 *
 *************************************************************************
 * 
 * @file Latency.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "Latency.h"

#include "fastcdr/Cdr.h"


#include "rpcdds/exceptions/BadParamException.h"
using namespace eprosima::rpc::exception;

#include <utility>

element::element()
{
    m_att1 = false;
    m_att2 = "";
    m_att3 = 0;
    m_att4 = 0;
    m_att5 = false;
}

element::~element()
{
}

element::element(const element &x)
{
    m_att1 = x.m_att1;
    m_att2 = x.m_att2;
    m_att3 = x.m_att3;
    m_att4 = x.m_att4;
    m_att5 = x.m_att5;
}

element::element(element &&x)
{
    m_att1 = x.m_att1;
    m_att2 = x.m_att2;
    m_att3 = x.m_att3;
    m_att4 = x.m_att4;
    m_att5 = x.m_att5;
}

element& element::operator=(const element &x)
{
    m_att1 = x.m_att1;
    m_att2 = x.m_att2;
    m_att3 = x.m_att3;
    m_att4 = x.m_att4;
    m_att5 = x.m_att5;
    
    return *this;
}

element& element::operator=(element &&x)
{
    m_att1 = x.m_att1;
    m_att2 = x.m_att2;
    m_att3 = x.m_att3;
    m_att4 = x.m_att4;
    m_att5 = x.m_att5;
    
    return *this;
}

size_t element::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    return current_alignment - initial_alignment;
}

void element::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_att1;

    if(m_att2.length() <= 255)
    scdr << m_att2;
    else
        throw eprosima::rpc::exception::BadParamException(std::string("att2 field exceeds the maximum length"));
    scdr << m_att3;

    scdr << m_att4;

    scdr << m_att5;

}

void element::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_att1;
    dcdr >> m_att2;
    dcdr >> m_att3;
    dcdr >> m_att4;
    dcdr >> m_att5;
}



