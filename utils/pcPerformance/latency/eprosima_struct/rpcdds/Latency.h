/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * _LICENSE file included in this  distribution.
 *
 *************************************************************************
 * 
 * @file Latency.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _Latency_H_
#define _Latency_H_

// TODO Poner en el contexto.
#include "rpcdds/exceptions/UserException.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Latency_SOURCE)
#define Latency_DllAPI __declspec( dllexport )
#else
#define Latency_DllAPI __declspec( dllimport )
#endif // Latency_SOURCE
#else
#define Latency_DllAPI
#endif
#else
#define Latency_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


/*!
 * @brief This class represents the structure element defined by the user in the IDL file.
 * @ingroup LATENCY
 */
class element
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport element();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~element();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object element that will be copied.
     */
    eProsima_user_DllExport element(const element &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object element that will be copied.
     */
    eProsima_user_DllExport element(element &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object element that will be copied.
     */
    eProsima_user_DllExport element& operator=(const element &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object element that will be copied.
     */
    eProsima_user_DllExport element& operator=(element &&x);
    
    /*!
     * @brief This function sets a value in member att1
     * @param _att1 New value for member att1
     */
    inline eProsima_user_DllExport void att1(bool _att1)
    {
        m_att1 = _att1;
    }

    /*!
     * @brief This function returns the value of member att1
     * @return Value of member att1
     */
    inline eProsima_user_DllExport bool att1() const
    {
        return m_att1;
    }

    /*!
     * @brief This function returns a reference to member att1
     * @return Reference to member att1
     */
    inline eProsima_user_DllExport bool& att1()
    {
        return m_att1;
    }
    /*!
     * @brief This function sets a value in member att2
     * @param _att2 New value for member att2
     */
    inline eProsima_user_DllExport void att2(std::string _att2)
    {
        m_att2 = _att2;
    }

    /*!
     * @brief This function returns the value of member att2
     * @return Value of member att2
     */
    inline eProsima_user_DllExport std::string att2() const
    {
        return m_att2;
    }

    /*!
     * @brief This function returns a reference to member att2
     * @return Reference to member att2
     */
    inline eProsima_user_DllExport std::string& att2()
    {
        return m_att2;
    }
    /*!
     * @brief This function sets a value in member att3
     * @param _att3 New value for member att3
     */
    inline eProsima_user_DllExport void att3(int32_t _att3)
    {
        m_att3 = _att3;
    }

    /*!
     * @brief This function returns the value of member att3
     * @return Value of member att3
     */
    inline eProsima_user_DllExport int32_t att3() const
    {
        return m_att3;
    }

    /*!
     * @brief This function returns a reference to member att3
     * @return Reference to member att3
     */
    inline eProsima_user_DllExport int32_t& att3()
    {
        return m_att3;
    }
    /*!
     * @brief This function sets a value in member att4
     * @param _att4 New value for member att4
     */
    inline eProsima_user_DllExport void att4(int16_t _att4)
    {
        m_att4 = _att4;
    }

    /*!
     * @brief This function returns the value of member att4
     * @return Value of member att4
     */
    inline eProsima_user_DllExport int16_t att4() const
    {
        return m_att4;
    }

    /*!
     * @brief This function returns a reference to member att4
     * @return Reference to member att4
     */
    inline eProsima_user_DllExport int16_t& att4()
    {
        return m_att4;
    }
    /*!
     * @brief This function sets a value in member att5
     * @param _att5 New value for member att5
     */
    inline eProsima_user_DllExport void att5(bool _att5)
    {
        m_att5 = _att5;
    }

    /*!
     * @brief This function returns the value of member att5
     * @return Value of member att5
     */
    inline eProsima_user_DllExport bool att5() const
    {
        return m_att5;
    }

    /*!
     * @brief This function returns a reference to member att5
     * @return Reference to member att5
     */
    inline eProsima_user_DllExport bool& att5()
    {
        return m_att5;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);


    
private:
    bool m_att1;
    std::string m_att2;
    int32_t m_att3;
    int16_t m_att4;
    bool m_att5;
};
typedef std::vector<element> st;
/*!
 * @brief This class represents the interface Latency defined by the user in the IDL file.
 * @ingroup LATENCY
 */
class Latency_DllAPI Latency 
{
    public:

    virtual st latency(/*in*/ const st& param) = 0;

};

#endif // _Latency_H_