/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 * 
 * @file LatencyAsyncSupport.h
 * This header file contains functionality to use asynchronous calls for all interfaces.
 *
 * This file was generated by the tool rpcddsgen.
 */

#ifndef _Latency_DDS_ASYNC_SUPPORT_H_
#define _Latency_DDS_ASYNC_SUPPORT_H_

#include "rpcdds/transports/dds/DDSAsyncTask.h"
#include "rpcdds/exceptions/UserException.h"
#include "LatencyAsyncCallbackHandlers.h"
#include "LatencyRequestReplyPlugin.h"
#include "LatencyRequestReplySupport.h"


/*!
 * @brief This class represents a asynchronous task created to wait the reply of the procedure Latency::latency from the server in an asynchronous call.
 * @ingroup LATENCY
 */
class Latency_latencyTask : public eprosima::rpc::transport::dds::DDSAsyncTask
{
    public:

        /*!
         * @brief The default constructor.
         *
         * @param obj Object that implements the callbacks that FastRPC will call when
         *            the reply will be received or and exception will be launched.
         * @param client Pointer to the server's proxy. Cannot be NULL.
         */
        Latency_latencyTask(Latency_latencyCallbackHandler &obj);

        //! @brief Destructor.
        virtual ~Latency_latencyTask();
        
        /*!
         * @brief This funcion is called when the reply sample is received.
         */
        virtual void execute();
        
        /*!
         * @brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::SystemException &ex);        

        
        /*!
         * @brief This function returns the object used by the task.
         *
         * @return The object that implements the callbacks.
         */
        Latency_latencyCallbackHandler& getObject();

        /*!
         * @brief This function returns the allocated reply sample.
         * @return Pointer to the allocated reply sample.
         */
        virtual void* getReplyInstance();
        
        private:
        
        Latency_latencyCallbackHandler &m_obj;

        Latency_Reply m_reply;
};




#endif // _Latency_DDS_ASYNC_SUPPORT_H_