/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Latency_TYPES_H
#define Latency_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




typedef std::vector<class element>  st;

typedef struct _element__isset {
  _element__isset() : att1(false), att2(false), att3(false), att4(false), att5(false) {}
  bool att1;
  bool att2;
  bool att3;
  bool att4;
  bool att5;
} _element__isset;

class element {
 public:

  static const char* ascii_fingerprint; // = "1D9B4E30BD09EA4A63CC36C6EDE6843C";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0x9B,0x4E,0x30,0xBD,0x09,0xEA,0x4A,0x63,0xCC,0x36,0xC6,0xED,0xE6,0x84,0x3C};

  element() : att1(0), att2(), att3(0), att4(0), att5(0) {
  }

  virtual ~element() throw() {}

  bool att1;
  std::string att2;
  int32_t att3;
  int16_t att4;
  bool att5;

  _element__isset __isset;

  void __set_att1(const bool val) {
    att1 = val;
  }

  void __set_att2(const std::string& val) {
    att2 = val;
  }

  void __set_att3(const int32_t val) {
    att3 = val;
  }

  void __set_att4(const int16_t val) {
    att4 = val;
  }

  void __set_att5(const bool val) {
    att5 = val;
  }

  bool operator == (const element & rhs) const
  {
    if (!(att1 == rhs.att1))
      return false;
    if (!(att2 == rhs.att2))
      return false;
    if (!(att3 == rhs.att3))
      return false;
    if (!(att4 == rhs.att4))
      return false;
    if (!(att5 == rhs.att5))
      return false;
    return true;
  }
  bool operator != (const element &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const element & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(element &a, element &b);



#endif
