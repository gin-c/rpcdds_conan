/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Latency_types.h"

#include <algorithm>



const char* element::ascii_fingerprint = "1D9B4E30BD09EA4A63CC36C6EDE6843C";
const uint8_t element::binary_fingerprint[16] = {0x1D,0x9B,0x4E,0x30,0xBD,0x09,0xEA,0x4A,0x63,0xCC,0x36,0xC6,0xED,0xE6,0x84,0x3C};

uint32_t element::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att1);
          this->__isset.att1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->att2);
          this->__isset.att2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->att3);
          this->__isset.att3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->att4);
          this->__isset.att4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->att5);
          this->__isset.att5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t element::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("element");

  xfer += oprot->writeFieldBegin("att1", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->att1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att2", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->att2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att3", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->att3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att4", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->att4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("att5", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->att5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(element &a, element &b) {
  using ::std::swap;
  swap(a.att1, b.att1);
  swap(a.att2, b.att2);
  swap(a.att3, b.att3);
  swap(a.att4, b.att4);
  swap(a.att5, b.att5);
  swap(a.__isset, b.__isset);
}


