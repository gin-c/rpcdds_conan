/*!
 * @mainpage eProsima RPC over REST
 *
 * <center><b>eProsima RPC over REST Library</b></center><br/>
 * 
 * <center>
 * @image html eProsimaLogo.png
 * @image latex eProsimaLogo.png "" width=5cm
 * <br/><a href="http://www.eprosima.com">eProsima</a></center>
 *
 * eProsima RPC over REST is a service invocation framework that enables to build distributed applications with minimal effort
 * using the client/server paradigm.
 *
 * eProsima RPC over REST provides an implementation of this general concept of invoking remote procedures. eProsima 
 * RPC over REST is a service invocation framework that allows the developers to build distributed applications with 
 * a minimal effort. It makes transparent the remote procedure call, avoiding the programmers from explicitly coding 
 * the details for this remote interaction, permitting them to focus on the application logic.
 *
 * eProsima RPC over REST also brings other features:
 *
 * @li Synchronous invocation: The synchronous invocation is the mostly common used approach. It blocks the clientâ€™s 
 * thread until the reply is received from the server. 
 * @li eProsima RPC over REST provides several strategies for the server. These strategies define how the server acts when a new request is received.
 * Current supported strategies are: single-thread strategy, thread-pool strategy and thread-per-request strategy.
 * Single-thread strategy uses only one thread for every incoming request. Thread-pool strategy uses a fixed amount of threads to process 
 * the incoming requests. Thread-per-request strategy creates a new thread for each new incoming request.
 * @li Complete RESTful Frameworks: Developers can use eProsima RPC over REST code within their applications.
 *
 */

/*!
 * @defgroup RPCAPIREFERENCE eProsima RPC over REST API Reference
 * @brief eProsima RPC over REST internal API grouped in modules.
 */

/*!
 * @defgroup PROXYMODULE Client Module
 * @ingroup RPCAPIREFERENCE
 * @brief This group contains related API to create a client application.
 * This API is used by the tool \e rpcrestgen to generate custom code based in a defined interface.
 * That interface and its remote procedures have to be defined in IDL or WADL.
 */

/*!
 * @defgroup SERVERMODULE Server Module
 * @ingroup RPCAPIREFERENCE
 * @brief This group contains related API to create a server application.
 * Except the custom server's strategies, this API is used by the tool \e rpcrestgen to generate custom code based in a defined interface.
 * That interface and its remote procedure have to be defined in IDL or WADL.
 */

/*!
 * @defgroup EXCEPTIONMODULE Exceptions
 * @ingroup RPCAPIREFERENCE
 * @brief Exceptions used by the eProsima RPC over REST API.
 * All exceptions defined in this module are thrown by the eProsima RPC over REST library and the code generated by the tool \e rpcrestgen.
 */

/*!
 * @defgroup STRATEGIESMODULE Strategies
 * @ingroup SERVERMODULE
 * @brief Server's strategies that can be used in the server application.
 * These strategies define how the server schedules a incoming request.
 */

/*!
 * @defgroup TRANSPORTMODULE Transports
 * @ingroup RPCAPIREFERENCE
 * @brief Network transports that eProsima RPC over REST library offers. These transports define how a connection is established between a proxy and a server.
 */

/*!
 * @defgroup PROTOCOLMODULE Protocols
 * @ingroup RPCAPIREFERENCE
 * @brief Protocols used by the RPCs. They define how to serialize and deserialize the information and use a eprosima::rpc::transport::Transport to send it and receive it.
 */

/*!
 * defgroup FOOREST Generated API example for RESTful
 * brief This group contains the generated API by the tool \e rpcrestgen \e for a RESTful example of a resource named Foo.
 */
