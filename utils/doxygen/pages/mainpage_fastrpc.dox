/*!
 * @mainpage eProsima Fast RPC
 *
 * <center><b>eProsima Fast RPC Library</b></center><br/>
 * 
 * <center>
 * @image html eProsimaLogo.png
 * @image latex eProsimaLogo.png "" width=5cm
 * <br/><a href="http://www.eprosima.com">eProsima</a></center>
 *
 * eProsima Fast RPC is a service invocation framework that enables to build distributed applications with minimal effort
 * using the client/server paradigm. It makes transparent the remote procedure call to developer without the programmer
 * explicitly coding the details for this remote interaction and allows developers to focus his efforts on their application logic.
 * eProsima Fast RPC provides an easy way to invoke remote procedures using Fast CDR serialization over TCP.
 *
 * eProsima Fast RPC also brings other features:
 *
 * @li Synchronous and one-way invocations. The synchronous invocation is the common invocation
 * and it blocks the client’s thread until the reply is received from the server. The one-way invocation
 * is a fire-and-forget invocation where the client does not care about the success or failure of the invocation.
 * The one-way invocation does not expect any reply from the server.
 * @li eProsima Fast RPC provides several strategies for the server. These strategies define how the server acts when a new request is received.
 * Current supported strategies are: single-thread strategy, thread-pool strategy and thread-per-request strategy.
 * Single-thread strategy uses one thread for all incoming requests. Thread-pool strategy uses thread-pool’s threads
 * to process the incoming requests. Thread-per-request strategy creates a new thread for each new incoming request
 * and this new thread will process the request.
 * @li eProsima Fast RPC increases the communication performance using a fast serialization mechanism.
 *
 */

/*!
 * @defgroup RPCAPIREFERENCE eProsima Fast RPC API Reference
 * @brief eProsima Fast RPC internal API grouped in modules.
 */

/*!
 * @defgroup PROXYMODULE Client Module
 * @ingroup RPCAPIREFERENCE
 * @brief This group contains related API to create a client application.
 * This API is used by the tool \e fastrpcgen to generate custom code based in a defined interface.
 * That interface and its remote procedures have to be defined in IDL language.
 */

/*!
 * @defgroup SERVERMODULE Server Module
 * @ingroup RPCAPIREFERENCE
 * @brief This group contains related API to create a server application.
 * Except the custom server's strategies, this API is used by the tool \e fastrpcgen to generate custom code based in a defined interface.
 * That interface and its remote procedure have to be defined in IDL language.
 */

/*!
 * @defgroup EXCEPTIONMODULE Exceptions
 * @ingroup RPCAPIREFERENCE
 * @brief Exceptions used by the eProsima Fast RPC API.
 * All exceptions defined in this module are thrown by the eProsima Fast RPC library and the code generated by the tool \e fastrpcgen.
 */

/*!
 * @defgroup STRATEGIESMODULE Strategies
 * @ingroup SERVERMODULE
 * @brief Server's strategies that can be used in the server application.
 * These strategies define how the server schedules a incoming request.
 */

/*!
 * @defgroup TRANSPORTMODULE Transports
 * @ingroup RPCAPIREFERENCE
 * @brief Network transports that eProsima Fast RPC library offers. These transports define how a connection is established between a proxy and a server.
 */

/*!
 * @defgroup PROTOCOLMODULE Protocols
 * @ingroup RPCAPIREFERENCE
 * @brief Protocols used by the RPCs. They define how to serialize and deserialize the information and use a eprosima::fastrpc::transport::Transport to send it and receive it.
 */

/*!
 * @defgroup FOOFASTRPC Generated API example for eProsima Fast RPC
 * @brief This group contains the generated API by the tool \e fastrpcgen \e for an example of an interface named Foo.
 */
