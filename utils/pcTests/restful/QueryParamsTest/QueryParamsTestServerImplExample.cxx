/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * FASTRPC_LICENSE file included in this FASTRPC distribution.
 *
 *************************************************************************
 * 
 * @file QueryParamsServerImplExample.cxx
 * This source file contains an example of the declaration of a servant.
 *
 * This file was generated by the tool rpcrestgen.
 */

#include "QueryParamsTestServerImplExample.h"

#include <iostream>
#include <sstream>

using namespace std;   
using namespace QueryParamsTest;
using namespace ::queryParamsResource;

template <typename T> string tostr(const T& t) { ostringstream os; os<<t; return os.str(); }

GetStringResponse queryParamsResourceServerImplExample::getString(/*in*/ const string& stringP)
{
    GetStringResponse getString_ret;

	cout << "getString: " << stringP << endl;
	string response = "<Response>" + stringP + "</Response>";

	getString_ret._d() = 1;
	getString_ret.xmlGetStringResponse().status(200);
	getString_ret.xmlGetStringResponse().xmlRepresentation(response);
   
    return getString_ret;
} 



GetByteResponse queryParamsResourceServerImplExample::getByte(/*in*/ char byteP)
{
    GetByteResponse getByte_ret;

	cout << "getByte: " << byteP << endl;
	string response = "<Response>";
	response += byteP;
	response += "</Response>";

	getByte_ret._d() = 1;
	getByte_ret.xmlGetByteResponse().status() = 200;
	getByte_ret.xmlGetByteResponse().xmlRepresentation(response);
   
    return getByte_ret;
} 



GetUnsignedByteResponse queryParamsResourceServerImplExample::getUnsignedByte(/*in*/ uint8_t unsignedByteP)
{
    GetUnsignedByteResponse getUnsignedByte_ret;

	cout << "getUnsignedByte: " << unsignedByteP << endl;
	string response = "<Response>";
	response += unsignedByteP;
	response += "</Response>";

	getUnsignedByte_ret._d() = 1;
	getUnsignedByte_ret.xmlGetUnsignedByteResponse().status(200);
	getUnsignedByte_ret.xmlGetUnsignedByteResponse().xmlRepresentation(response);
   
    return getUnsignedByte_ret;
} 



GetShortResponse queryParamsResourceServerImplExample::getShort(/*in*/ int16_t shortP)
{
    GetShortResponse getShort_ret;

	cout << "getShort: " << shortP << endl;

	string response = "<Response>";
	response += tostr(shortP);
	response += "</Response>";

	getShort_ret._d() = 1;
	getShort_ret.xmlGetShortResponse().status(200);
	getShort_ret.xmlGetShortResponse().xmlRepresentation(response);
   
    return getShort_ret;
} 



GetUnsignedShortResponse queryParamsResourceServerImplExample::getUnsignedShort(/*in*/ uint16_t unsignedShortP)
{
    GetUnsignedShortResponse getUnsignedShort_ret;

	cout << "getUnsignedShort: " << unsignedShortP << endl;
	string response = "<Response>";
	response += tostr(unsignedShortP);
	response += "</Response>";

	getUnsignedShort_ret._d() = 1;
	getUnsignedShort_ret.xmlGetUnsignedShortResponse().status(200);
	getUnsignedShort_ret.xmlGetUnsignedShortResponse().xmlRepresentation(response);
   
    return getUnsignedShort_ret;
} 



GetIntResponse queryParamsResourceServerImplExample::getInt(/*in*/ int32_t intP)
{
    GetIntResponse getInt_ret;

	cout << "getInt: " << intP << endl;

	string response = "<Response>";
	response += tostr(intP);
	response += "</Response>";

	getInt_ret._d() = 1;
	getInt_ret.xmlGetIntResponse().status(200);
	getInt_ret.xmlGetIntResponse().xmlRepresentation(response);
   
    return getInt_ret;
} 



GetUnsignedIntResponse queryParamsResourceServerImplExample::getUnsignedInt(/*in*/ uint32_t unsignedIntP)
{
    GetUnsignedIntResponse getUnsignedInt_ret;

	cout << "getUnsignedInt: " << unsignedIntP << endl;
	string response = "<Response>";
	response += tostr(unsignedIntP);
	response += "</Response>";

	getUnsignedInt_ret._d() = 1;
	getUnsignedInt_ret.xmlGetUnsignedIntResponse().status(200);
	getUnsignedInt_ret.xmlGetUnsignedIntResponse().xmlRepresentation(response);
   
    return getUnsignedInt_ret;
} 



GetLongResponse queryParamsResourceServerImplExample::getLong(/*in*/ int64_t longP)
{
    GetLongResponse getLong_ret;

	cout << "getLong: " << longP << endl;

	string response = "<Response>";
	response += tostr(longP);
	response += "</Response>";

	getLong_ret._d() = 1;
	getLong_ret.xmlGetLongResponse().status(200);
	getLong_ret.xmlGetLongResponse().xmlRepresentation(response);
   
    return getLong_ret;
} 



GetUnsignedLongResponse queryParamsResourceServerImplExample::getUnsignedLong(/*in*/ uint64_t unsignedLongP)
{
    GetUnsignedLongResponse getUnsignedLong_ret;

	cout << "getUnsignedLong: " << unsignedLongP << endl;
	string response = "<Response>";
	response += tostr(unsignedLongP);
	response += "</Response>";

	getUnsignedLong_ret._d() = 1;
	getUnsignedLong_ret.xmlGetUnsignedLongResponse().status(200);
	getUnsignedLong_ret.xmlGetUnsignedLongResponse().xmlRepresentation(response);
   
    return getUnsignedLong_ret;
} 



GetFloatResponse queryParamsResourceServerImplExample::getFloat(/*in*/ float floatP)
{
    GetFloatResponse getFloat_ret;

	cout << "getFloat: " << floatP << endl;

	string response = "<Response>";
	response += tostr(floatP);
	response += "</Response>";

	getFloat_ret._d() = 1;
	getFloat_ret.xmlGetFloatResponse().status(200);
	getFloat_ret.xmlGetFloatResponse().xmlRepresentation(response);
   
    return getFloat_ret;
} 



GetDoubleResponse queryParamsResourceServerImplExample::getDouble(/*in*/ double doubleP)
{
    GetDoubleResponse getDouble_ret;

	cout << "getDouble: " << doubleP << endl;

	string response = "<Response>";
	response += tostr(doubleP);
	response += "</Response>";

	getDouble_ret._d() = 1;
	getDouble_ret.xmlGetDoubleResponse().status(200);
	getDouble_ret.xmlGetDoubleResponse().xmlRepresentation(response);
   
    return getDouble_ret;
} 



GetBooleanResponse queryParamsResourceServerImplExample::getBoolean(/*in*/ bool booleanP)
{
    GetBooleanResponse getBoolean_ret;

	if(booleanP)
		cout << "getBoolean: true" << endl;
	else
		cout << "getBoolean: false" << endl;
	

	string response = "<Response>";
	if(booleanP)
		response += "true";
	else
		response += "false";
	response += "</Response>";

	getBoolean_ret._d() = 1;
	getBoolean_ret.xmlGetBooleanResponse().status(200);
	getBoolean_ret.xmlGetBooleanResponse().xmlRepresentation(response);
   
    return getBoolean_ret;
} 

