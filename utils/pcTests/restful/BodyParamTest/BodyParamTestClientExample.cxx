/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * FASTRPC_LICENSE file included in this FASTRPC distribution.
 *
 *************************************************************************
 * 
 * @file BodyParamTestClientExample.cxx
 * This source file shows a simple example of how to create a proxy for an interface.
 *
 * This file was generated by the tool rpcrestgen.
 */

#include "BodyParamTestProxy.h"
#include "BodyParamTest.h"
#include "BodyParamTestRESTProtocol.h"
#include "fastrpc/transports/HttpProxyTransport.h"
#include "fastrpc/exceptions/Exceptions.h"

#include <iostream>

using namespace eprosima::rpc;
using namespace eprosima::rpc::exception;
using namespace eprosima::rpc::transport;
using namespace eprosima::rpc::protocol::rest;

using namespace BodyParamTest;
using namespace ::resourceResource;

int main(int argc, char **argv)
{
    BodyParamTestProtocol *protocol = NULL;
    ProxyTransport *transport = NULL;
    resourceResourceProxy *proxy = NULL;

    // Creation of the proxy for interface "resourceResource".
    try
    {
        protocol = new BodyParamTestProtocol();
        transport = new HttpProxyTransport("127.0.0.1:8080");
        proxy = new resourceResourceProxy(*transport, *protocol);
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }

    // *****************************************************
    // Create and initialize parameters.
    PostBodyParamRequest PostBodyParamRequest;

    PostBodyParamRequest.xmlRepresentation("<XMLPost>TEST</XMLPost>");

    // Create and initialize return value.
    PostBodyParamResponse postBodyParam_ret;

    // Call to remote procedure "postBodyParam".
    try
    {
        cout << "postBodyParam - XML" << endl;

        postBodyParam_ret = proxy->postBodyParam(PostBodyParamRequest);

        if(postBodyParam_ret._d() == 1)
        {
            if(postBodyParam_ret.xmlPostBodyParamResponse().status() == 200 &&
                    postBodyParam_ret.xmlPostBodyParamResponse().xmlRepresentation().compare("<Response><XMLPost>TEST</XMLPost></Response>") == 0)
            {
                cout << "\tTEST PASSED" << endl;
            } else 
            {
                return 1;
            }
        } else
        {
            return 1;
        }
    }
    catch(SystemException &ex)
    {
        std::cout << ex.what() << std::endl;
        return 1;
    }
    // *****************************************************


    // *****************************************************
    // Create and initialize parameters.

    PostBodyParamRequest.jsonRepresentation("{TEST}");

    // Call to remote procedure "postBodyParam".
    try
    {
        cout << "postBodyParam - JSON" << endl;

        postBodyParam_ret = proxy->postBodyParam(PostBodyParamRequest);

        if(postBodyParam_ret._d() == 2)
        {
            if(postBodyParam_ret.jsonPostBodyParamResponse().status() == 200 &&
                    postBodyParam_ret.jsonPostBodyParamResponse().jsonRepresentation().compare("{RESPONSE:\"{TEST}\"}") == 0)
            {
                cout << "\tTEST PASSED" << endl;
            } else
            {
                return 1;
            }
        } else
        {
            return 1;
        }
    }
    catch(SystemException &ex)
    {
        std::cout << ex.what() << std::endl;
        return 1;
    }
    // *****************************************************

    delete(proxy);
    delete(transport);
    delete(protocol);

    return 0;
}





