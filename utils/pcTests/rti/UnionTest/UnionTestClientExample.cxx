/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of FASTRPC is licensed to you under the terms described in the
 * FASTRPC_LICENSE file included in this distribution.
 *
 *************************************************************************
 * 
 * @file UnionTestClientExample.cxx
 * This source file shows a simple example of how to create a proxy for an interface.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "UnionTestProxy.h"
#include "UnionTest.h"
#include "UnionTestDDSProtocol.h"
#include "fastrpc/transports/dds/UDPProxyTransport.h"
#include "fastrpc/exceptions/Exceptions.h"

#include <iostream>

using namespace eprosima::rpc;
using namespace ::exception;
using namespace ::transport::dds;
using namespace ::protocol::dds;

int main(int argc, char **argv)
{
    UnionTestProtocol *protocol = NULL;
    UDPProxyTransport *transport = NULL;
    UnionTestProxy *proxy = NULL;
    
    // Creation of the proxy for interface "UnionTest".
    try
    {
        protocol = new UnionTestProtocol();
        transport = new UDPProxyTransport("UnionTestService", "Instance");
        proxy = new UnionTestProxy(*transport, *protocol);
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }

    Empleado em1;
    Empleado em2;
    Empleado em3;
    Empleado getEmpleado_ret;

    Empleado_initialize(&em1);    
    Empleado_initialize(&em2);    
    Empleado_initialize(&em3);    
    Empleado_initialize(&getEmpleado_ret);    

    em1._d = 1;
    em1._u.id = 1;
    em2._d = 2;
    em2._u.name = DDS_String_dup("PRUEBA");

    try
    {
        getEmpleado_ret = proxy->getEmpleado(em1, em2, em3);

        if(em3._d != 2 || strcmp(em3._u.name, "PRUEBA") != 0 ||
                getEmpleado_ret._d != 1 || getEmpleado_ret._u.id != 1 ||
                em2._d != 1 || em2._u.id != 1 ||
                em1._d != 1 || em1._u.id != 1)
        {
            std::cout << "TEST FAILED<getEmpleado>: Wrong values" << std::endl;
            _exit(-1);
        }
    }
    catch(SystemException &ex)
    {
        std::cout <<  "TEST FAILED<getEmpleado>: " << ex.what() << std::endl;
        _exit(-1);
    }

    Empleado_finalize(&em1);    
    Empleado_finalize(&em2);    
    Empleado_finalize(&em3);    
    Empleado_finalize(&getEmpleado_ret);    

    UnionTest::Jefe je1;
    UnionTest::Jefe je2;
    UnionTest::Jefe je3;
    UnionTest::Jefe getJefe_ret;

    UnionTest::Jefe_initialize(&je1);    
    UnionTest::Jefe_initialize(&je2);    
    UnionTest::Jefe_initialize(&je3);    
    UnionTest::Jefe_initialize(&getJefe_ret);    

    je1._d = UnionTest::MALO;
    je1._u.name = DDS_String_dup("PRUEBA");
    je2._d = UnionTest::SATAN;
    je2._u.seq.ensure_length(2, 2);
    je2._u.seq[0] = 1;
    je2._u.seq[1] = 2;

    try
    {
        getJefe_ret = proxy->getJefe(je1, je2, je3);

        if(je3._d != UnionTest::SATAN || je3._u.seq.length() != 2 ||
                je3._u.seq[0] != 1 || je3._u.seq[1] != 2 ||
                getJefe_ret._d != UnionTest::MALO || strcmp(getJefe_ret._u.name, "PRUEBA") != 0 ||
                je2._d != UnionTest::MALO || strcmp(je2._u.name, "PRUEBA") != 0 ||
                je1._d != UnionTest::MALO || strcmp(je1._u.name, "PRUEBA") != 0)
        {
            std::cout << "TEST FAILED<getJefe>: Wrong values" << std::endl;
            _exit(-1);
        }
    }
    catch(SystemException &ex)
    {
        std::cout <<  "TEST FAILED<getJefe>: " << ex.what() << std::endl;
        _exit(-1);
    }
    
    UnionTest::Jefe_finalize(&je1);    
    UnionTest::Jefe_finalize(&je2);    
    UnionTest::Jefe_finalize(&je3);    
    UnionTest::Jefe_finalize(&getJefe_ret);    

    std::cout << "TEST SUCCESFULLY" << std::endl;

    delete proxy;
    delete transport;
    delete protocol;

    _exit(0);
    return 0;
}
