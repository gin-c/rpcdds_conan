/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * _LICENSE file included in this  distribution.
 *
 *************************************************************************
 *
 * @file UCar.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _UCAR_H_
#define _UCAR_H_

// TODO Poner en el contexto.
#include <rpcdds/exceptions/UserException.h>

#include <array>
#include <bitset>
#include <map>
#include <stdint.h>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(UCar_SOURCE)
#define UCar_DllAPI __declspec(dllexport)
#else
#define UCar_DllAPI __declspec(dllimport)
#endif  // UCar_SOURCE
#else
#define UCar_DllAPI
#endif
#else
#define UCar_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
}
}  // namespace eprosima

typedef std::vector<char> ByteArray;
typedef std::vector<int32_t> LongArray;
typedef std::vector<int16_t> ShortArray;
/*!
 * @brief This class represents the structure VideoFormat defined by the user in the IDL file.
 * @ingroup UCAR
 */
class VideoFormat {
public:
    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport VideoFormat();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~VideoFormat();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VideoFormat that will be copied.
     */
    eProsima_user_DllExport VideoFormat(const VideoFormat& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VideoFormat that will be copied.
     */
    eProsima_user_DllExport VideoFormat(VideoFormat&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VideoFormat that will be copied.
     */
    eProsima_user_DllExport VideoFormat& operator=(const VideoFormat& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object VideoFormat that will be copied.
     */
    eProsima_user_DllExport VideoFormat& operator=(VideoFormat&& x);

    /*!
     * @brief This function copies the value in member mimeType
     * @param _mimeType New value to be copied in member mimeType
     */
    eProsima_user_DllExport void mimeType(const std::string& _mimeType);

    /*!
     * @brief This function moves the value in member mimeType
     * @param _mimeType New value to be moved in member mimeType
     */
    eProsima_user_DllExport void mimeType(std::string&& _mimeType);

    /*!
     * @brief This function returns a constant reference to member mimeType
     * @return Constant reference to member mimeType
     */
    eProsima_user_DllExport const std::string& mimeType() const;

    /*!
     * @brief This function returns a reference to member mimeType
     * @return Reference to member mimeType
     */
    eProsima_user_DllExport std::string& mimeType();
    /*!
     * @brief This function sets a value in member width
     * @param _width New value for member width
     */
    eProsima_user_DllExport void width(int32_t _width);

    /*!
     * @brief This function returns the value of member width
     * @return Value of member width
     */
    eProsima_user_DllExport int32_t width() const;

    /*!
     * @brief This function returns a reference to member width
     * @return Reference to member width
     */
    eProsima_user_DllExport int32_t& width();

    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    eProsima_user_DllExport void height(int32_t _height);

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    eProsima_user_DllExport int32_t height() const;

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    eProsima_user_DllExport int32_t& height();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const VideoFormat& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr& cdr);

private:
    std::string m_mimeType;
    int32_t m_width;
    int32_t m_height;
};
/*!
 * @brief This class represents the structure AudioFormat defined by the user in the IDL file.
 * @ingroup UCAR
 */
class AudioFormat {
public:
    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AudioFormat();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AudioFormat();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AudioFormat that will be copied.
     */
    eProsima_user_DllExport AudioFormat(const AudioFormat& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AudioFormat that will be copied.
     */
    eProsima_user_DllExport AudioFormat(AudioFormat&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AudioFormat that will be copied.
     */
    eProsima_user_DllExport AudioFormat& operator=(const AudioFormat& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AudioFormat that will be copied.
     */
    eProsima_user_DllExport AudioFormat& operator=(AudioFormat&& x);

    /*!
     * @brief This function copies the value in member mimeType
     * @param _mimeType New value to be copied in member mimeType
     */
    eProsima_user_DllExport void mimeType(const std::string& _mimeType);

    /*!
     * @brief This function moves the value in member mimeType
     * @param _mimeType New value to be moved in member mimeType
     */
    eProsima_user_DllExport void mimeType(std::string&& _mimeType);

    /*!
     * @brief This function returns a constant reference to member mimeType
     * @return Constant reference to member mimeType
     */
    eProsima_user_DllExport const std::string& mimeType() const;

    /*!
     * @brief This function returns a reference to member mimeType
     * @return Reference to member mimeType
     */
    eProsima_user_DllExport std::string& mimeType();
    /*!
     * @brief This function sets a value in member sampleRate
     * @param _sampleRate New value for member sampleRate
     */
    eProsima_user_DllExport void sampleRate(int32_t _sampleRate);

    /*!
     * @brief This function returns the value of member sampleRate
     * @return Value of member sampleRate
     */
    eProsima_user_DllExport int32_t sampleRate() const;

    /*!
     * @brief This function returns a reference to member sampleRate
     * @return Reference to member sampleRate
     */
    eProsima_user_DllExport int32_t& sampleRate();

    /*!
     * @brief This function sets a value in member channelConfig
     * @param _channelConfig New value for member channelConfig
     */
    eProsima_user_DllExport void channelConfig(int32_t _channelConfig);

    /*!
     * @brief This function returns the value of member channelConfig
     * @return Value of member channelConfig
     */
    eProsima_user_DllExport int32_t channelConfig() const;

    /*!
     * @brief This function returns a reference to member channelConfig
     * @return Reference to member channelConfig
     */
    eProsima_user_DllExport int32_t& channelConfig();

    /*!
     * @brief This function sets a value in member encodingFormat
     * @param _encodingFormat New value for member encodingFormat
     */
    eProsima_user_DllExport void encodingFormat(int32_t _encodingFormat);

    /*!
     * @brief This function returns the value of member encodingFormat
     * @return Value of member encodingFormat
     */
    eProsima_user_DllExport int32_t encodingFormat() const;

    /*!
     * @brief This function returns a reference to member encodingFormat
     * @return Reference to member encodingFormat
     */
    eProsima_user_DllExport int32_t& encodingFormat();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const AudioFormat& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr& cdr);

private:
    std::string m_mimeType;
    int32_t m_sampleRate;
    int32_t m_channelConfig;
    int32_t m_encodingFormat;
};
/*!
 * @brief This class represents the structure MusicInfo defined by the user in the IDL file.
 * @ingroup UCAR
 */
class MusicInfo {
public:
    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MusicInfo();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MusicInfo();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MusicInfo that will be copied.
     */
    eProsima_user_DllExport MusicInfo(const MusicInfo& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MusicInfo that will be copied.
     */
    eProsima_user_DllExport MusicInfo(MusicInfo&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MusicInfo that will be copied.
     */
    eProsima_user_DllExport MusicInfo& operator=(const MusicInfo& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MusicInfo that will be copied.
     */
    eProsima_user_DllExport MusicInfo& operator=(MusicInfo&& x);

    /*!
     * @brief This function copies the value in member artistName
     * @param _artistName New value to be copied in member artistName
     */
    eProsima_user_DllExport void artistName(const std::string& _artistName);

    /*!
     * @brief This function moves the value in member artistName
     * @param _artistName New value to be moved in member artistName
     */
    eProsima_user_DllExport void artistName(std::string&& _artistName);

    /*!
     * @brief This function returns a constant reference to member artistName
     * @return Constant reference to member artistName
     */
    eProsima_user_DllExport const std::string& artistName() const;

    /*!
     * @brief This function returns a reference to member artistName
     * @return Reference to member artistName
     */
    eProsima_user_DllExport std::string& artistName();
    /*!
     * @brief This function copies the value in member albumName
     * @param _albumName New value to be copied in member albumName
     */
    eProsima_user_DllExport void albumName(const std::string& _albumName);

    /*!
     * @brief This function moves the value in member albumName
     * @param _albumName New value to be moved in member albumName
     */
    eProsima_user_DllExport void albumName(std::string&& _albumName);

    /*!
     * @brief This function returns a constant reference to member albumName
     * @return Constant reference to member albumName
     */
    eProsima_user_DllExport const std::string& albumName() const;

    /*!
     * @brief This function returns a reference to member albumName
     * @return Reference to member albumName
     */
    eProsima_user_DllExport std::string& albumName();
    /*!
     * @brief This function copies the value in member coverArt
     * @param _coverArt New value to be copied in member coverArt
     */
    eProsima_user_DllExport void coverArt(const std::string& _coverArt);

    /*!
     * @brief This function moves the value in member coverArt
     * @param _coverArt New value to be moved in member coverArt
     */
    eProsima_user_DllExport void coverArt(std::string&& _coverArt);

    /*!
     * @brief This function returns a constant reference to member coverArt
     * @return Constant reference to member coverArt
     */
    eProsima_user_DllExport const std::string& coverArt() const;

    /*!
     * @brief This function returns a reference to member coverArt
     * @return Reference to member coverArt
     */
    eProsima_user_DllExport std::string& coverArt();
    /*!
     * @brief This function copies the value in member lyrics
     * @param _lyrics New value to be copied in member lyrics
     */
    eProsima_user_DllExport void lyrics(const std::string& _lyrics);

    /*!
     * @brief This function moves the value in member lyrics
     * @param _lyrics New value to be moved in member lyrics
     */
    eProsima_user_DllExport void lyrics(std::string&& _lyrics);

    /*!
     * @brief This function returns a constant reference to member lyrics
     * @return Constant reference to member lyrics
     */
    eProsima_user_DllExport const std::string& lyrics() const;

    /*!
     * @brief This function returns a reference to member lyrics
     * @return Reference to member lyrics
     */
    eProsima_user_DllExport std::string& lyrics();
    /*!
     * @brief This function sets a value in member totalTimesMs
     * @param _totalTimesMs New value for member totalTimesMs
     */
    eProsima_user_DllExport void totalTimesMs(int32_t _totalTimesMs);

    /*!
     * @brief This function returns the value of member totalTimesMs
     * @return Value of member totalTimesMs
     */
    eProsima_user_DllExport int32_t totalTimesMs() const;

    /*!
     * @brief This function returns a reference to member totalTimesMs
     * @return Reference to member totalTimesMs
     */
    eProsima_user_DllExport int32_t& totalTimesMs();

    /*!
     * @brief This function copies the value in member title
     * @param _title New value to be copied in member title
     */
    eProsima_user_DllExport void title(const std::string& _title);

    /*!
     * @brief This function moves the value in member title
     * @param _title New value to be moved in member title
     */
    eProsima_user_DllExport void title(std::string&& _title);

    /*!
     * @brief This function returns a constant reference to member title
     * @return Constant reference to member title
     */
    eProsima_user_DllExport const std::string& title() const;

    /*!
     * @brief This function returns a reference to member title
     * @return Reference to member title
     */
    eProsima_user_DllExport std::string& title();
    /*!
     * @brief This function copies the value in member authorName
     * @param _authorName New value to be copied in member authorName
     */
    eProsima_user_DllExport void authorName(const std::string& _authorName);

    /*!
     * @brief This function moves the value in member authorName
     * @param _authorName New value to be moved in member authorName
     */
    eProsima_user_DllExport void authorName(std::string&& _authorName);

    /*!
     * @brief This function returns a constant reference to member authorName
     * @return Constant reference to member authorName
     */
    eProsima_user_DllExport const std::string& authorName() const;

    /*!
     * @brief This function returns a reference to member authorName
     * @return Reference to member authorName
     */
    eProsima_user_DllExport std::string& authorName();
    /*!
     * @brief This function copies the value in member writerName
     * @param _writerName New value to be copied in member writerName
     */
    eProsima_user_DllExport void writerName(const std::string& _writerName);

    /*!
     * @brief This function moves the value in member writerName
     * @param _writerName New value to be moved in member writerName
     */
    eProsima_user_DllExport void writerName(std::string&& _writerName);

    /*!
     * @brief This function returns a constant reference to member writerName
     * @return Constant reference to member writerName
     */
    eProsima_user_DllExport const std::string& writerName() const;

    /*!
     * @brief This function returns a reference to member writerName
     * @return Reference to member writerName
     */
    eProsima_user_DllExport std::string& writerName();
    /*!
     * @brief This function copies the value in member composerName
     * @param _composerName New value to be copied in member composerName
     */
    eProsima_user_DllExport void composerName(const std::string& _composerName);

    /*!
     * @brief This function moves the value in member composerName
     * @param _composerName New value to be moved in member composerName
     */
    eProsima_user_DllExport void composerName(std::string&& _composerName);

    /*!
     * @brief This function returns a constant reference to member composerName
     * @return Constant reference to member composerName
     */
    eProsima_user_DllExport const std::string& composerName() const;

    /*!
     * @brief This function returns a reference to member composerName
     * @return Reference to member composerName
     */
    eProsima_user_DllExport std::string& composerName();
    /*!
     * @brief This function sets a value in member playingCurrentTimeMs
     * @param _playingCurrentTimeMs New value for member playingCurrentTimeMs
     */
    eProsima_user_DllExport void playingCurrentTimeMs(int32_t _playingCurrentTimeMs);

    /*!
     * @brief This function returns the value of member playingCurrentTimeMs
     * @return Value of member playingCurrentTimeMs
     */
    eProsima_user_DllExport int32_t playingCurrentTimeMs() const;

    /*!
     * @brief This function returns a reference to member playingCurrentTimeMs
     * @return Reference to member playingCurrentTimeMs
     */
    eProsima_user_DllExport int32_t& playingCurrentTimeMs();

    /*!
     * @brief This function sets a value in member isFavorite
     * @param _isFavorite New value for member isFavorite
     */
    eProsima_user_DllExport void isFavorite(bool _isFavorite);

    /*!
     * @brief This function returns the value of member isFavorite
     * @return Value of member isFavorite
     */
    eProsima_user_DllExport bool isFavorite() const;

    /*!
     * @brief This function returns a reference to member isFavorite
     * @return Reference to member isFavorite
     */
    eProsima_user_DllExport bool& isFavorite();

    /*!
     * @brief This function sets a value in member isPlaying
     * @param _isPlaying New value for member isPlaying
     */
    eProsima_user_DllExport void isPlaying(bool _isPlaying);

    /*!
     * @brief This function returns the value of member isPlaying
     * @return Value of member isPlaying
     */
    eProsima_user_DllExport bool isPlaying() const;

    /*!
     * @brief This function returns a reference to member isPlaying
     * @return Reference to member isPlaying
     */
    eProsima_user_DllExport bool& isPlaying();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const MusicInfo& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr& cdr);

private:
    std::string m_artistName;
    std::string m_albumName;
    std::string m_coverArt;
    std::string m_lyrics;
    int32_t m_totalTimesMs;
    std::string m_title;
    std::string m_authorName;
    std::string m_writerName;
    std::string m_composerName;
    int32_t m_playingCurrentTimeMs;
    bool m_isFavorite;
    bool m_isPlaying;
};
/*!
 * @brief This class represents the structure NavigationInfo defined by the user in the IDL file.
 * @ingroup UCAR
 */
class NavigationInfo {
public:
    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport NavigationInfo();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~NavigationInfo();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object NavigationInfo that will be copied.
     */
    eProsima_user_DllExport NavigationInfo(const NavigationInfo& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object NavigationInfo that will be copied.
     */
    eProsima_user_DllExport NavigationInfo(NavigationInfo&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object NavigationInfo that will be copied.
     */
    eProsima_user_DllExport NavigationInfo& operator=(const NavigationInfo& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object NavigationInfo that will be copied.
     */
    eProsima_user_DllExport NavigationInfo& operator=(NavigationInfo&& x);

    /*!
     * @brief This function sets a value in member isNavigating
     * @param _isNavigating New value for member isNavigating
     */
    eProsima_user_DllExport void isNavigating(bool _isNavigating);

    /*!
     * @brief This function returns the value of member isNavigating
     * @return Value of member isNavigating
     */
    eProsima_user_DllExport bool isNavigating() const;

    /*!
     * @brief This function returns a reference to member isNavigating
     * @return Reference to member isNavigating
     */
    eProsima_user_DllExport bool& isNavigating();

    /*!
     * @brief This function copies the value in member directionIcon
     * @param _directionIcon New value to be copied in member directionIcon
     */
    eProsima_user_DllExport void directionIcon(const std::vector<char>& _directionIcon);

    /*!
     * @brief This function moves the value in member directionIcon
     * @param _directionIcon New value to be moved in member directionIcon
     */
    eProsima_user_DllExport void directionIcon(std::vector<char>&& _directionIcon);

    /*!
     * @brief This function returns a constant reference to member directionIcon
     * @return Constant reference to member directionIcon
     */
    eProsima_user_DllExport const std::vector<char>& directionIcon() const;

    /*!
     * @brief This function returns a reference to member directionIcon
     * @return Reference to member directionIcon
     */
    eProsima_user_DllExport std::vector<char>& directionIcon();
    /*!
     * @brief This function copies the value in member distance
     * @param _distance New value to be copied in member distance
     */
    eProsima_user_DllExport void distance(const std::string& _distance);

    /*!
     * @brief This function moves the value in member distance
     * @param _distance New value to be moved in member distance
     */
    eProsima_user_DllExport void distance(std::string&& _distance);

    /*!
     * @brief This function returns a constant reference to member distance
     * @return Constant reference to member distance
     */
    eProsima_user_DllExport const std::string& distance() const;

    /*!
     * @brief This function returns a reference to member distance
     * @return Reference to member distance
     */
    eProsima_user_DllExport std::string& distance();
    /*!
     * @brief This function copies the value in member distanceUnit
     * @param _distanceUnit New value to be copied in member distanceUnit
     */
    eProsima_user_DllExport void distanceUnit(const std::string& _distanceUnit);

    /*!
     * @brief This function moves the value in member distanceUnit
     * @param _distanceUnit New value to be moved in member distanceUnit
     */
    eProsima_user_DllExport void distanceUnit(std::string&& _distanceUnit);

    /*!
     * @brief This function returns a constant reference to member distanceUnit
     * @return Constant reference to member distanceUnit
     */
    eProsima_user_DllExport const std::string& distanceUnit() const;

    /*!
     * @brief This function returns a reference to member distanceUnit
     * @return Reference to member distanceUnit
     */
    eProsima_user_DllExport std::string& distanceUnit();
    /*!
     * @brief This function copies the value in member operation
     * @param _operation New value to be copied in member operation
     */
    eProsima_user_DllExport void operation(const std::string& _operation);

    /*!
     * @brief This function moves the value in member operation
     * @param _operation New value to be moved in member operation
     */
    eProsima_user_DllExport void operation(std::string&& _operation);

    /*!
     * @brief This function returns a constant reference to member operation
     * @return Constant reference to member operation
     */
    eProsima_user_DllExport const std::string& operation() const;

    /*!
     * @brief This function returns a reference to member operation
     * @return Reference to member operation
     */
    eProsima_user_DllExport std::string& operation();
    /*!
     * @brief This function copies the value in member where
     * @param _where New value to be copied in member where
     */
    eProsima_user_DllExport void where(const std::string& _where);

    /*!
     * @brief This function moves the value in member where
     * @param _where New value to be moved in member where
     */
    eProsima_user_DllExport void where(std::string&& _where);

    /*!
     * @brief This function returns a constant reference to member where
     * @return Constant reference to member where
     */
    eProsima_user_DllExport const std::string& where() const;

    /*!
     * @brief This function returns a reference to member where
     * @return Reference to member where
     */
    eProsima_user_DllExport std::string& where();
    /*!
     * @brief This function copies the value in member title1
     * @param _title1 New value to be copied in member title1
     */
    eProsima_user_DllExport void title1(const std::string& _title1);

    /*!
     * @brief This function moves the value in member title1
     * @param _title1 New value to be moved in member title1
     */
    eProsima_user_DllExport void title1(std::string&& _title1);

    /*!
     * @brief This function returns a constant reference to member title1
     * @return Constant reference to member title1
     */
    eProsima_user_DllExport const std::string& title1() const;

    /*!
     * @brief This function returns a reference to member title1
     * @return Reference to member title1
     */
    eProsima_user_DllExport std::string& title1();
    /*!
     * @brief This function copies the value in member title2
     * @param _title2 New value to be copied in member title2
     */
    eProsima_user_DllExport void title2(const std::string& _title2);

    /*!
     * @brief This function moves the value in member title2
     * @param _title2 New value to be moved in member title2
     */
    eProsima_user_DllExport void title2(std::string&& _title2);

    /*!
     * @brief This function returns a constant reference to member title2
     * @return Constant reference to member title2
     */
    eProsima_user_DllExport const std::string& title2() const;

    /*!
     * @brief This function returns a reference to member title2
     * @return Reference to member title2
     */
    eProsima_user_DllExport std::string& title2();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const NavigationInfo& data,
                                                               size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr& cdr);

private:
    bool m_isNavigating;
    std::vector<char> m_directionIcon;
    std::string m_distance;
    std::string m_distanceUnit;
    std::string m_operation;
    std::string m_where;
    std::string m_title1;
    std::string m_title2;
};
/*!
 * @brief This class represents the structure PhoneStateInfo defined by the user in the IDL file.
 * @ingroup UCAR
 */
class PhoneStateInfo {
public:
    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PhoneStateInfo();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PhoneStateInfo();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object PhoneStateInfo that will be copied.
     */
    eProsima_user_DllExport PhoneStateInfo(const PhoneStateInfo& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object PhoneStateInfo that will be copied.
     */
    eProsima_user_DllExport PhoneStateInfo(PhoneStateInfo&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object PhoneStateInfo that will be copied.
     */
    eProsima_user_DllExport PhoneStateInfo& operator=(const PhoneStateInfo& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object PhoneStateInfo that will be copied.
     */
    eProsima_user_DllExport PhoneStateInfo& operator=(PhoneStateInfo&& x);

    /*!
     * @brief This function sets a value in member phoneCs
     * @param _phoneCs New value for member phoneCs
     */
    eProsima_user_DllExport void phoneCs(int32_t _phoneCs);

    /*!
     * @brief This function returns the value of member phoneCs
     * @return Value of member phoneCs
     */
    eProsima_user_DllExport int32_t phoneCs() const;

    /*!
     * @brief This function returns a reference to member phoneCs
     * @return Reference to member phoneCs
     */
    eProsima_user_DllExport int32_t& phoneCs();

    /*!
     * @brief This function sets a value in member isScreenLocked
     * @param _isScreenLocked New value for member isScreenLocked
     */
    eProsima_user_DllExport void isScreenLocked(bool _isScreenLocked);

    /*!
     * @brief This function returns the value of member isScreenLocked
     * @return Value of member isScreenLocked
     */
    eProsima_user_DllExport bool isScreenLocked() const;

    /*!
     * @brief This function returns a reference to member isScreenLocked
     * @return Reference to member isScreenLocked
     */
    eProsima_user_DllExport bool& isScreenLocked();

    /*!
     * @brief This function sets a value in member isWechatQqCall
     * @param _isWechatQqCall New value for member isWechatQqCall
     */
    eProsima_user_DllExport void isWechatQqCall(bool _isWechatQqCall);

    /*!
     * @brief This function returns the value of member isWechatQqCall
     * @return Value of member isWechatQqCall
     */
    eProsima_user_DllExport bool isWechatQqCall() const;

    /*!
     * @brief This function returns a reference to member isWechatQqCall
     * @return Reference to member isWechatQqCall
     */
    eProsima_user_DllExport bool& isWechatQqCall();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const PhoneStateInfo& data,
                                                               size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr& cdr);

private:
    int32_t m_phoneCs;
    bool m_isScreenLocked;
    bool m_isWechatQqCall;
};
/*!
 * @brief This class represents the interface UCar defined by the user in the IDL file.
 * @ingroup UCAR
 */
class UCar_DllAPI UCar {
public:
    virtual bool sendTouchEvent(/*in*/ int32_t action, /*in*/ int32_t width, /*in*/ int32_t height,
                                /*in*/ int32_t count, /*in*/ const LongArray& trackID, /*in*/ const LongArray& x,
                                /*in*/ const LongArray& y) = 0;

    virtual bool sendMicRecordData(/*in*/ int32_t i, /*in*/ const ShortArray& shorts, /*in*/ int32_t l) = 0;

    virtual bool sendKeyEvent(/*in*/ int32_t keyEventActionType, /*in*/ int32_t keyCodeType, /*in*/ int32_t i) = 0;

    virtual bool sendGotoForeground() = 0;

    virtual bool sendGotoBackground() = 0;

    virtual bool sendVRCMD(/*in*/ int32_t vrcmdType, /*in*/ const std::string& s) = 0;

    virtual bool notifyIsCallHungUp() = 0;

    virtual bool notifySwitchDayOrNight(/*in*/ int32_t dayNightMode) = 0;

    virtual bool awakenVoiceAssistant(/*in*/ const ByteArray& bytes, /*in*/ const AudioFormat& audioFormat) = 0;

    virtual bool presetVendorCustomFields(/*in*/ const ByteArray& bytes) = 0;

    virtual bool presetConnectMode(/*in*/ int32_t connectMode) = 0;
};

class UCar_DllAPI UCarHandle {
public:
    virtual bool sendTouchEventHandle(const std::string& sendId, /*in*/ int32_t action, /*in*/ int32_t width,
                                      /*in*/ int32_t height, /*in*/ int32_t count, /*in*/ const LongArray& trackID,
                                      /*in*/ const LongArray& x, /*in*/ const LongArray& y) = 0;

    virtual bool sendMicRecordDataHandle(const std::string& sendId, /*in*/ int32_t i, /*in*/ const ShortArray& shorts,
                                         /*in*/ int32_t l) = 0;

    virtual bool sendKeyEventHandle(const std::string& sendId, /*in*/ int32_t keyEventActionType,
                                    /*in*/ int32_t keyCodeType, /*in*/ int32_t i) = 0;

    virtual bool sendGotoForegroundHandle(const std::string& sendId) = 0;

    virtual bool sendGotoBackgroundHandle(const std::string& sendId) = 0;

    virtual bool sendVRCMDHandle(const std::string& sendId, /*in*/ int32_t vrcmdType, /*in*/ const std::string& s) = 0;

    virtual bool notifyIsCallHungUpHandle(const std::string& sendId) = 0;

    virtual bool notifySwitchDayOrNightHandle(const std::string& sendId, /*in*/ int32_t dayNightMode) = 0;

    virtual bool awakenVoiceAssistantHandle(const std::string& sendId, /*in*/ const ByteArray& bytes,
                                            /*in*/ const AudioFormat& audioFormat) = 0;

    virtual bool presetVendorCustomFieldsHandle(const std::string& sendId, /*in*/ const ByteArray& bytes) = 0;

    virtual bool presetConnectModeHandle(const std::string& sendId, /*in*/ int32_t connectMode) = 0;
};

class UCar_DllAPI UCarNotify {
public:
    virtual void videoInitialized(/*in*/ int32_t type, /*in*/ const VideoFormat& videFormat) = 0;

    virtual void videoDataReceived(/*in*/ int32_t type, /*in*/ int32_t size, /*in*/ const ByteArray& byte) = 0;

    virtual void requestGotoHUDesktop() = 0;

    virtual void audioStateChanged(/*in*/ int32_t var2, /*in*/ const AudioFormat& audioFormat,
                                   /*in*/ int32_t playerState) = 0;

    virtual void audioDataReceived(/*in*/ int32_t var2, /*in*/ int32_t var3, /*in*/ const ByteArray& var4) = 0;

    virtual void musicInfoReceived(/*in*/ const MusicInfo& var2) = 0;

    virtual void navigationInfoReceived(/*in*/ const NavigationInfo& var2) = 0;

    virtual void phoneStateInfoReceived(/*in*/ const PhoneStateInfo& var2) = 0;

    virtual void micRecordRequest(/*in*/ const AudioFormat& var2, /*in*/ bool var3) = 0;

    virtual void userInterventionNeeded() = 0;
};

class UCar_DllAPI UCarNotifyHandle {
public:
    virtual void videoInitializedHandle(const std::string& sendId, /*in*/ int32_t type,
                                        /*in*/ const VideoFormat& videFormat) = 0;

    virtual void videoDataReceivedHandle(const std::string& sendId, /*in*/ int32_t type, /*in*/ int32_t size,
                                         /*in*/ const ByteArray& byte) = 0;

    virtual void requestGotoHUDesktopHandle(const std::string& sendId) = 0;

    virtual void audioStateChangedHandle(const std::string& sendId, /*in*/ int32_t var2,
                                         /*in*/ const AudioFormat& audioFormat, /*in*/ int32_t playerState) = 0;

    virtual void audioDataReceivedHandle(const std::string& sendId, /*in*/ int32_t var2, /*in*/ int32_t var3,
                                         /*in*/ const ByteArray& var4) = 0;

    virtual void musicInfoReceivedHandle(const std::string& sendId, /*in*/ const MusicInfo& var2) = 0;

    virtual void navigationInfoReceivedHandle(const std::string& sendId, /*in*/ const NavigationInfo& var2) = 0;

    virtual void phoneStateInfoReceivedHandle(const std::string& sendId, /*in*/ const PhoneStateInfo& var2) = 0;

    virtual void micRecordRequestHandle(const std::string& sendId, /*in*/ const AudioFormat& var2,
                                        /*in*/ bool var3) = 0;

    virtual void userInterventionNeededHandle(const std::string& sendId) = 0;
};

#endif  // _UCAR_H_