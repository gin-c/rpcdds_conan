/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 *
 * @file UCarServerImplExample.cxx
 * This source file contains an example of the declaration of a servant.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "UCarServerImplExample.h"

#include "iostream"

bool UCarServerImplExample::sendTouchEventHandle(const std::string& sendId, int32_t action, int32_t width,
                                                 int32_t height, int32_t count, const LongArray& trackID,
                                                 const LongArray& x, const LongArray& y) {
    std::cout << "===== sendTouchEvent =====" << std::endl;
    std::cout << "sendId:" << sendId << std::endl;
    std::cout << "action:" << action << std::endl;
    std::cout << "width:" << width << std::endl;
    std::cout << "height:" << height << std::endl;
    std::cout << "count:" << count << std::endl;
    std::cout << "trackID:";
    for (auto& i : trackID) {
        std::cout << i << " ";
    }
    std::cout << std::endl;

    std::cout << "x:";
    for (auto& i : x) {
        std::cout << i << " ";
    }
    std::cout << std::endl;

    std::cout << "y:";
    for (auto& i : y) {
        std::cout << i << " ";
    }
    std::cout << std::endl;

    return true;
}

bool UCarServerImplExample::sendMicRecordDataHandle(const std::string& sendId, int32_t i, const ShortArray& shorts,
                                                    int32_t l) {
    return false;
}
bool UCarServerImplExample::sendKeyEventHandle(const std::string& sendId, int32_t keyEventActionType,
                                               int32_t keyCodeType, int32_t i) {
    return false;
}

bool UCarServerImplExample::sendGotoForegroundHandle(const std::string& sendId) {
    std::cout << "===== onSendGotoForeground =====" << std::endl;
    std::cout << "sendId:" << sendId << std::endl;
    return true;
}
bool UCarServerImplExample::sendGotoBackgroundHandle(const std::string& sendId) { return false; }
bool UCarServerImplExample::sendVRCMDHandle(const std::string& sendId, int32_t vrcmdType, const std::string& s) {
    return false;
}
bool UCarServerImplExample::notifyIsCallHungUpHandle(const std::string& sendId) { return false; }
bool UCarServerImplExample::notifySwitchDayOrNightHandle(const std::string& sendId, int32_t dayNightMode) {
    return false;
}
bool UCarServerImplExample::awakenVoiceAssistantHandle(const std::string& sendId, const ByteArray& bytes,
                                                       const AudioFormat& audioFormat) {
    return false;
}
bool UCarServerImplExample::presetVendorCustomFieldsHandle(const std::string& sendId, const ByteArray& bytes) {
    return false;
}
bool UCarServerImplExample::presetConnectModeHandle(const std::string& sendId, int32_t connectMode) { return false; }
