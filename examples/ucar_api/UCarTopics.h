/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 *
 * @file UCarTopics.h
 * This header file contains the declaration of topics generated using operations in the IDL file.
 *
 * This file was generated by the tool rpcddsgen.
 */

#ifndef _UCar_TOPICS_H_
#define _UCar_TOPICS_H_

#include "UCar.h"
#include <rpcdds/protocols/dds/MessageHeader.h>
#include <rpcdds/utils/Messages.h>

#include <cstddef>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define user_cpp_DllExport __declspec(dllexport)
#else
#define user_cpp_DllExport
#endif
#else
#define user_cpp_DllExport
#endif

/*!
 * @brief This class represents the structure UCar_sendTouchEvent_In that can be used to send/receive requests
 * for the operation UCar::sendTouchEvent.
 * @ingroup UCAR
 */
class UCar_sendTouchEvent_In {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_sendTouchEvent_In();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_sendTouchEvent_In();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object UCar_sendTouchEvent_In that will be copied.
     */
    user_cpp_DllExport UCar_sendTouchEvent_In(const UCar_sendTouchEvent_In &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_sendTouchEvent_In that will be copied.
     */
    user_cpp_DllExport UCar_sendTouchEvent_In(UCar_sendTouchEvent_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendTouchEvent that will be copied.
     */
    user_cpp_DllExport UCar_sendTouchEvent_In &operator=(const UCar_sendTouchEvent_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendTouchEvent that will be copied.
     */
    user_cpp_DllExport UCar_sendTouchEvent_In &operator=(UCar_sendTouchEvent_In &&x);

    /*!
     * @brief This function sets a value in member action
     * @param _action New value for member action
     */
    inline user_cpp_DllExport void action(int32_t _action) { m_action = _action; }

    /*!
     * @brief This function returns the value of member action
     * @return Value of member action
     */
    inline user_cpp_DllExport int32_t action() const { return m_action; }

    /*!
     * @brief This function returns a reference to member action
     * @return Reference to member action
     */
    inline user_cpp_DllExport int32_t &action() { return m_action; }
    /*!
     * @brief This function sets a value in member width
     * @param _width New value for member width
     */
    inline user_cpp_DllExport void width(int32_t _width) { m_width = _width; }

    /*!
     * @brief This function returns the value of member width
     * @return Value of member width
     */
    inline user_cpp_DllExport int32_t width() const { return m_width; }

    /*!
     * @brief This function returns a reference to member width
     * @return Reference to member width
     */
    inline user_cpp_DllExport int32_t &width() { return m_width; }
    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    inline user_cpp_DllExport void height(int32_t _height) { m_height = _height; }

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    inline user_cpp_DllExport int32_t height() const { return m_height; }

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    inline user_cpp_DllExport int32_t &height() { return m_height; }
    /*!
     * @brief This function sets a value in member count
     * @param _count New value for member count
     */
    inline user_cpp_DllExport void count(int32_t _count) { m_count = _count; }

    /*!
     * @brief This function returns the value of member count
     * @return Value of member count
     */
    inline user_cpp_DllExport int32_t count() const { return m_count; }

    /*!
     * @brief This function returns a reference to member count
     * @return Reference to member count
     */
    inline user_cpp_DllExport int32_t &count() { return m_count; }
    /*!
     * @brief This function copies the value in member trackID
     * @param _trackID New value to be copied in member trackID
     */
    inline user_cpp_DllExport void trackID(const LongArray &_trackID) { m_trackID = _trackID; }

    /*!
     * @brief This function moves the value in member trackID
     * @param _trackID New value to be moved in member trackID
     */
    inline user_cpp_DllExport void trackID(LongArray &&_trackID) { m_trackID = std::move(_trackID); }

    /*!
     * @brief This function returns a constant reference to member trackID
     * @return Constant reference to member trackID
     */
    inline user_cpp_DllExport const LongArray &trackID() const { return m_trackID; }

    /*!
     * @brief This function returns a reference to member trackID
     * @return Reference to member trackID
     */
    inline user_cpp_DllExport LongArray &trackID() { return m_trackID; }
    /*!
     * @brief This function copies the value in member x
     * @param _x New value to be copied in member x
     */
    inline user_cpp_DllExport void x(const LongArray &_x) { m_x = _x; }

    /*!
     * @brief This function moves the value in member x
     * @param _x New value to be moved in member x
     */
    inline user_cpp_DllExport void x(LongArray &&_x) { m_x = std::move(_x); }

    /*!
     * @brief This function returns a constant reference to member x
     * @return Constant reference to member x
     */
    inline user_cpp_DllExport const LongArray &x() const { return m_x; }

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    inline user_cpp_DllExport LongArray &x() { return m_x; }
    /*!
     * @brief This function copies the value in member y
     * @param _y New value to be copied in member y
     */
    inline user_cpp_DllExport void y(const LongArray &_y) { m_y = _y; }

    /*!
     * @brief This function moves the value in member y
     * @param _y New value to be moved in member y
     */
    inline user_cpp_DllExport void y(LongArray &&_y) { m_y = std::move(_y); }

    /*!
     * @brief This function returns a constant reference to member y
     * @return Constant reference to member y
     */
    inline user_cpp_DllExport const LongArray &y() const { return m_y; }

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    inline user_cpp_DllExport LongArray &y() { return m_y; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_sendTouchEvent_In &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m_action;
    int32_t m_width;
    int32_t m_height;
    int32_t m_count;
    LongArray m_trackID;
    LongArray m_x;
    LongArray m_y;
};
/*!
 * @brief This class encapsulates output paramaters for operation UCar::sendTouchEvent.
 * @ingroup UCAR
 */
class UCar_sendTouchEvent_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_sendTouchEvent_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_sendTouchEvent_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_sendTouchEvent_Out that will be copied.
     */
    user_cpp_DllExport UCar_sendTouchEvent_Out(const UCar_sendTouchEvent_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_sendTouchEvent_Out that will be copied.
     */
    user_cpp_DllExport UCar_sendTouchEvent_Out(UCar_sendTouchEvent_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendTouchEvent that will be copied.
     */
    user_cpp_DllExport UCar_sendTouchEvent_Out &operator=(const UCar_sendTouchEvent_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendTouchEvent that will be copied.
     */
    user_cpp_DllExport UCar_sendTouchEvent_Out &operator=(UCar_sendTouchEvent_Out &&x);

    /*!
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    inline user_cpp_DllExport void return_(bool _return_) { m_return_ = _return_; }

    /*!
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    inline user_cpp_DllExport bool return_() const { return m_return_; }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport bool &return_() { return m_return_; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_sendTouchEvent_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    bool m_return_;
};

/*!
 * @brief This class represents the structure UCar_sendTouchEvent_Result that can be used to send/receive replies
 * for the operation UCar::sendTouchEvent.
 *
 * @ingroup UCAR
 */
class UCar_sendTouchEvent_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_sendTouchEvent_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_sendTouchEvent_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_sendTouchEvent_Result that will be copied.
     */
    user_cpp_DllExport UCar_sendTouchEvent_Result(const UCar_sendTouchEvent_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_sendTouchEvent_Result that will be copied.
     */
    user_cpp_DllExport UCar_sendTouchEvent_Result(UCar_sendTouchEvent_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendTouchEvent that will be copied.
     */
    user_cpp_DllExport UCar_sendTouchEvent_Result &operator=(const UCar_sendTouchEvent_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendTouchEvent that will be copied.
     */
    user_cpp_DllExport UCar_sendTouchEvent_Result &operator=(UCar_sendTouchEvent_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_sendTouchEvent_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_sendTouchEvent_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_sendTouchEvent_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_sendTouchEvent_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_sendTouchEvent_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_sendTouchEvent_Out m_result;
};
/*!
 * @brief This class represents the structure UCar_sendMicRecordData_In that can be used to send/receive requests
 * for the operation UCar::sendMicRecordData.
 * @ingroup UCAR
 */
class UCar_sendMicRecordData_In {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_sendMicRecordData_In();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_sendMicRecordData_In();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object UCar_sendMicRecordData_In that will be copied.
     */
    user_cpp_DllExport UCar_sendMicRecordData_In(const UCar_sendMicRecordData_In &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_sendMicRecordData_In that will be copied.
     */
    user_cpp_DllExport UCar_sendMicRecordData_In(UCar_sendMicRecordData_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendMicRecordData that will be copied.
     */
    user_cpp_DllExport UCar_sendMicRecordData_In &operator=(const UCar_sendMicRecordData_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendMicRecordData that will be copied.
     */
    user_cpp_DllExport UCar_sendMicRecordData_In &operator=(UCar_sendMicRecordData_In &&x);

    /*!
     * @brief This function sets a value in member i
     * @param _i New value for member i
     */
    inline user_cpp_DllExport void i(int32_t _i) { m_i = _i; }

    /*!
     * @brief This function returns the value of member i
     * @return Value of member i
     */
    inline user_cpp_DllExport int32_t i() const { return m_i; }

    /*!
     * @brief This function returns a reference to member i
     * @return Reference to member i
     */
    inline user_cpp_DllExport int32_t &i() { return m_i; }
    /*!
     * @brief This function copies the value in member shorts
     * @param _shorts New value to be copied in member shorts
     */
    inline user_cpp_DllExport void shorts(const ShortArray &_shorts) { m_shorts = _shorts; }

    /*!
     * @brief This function moves the value in member shorts
     * @param _shorts New value to be moved in member shorts
     */
    inline user_cpp_DllExport void shorts(ShortArray &&_shorts) { m_shorts = std::move(_shorts); }

    /*!
     * @brief This function returns a constant reference to member shorts
     * @return Constant reference to member shorts
     */
    inline user_cpp_DllExport const ShortArray &shorts() const { return m_shorts; }

    /*!
     * @brief This function returns a reference to member shorts
     * @return Reference to member shorts
     */
    inline user_cpp_DllExport ShortArray &shorts() { return m_shorts; }
    /*!
     * @brief This function sets a value in member l
     * @param _l New value for member l
     */
    inline user_cpp_DllExport void l(int32_t _l) { m_l = _l; }

    /*!
     * @brief This function returns the value of member l
     * @return Value of member l
     */
    inline user_cpp_DllExport int32_t l() const { return m_l; }

    /*!
     * @brief This function returns a reference to member l
     * @return Reference to member l
     */
    inline user_cpp_DllExport int32_t &l() { return m_l; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_sendMicRecordData_In &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m_i;
    ShortArray m_shorts;
    int32_t m_l;
};
/*!
 * @brief This class encapsulates output paramaters for operation UCar::sendMicRecordData.
 * @ingroup UCAR
 */
class UCar_sendMicRecordData_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_sendMicRecordData_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_sendMicRecordData_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_sendMicRecordData_Out that will be copied.
     */
    user_cpp_DllExport UCar_sendMicRecordData_Out(const UCar_sendMicRecordData_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_sendMicRecordData_Out that will be copied.
     */
    user_cpp_DllExport UCar_sendMicRecordData_Out(UCar_sendMicRecordData_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendMicRecordData that will be copied.
     */
    user_cpp_DllExport UCar_sendMicRecordData_Out &operator=(const UCar_sendMicRecordData_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendMicRecordData that will be copied.
     */
    user_cpp_DllExport UCar_sendMicRecordData_Out &operator=(UCar_sendMicRecordData_Out &&x);

    /*!
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    inline user_cpp_DllExport void return_(bool _return_) { m_return_ = _return_; }

    /*!
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    inline user_cpp_DllExport bool return_() const { return m_return_; }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport bool &return_() { return m_return_; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_sendMicRecordData_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    bool m_return_;
};

/*!
 * @brief This class represents the structure UCar_sendMicRecordData_Result that can be used to send/receive replies
 * for the operation UCar::sendMicRecordData.
 *
 * @ingroup UCAR
 */
class UCar_sendMicRecordData_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_sendMicRecordData_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_sendMicRecordData_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_sendMicRecordData_Result that will be copied.
     */
    user_cpp_DllExport UCar_sendMicRecordData_Result(const UCar_sendMicRecordData_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_sendMicRecordData_Result that will be copied.
     */
    user_cpp_DllExport UCar_sendMicRecordData_Result(UCar_sendMicRecordData_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendMicRecordData that will be copied.
     */
    user_cpp_DllExport UCar_sendMicRecordData_Result &operator=(const UCar_sendMicRecordData_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendMicRecordData that will be copied.
     */
    user_cpp_DllExport UCar_sendMicRecordData_Result &operator=(UCar_sendMicRecordData_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_sendMicRecordData_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_sendMicRecordData_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_sendMicRecordData_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_sendMicRecordData_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_sendMicRecordData_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_sendMicRecordData_Out m_result;
};
/*!
 * @brief This class represents the structure UCar_sendKeyEvent_In that can be used to send/receive requests
 * for the operation UCar::sendKeyEvent.
 * @ingroup UCAR
 */
class UCar_sendKeyEvent_In {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_sendKeyEvent_In();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_sendKeyEvent_In();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object UCar_sendKeyEvent_In that will be copied.
     */
    user_cpp_DllExport UCar_sendKeyEvent_In(const UCar_sendKeyEvent_In &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_sendKeyEvent_In that will be copied.
     */
    user_cpp_DllExport UCar_sendKeyEvent_In(UCar_sendKeyEvent_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendKeyEvent that will be copied.
     */
    user_cpp_DllExport UCar_sendKeyEvent_In &operator=(const UCar_sendKeyEvent_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendKeyEvent that will be copied.
     */
    user_cpp_DllExport UCar_sendKeyEvent_In &operator=(UCar_sendKeyEvent_In &&x);

    /*!
     * @brief This function sets a value in member keyEventActionType
     * @param _keyEventActionType New value for member keyEventActionType
     */
    inline user_cpp_DllExport void keyEventActionType(int32_t _keyEventActionType) {
        m_keyEventActionType = _keyEventActionType;
    }

    /*!
     * @brief This function returns the value of member keyEventActionType
     * @return Value of member keyEventActionType
     */
    inline user_cpp_DllExport int32_t keyEventActionType() const { return m_keyEventActionType; }

    /*!
     * @brief This function returns a reference to member keyEventActionType
     * @return Reference to member keyEventActionType
     */
    inline user_cpp_DllExport int32_t &keyEventActionType() { return m_keyEventActionType; }
    /*!
     * @brief This function sets a value in member keyCodeType
     * @param _keyCodeType New value for member keyCodeType
     */
    inline user_cpp_DllExport void keyCodeType(int32_t _keyCodeType) { m_keyCodeType = _keyCodeType; }

    /*!
     * @brief This function returns the value of member keyCodeType
     * @return Value of member keyCodeType
     */
    inline user_cpp_DllExport int32_t keyCodeType() const { return m_keyCodeType; }

    /*!
     * @brief This function returns a reference to member keyCodeType
     * @return Reference to member keyCodeType
     */
    inline user_cpp_DllExport int32_t &keyCodeType() { return m_keyCodeType; }
    /*!
     * @brief This function sets a value in member i
     * @param _i New value for member i
     */
    inline user_cpp_DllExport void i(int32_t _i) { m_i = _i; }

    /*!
     * @brief This function returns the value of member i
     * @return Value of member i
     */
    inline user_cpp_DllExport int32_t i() const { return m_i; }

    /*!
     * @brief This function returns a reference to member i
     * @return Reference to member i
     */
    inline user_cpp_DllExport int32_t &i() { return m_i; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_sendKeyEvent_In &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m_keyEventActionType;
    int32_t m_keyCodeType;
    int32_t m_i;
};
/*!
 * @brief This class encapsulates output paramaters for operation UCar::sendKeyEvent.
 * @ingroup UCAR
 */
class UCar_sendKeyEvent_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_sendKeyEvent_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_sendKeyEvent_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_sendKeyEvent_Out that will be copied.
     */
    user_cpp_DllExport UCar_sendKeyEvent_Out(const UCar_sendKeyEvent_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_sendKeyEvent_Out that will be copied.
     */
    user_cpp_DllExport UCar_sendKeyEvent_Out(UCar_sendKeyEvent_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendKeyEvent that will be copied.
     */
    user_cpp_DllExport UCar_sendKeyEvent_Out &operator=(const UCar_sendKeyEvent_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendKeyEvent that will be copied.
     */
    user_cpp_DllExport UCar_sendKeyEvent_Out &operator=(UCar_sendKeyEvent_Out &&x);

    /*!
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    inline user_cpp_DllExport void return_(bool _return_) { m_return_ = _return_; }

    /*!
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    inline user_cpp_DllExport bool return_() const { return m_return_; }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport bool &return_() { return m_return_; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_sendKeyEvent_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    bool m_return_;
};

/*!
 * @brief This class represents the structure UCar_sendKeyEvent_Result that can be used to send/receive replies
 * for the operation UCar::sendKeyEvent.
 *
 * @ingroup UCAR
 */
class UCar_sendKeyEvent_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_sendKeyEvent_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_sendKeyEvent_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_sendKeyEvent_Result that will be copied.
     */
    user_cpp_DllExport UCar_sendKeyEvent_Result(const UCar_sendKeyEvent_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_sendKeyEvent_Result that will be copied.
     */
    user_cpp_DllExport UCar_sendKeyEvent_Result(UCar_sendKeyEvent_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendKeyEvent that will be copied.
     */
    user_cpp_DllExport UCar_sendKeyEvent_Result &operator=(const UCar_sendKeyEvent_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendKeyEvent that will be copied.
     */
    user_cpp_DllExport UCar_sendKeyEvent_Result &operator=(UCar_sendKeyEvent_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_sendKeyEvent_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_sendKeyEvent_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_sendKeyEvent_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_sendKeyEvent_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_sendKeyEvent_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_sendKeyEvent_Out m_result;
};
/*!
 * @brief This class represents the structure UCar_sendGotoForeground_In that can be used to send/receive requests
 * for the operation UCar::sendGotoForeground.
 * @ingroup UCAR
 */
class UCar_sendGotoForeground_In {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_sendGotoForeground_In();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_sendGotoForeground_In();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object UCar_sendGotoForeground_In that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoForeground_In(const UCar_sendGotoForeground_In &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_sendGotoForeground_In that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoForeground_In(UCar_sendGotoForeground_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendGotoForeground that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoForeground_In &operator=(const UCar_sendGotoForeground_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendGotoForeground that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoForeground_In &operator=(UCar_sendGotoForeground_In &&x);

    inline user_cpp_DllExport void dummy(eprosima::rpc::protocol::dds::rpc::UnusedMember _dummy) { m_dummy = _dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember dummy() const { return m_dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember &dummy() { return m_dummy; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_sendGotoForeground_In &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    eprosima::rpc::protocol::dds::rpc::UnusedMember m_dummy;
};
/*!
 * @brief This class encapsulates output paramaters for operation UCar::sendGotoForeground.
 * @ingroup UCAR
 */
class UCar_sendGotoForeground_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_sendGotoForeground_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_sendGotoForeground_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_sendGotoForeground_Out that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoForeground_Out(const UCar_sendGotoForeground_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_sendGotoForeground_Out that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoForeground_Out(UCar_sendGotoForeground_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendGotoForeground that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoForeground_Out &operator=(const UCar_sendGotoForeground_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendGotoForeground that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoForeground_Out &operator=(UCar_sendGotoForeground_Out &&x);

    /*!
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    inline user_cpp_DllExport void return_(bool _return_) { m_return_ = _return_; }

    /*!
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    inline user_cpp_DllExport bool return_() const { return m_return_; }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport bool &return_() { return m_return_; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_sendGotoForeground_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    bool m_return_;
};

/*!
 * @brief This class represents the structure UCar_sendGotoForeground_Result that can be used to send/receive replies
 * for the operation UCar::sendGotoForeground.
 *
 * @ingroup UCAR
 */
class UCar_sendGotoForeground_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_sendGotoForeground_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_sendGotoForeground_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_sendGotoForeground_Result that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoForeground_Result(const UCar_sendGotoForeground_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_sendGotoForeground_Result that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoForeground_Result(UCar_sendGotoForeground_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendGotoForeground that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoForeground_Result &operator=(const UCar_sendGotoForeground_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendGotoForeground that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoForeground_Result &operator=(UCar_sendGotoForeground_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_sendGotoForeground_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_sendGotoForeground_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_sendGotoForeground_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_sendGotoForeground_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_sendGotoForeground_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_sendGotoForeground_Out m_result;
};
/*!
 * @brief This class represents the structure UCar_sendGotoBackground_In that can be used to send/receive requests
 * for the operation UCar::sendGotoBackground.
 * @ingroup UCAR
 */
class UCar_sendGotoBackground_In {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_sendGotoBackground_In();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_sendGotoBackground_In();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object UCar_sendGotoBackground_In that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoBackground_In(const UCar_sendGotoBackground_In &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_sendGotoBackground_In that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoBackground_In(UCar_sendGotoBackground_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendGotoBackground that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoBackground_In &operator=(const UCar_sendGotoBackground_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendGotoBackground that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoBackground_In &operator=(UCar_sendGotoBackground_In &&x);

    inline user_cpp_DllExport void dummy(eprosima::rpc::protocol::dds::rpc::UnusedMember _dummy) { m_dummy = _dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember dummy() const { return m_dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember &dummy() { return m_dummy; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_sendGotoBackground_In &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    eprosima::rpc::protocol::dds::rpc::UnusedMember m_dummy;
};
/*!
 * @brief This class encapsulates output paramaters for operation UCar::sendGotoBackground.
 * @ingroup UCAR
 */
class UCar_sendGotoBackground_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_sendGotoBackground_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_sendGotoBackground_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_sendGotoBackground_Out that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoBackground_Out(const UCar_sendGotoBackground_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_sendGotoBackground_Out that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoBackground_Out(UCar_sendGotoBackground_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendGotoBackground that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoBackground_Out &operator=(const UCar_sendGotoBackground_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendGotoBackground that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoBackground_Out &operator=(UCar_sendGotoBackground_Out &&x);

    /*!
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    inline user_cpp_DllExport void return_(bool _return_) { m_return_ = _return_; }

    /*!
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    inline user_cpp_DllExport bool return_() const { return m_return_; }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport bool &return_() { return m_return_; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_sendGotoBackground_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    bool m_return_;
};

/*!
 * @brief This class represents the structure UCar_sendGotoBackground_Result that can be used to send/receive replies
 * for the operation UCar::sendGotoBackground.
 *
 * @ingroup UCAR
 */
class UCar_sendGotoBackground_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_sendGotoBackground_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_sendGotoBackground_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_sendGotoBackground_Result that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoBackground_Result(const UCar_sendGotoBackground_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_sendGotoBackground_Result that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoBackground_Result(UCar_sendGotoBackground_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendGotoBackground that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoBackground_Result &operator=(const UCar_sendGotoBackground_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendGotoBackground that will be copied.
     */
    user_cpp_DllExport UCar_sendGotoBackground_Result &operator=(UCar_sendGotoBackground_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_sendGotoBackground_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_sendGotoBackground_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_sendGotoBackground_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_sendGotoBackground_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_sendGotoBackground_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_sendGotoBackground_Out m_result;
};
/*!
 * @brief This class represents the structure UCar_sendVRCMD_In that can be used to send/receive requests
 * for the operation UCar::sendVRCMD.
 * @ingroup UCAR
 */
class UCar_sendVRCMD_In {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_sendVRCMD_In();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_sendVRCMD_In();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object UCar_sendVRCMD_In that will be copied.
     */
    user_cpp_DllExport UCar_sendVRCMD_In(const UCar_sendVRCMD_In &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_sendVRCMD_In that will be copied.
     */
    user_cpp_DllExport UCar_sendVRCMD_In(UCar_sendVRCMD_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendVRCMD that will be copied.
     */
    user_cpp_DllExport UCar_sendVRCMD_In &operator=(const UCar_sendVRCMD_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendVRCMD that will be copied.
     */
    user_cpp_DllExport UCar_sendVRCMD_In &operator=(UCar_sendVRCMD_In &&x);

    /*!
     * @brief This function sets a value in member vrcmdType
     * @param _vrcmdType New value for member vrcmdType
     */
    inline user_cpp_DllExport void vrcmdType(int32_t _vrcmdType) { m_vrcmdType = _vrcmdType; }

    /*!
     * @brief This function returns the value of member vrcmdType
     * @return Value of member vrcmdType
     */
    inline user_cpp_DllExport int32_t vrcmdType() const { return m_vrcmdType; }

    /*!
     * @brief This function returns a reference to member vrcmdType
     * @return Reference to member vrcmdType
     */
    inline user_cpp_DllExport int32_t &vrcmdType() { return m_vrcmdType; }
    /*!
     * @brief This function copies the value in member s
     * @param _s New value to be copied in member s
     */
    inline user_cpp_DllExport void s(const std::string &_s) { m_s = _s; }

    /*!
     * @brief This function moves the value in member s
     * @param _s New value to be moved in member s
     */
    inline user_cpp_DllExport void s(std::string &&_s) { m_s = std::move(_s); }

    /*!
     * @brief This function returns a constant reference to member s
     * @return Constant reference to member s
     */
    inline user_cpp_DllExport const std::string &s() const { return m_s; }

    /*!
     * @brief This function returns a reference to member s
     * @return Reference to member s
     */
    inline user_cpp_DllExport std::string &s() { return m_s; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_sendVRCMD_In &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m_vrcmdType;
    std::string m_s;
};
/*!
 * @brief This class encapsulates output paramaters for operation UCar::sendVRCMD.
 * @ingroup UCAR
 */
class UCar_sendVRCMD_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_sendVRCMD_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_sendVRCMD_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_sendVRCMD_Out that will be copied.
     */
    user_cpp_DllExport UCar_sendVRCMD_Out(const UCar_sendVRCMD_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_sendVRCMD_Out that will be copied.
     */
    user_cpp_DllExport UCar_sendVRCMD_Out(UCar_sendVRCMD_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendVRCMD that will be copied.
     */
    user_cpp_DllExport UCar_sendVRCMD_Out &operator=(const UCar_sendVRCMD_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendVRCMD that will be copied.
     */
    user_cpp_DllExport UCar_sendVRCMD_Out &operator=(UCar_sendVRCMD_Out &&x);

    /*!
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    inline user_cpp_DllExport void return_(bool _return_) { m_return_ = _return_; }

    /*!
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    inline user_cpp_DllExport bool return_() const { return m_return_; }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport bool &return_() { return m_return_; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_sendVRCMD_Out &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    bool m_return_;
};

/*!
 * @brief This class represents the structure UCar_sendVRCMD_Result that can be used to send/receive replies
 * for the operation UCar::sendVRCMD.
 *
 * @ingroup UCAR
 */
class UCar_sendVRCMD_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_sendVRCMD_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_sendVRCMD_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_sendVRCMD_Result that will be copied.
     */
    user_cpp_DllExport UCar_sendVRCMD_Result(const UCar_sendVRCMD_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_sendVRCMD_Result that will be copied.
     */
    user_cpp_DllExport UCar_sendVRCMD_Result(UCar_sendVRCMD_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendVRCMD that will be copied.
     */
    user_cpp_DllExport UCar_sendVRCMD_Result &operator=(const UCar_sendVRCMD_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_sendVRCMD that will be copied.
     */
    user_cpp_DllExport UCar_sendVRCMD_Result &operator=(UCar_sendVRCMD_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_sendVRCMD_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_sendVRCMD_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_sendVRCMD_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_sendVRCMD_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_sendVRCMD_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_sendVRCMD_Out m_result;
};
/*!
 * @brief This class represents the structure UCar_notifyIsCallHungUp_In that can be used to send/receive requests
 * for the operation UCar::notifyIsCallHungUp.
 * @ingroup UCAR
 */
class UCar_notifyIsCallHungUp_In {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_notifyIsCallHungUp_In();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_notifyIsCallHungUp_In();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object UCar_notifyIsCallHungUp_In that will be copied.
     */
    user_cpp_DllExport UCar_notifyIsCallHungUp_In(const UCar_notifyIsCallHungUp_In &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_notifyIsCallHungUp_In that will be copied.
     */
    user_cpp_DllExport UCar_notifyIsCallHungUp_In(UCar_notifyIsCallHungUp_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_notifyIsCallHungUp that will be copied.
     */
    user_cpp_DllExport UCar_notifyIsCallHungUp_In &operator=(const UCar_notifyIsCallHungUp_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_notifyIsCallHungUp that will be copied.
     */
    user_cpp_DllExport UCar_notifyIsCallHungUp_In &operator=(UCar_notifyIsCallHungUp_In &&x);

    inline user_cpp_DllExport void dummy(eprosima::rpc::protocol::dds::rpc::UnusedMember _dummy) { m_dummy = _dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember dummy() const { return m_dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember &dummy() { return m_dummy; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_notifyIsCallHungUp_In &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    eprosima::rpc::protocol::dds::rpc::UnusedMember m_dummy;
};
/*!
 * @brief This class encapsulates output paramaters for operation UCar::notifyIsCallHungUp.
 * @ingroup UCAR
 */
class UCar_notifyIsCallHungUp_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_notifyIsCallHungUp_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_notifyIsCallHungUp_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_notifyIsCallHungUp_Out that will be copied.
     */
    user_cpp_DllExport UCar_notifyIsCallHungUp_Out(const UCar_notifyIsCallHungUp_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_notifyIsCallHungUp_Out that will be copied.
     */
    user_cpp_DllExport UCar_notifyIsCallHungUp_Out(UCar_notifyIsCallHungUp_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_notifyIsCallHungUp that will be copied.
     */
    user_cpp_DllExport UCar_notifyIsCallHungUp_Out &operator=(const UCar_notifyIsCallHungUp_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_notifyIsCallHungUp that will be copied.
     */
    user_cpp_DllExport UCar_notifyIsCallHungUp_Out &operator=(UCar_notifyIsCallHungUp_Out &&x);

    /*!
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    inline user_cpp_DllExport void return_(bool _return_) { m_return_ = _return_; }

    /*!
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    inline user_cpp_DllExport bool return_() const { return m_return_; }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport bool &return_() { return m_return_; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_notifyIsCallHungUp_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    bool m_return_;
};

/*!
 * @brief This class represents the structure UCar_notifyIsCallHungUp_Result that can be used to send/receive replies
 * for the operation UCar::notifyIsCallHungUp.
 *
 * @ingroup UCAR
 */
class UCar_notifyIsCallHungUp_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_notifyIsCallHungUp_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_notifyIsCallHungUp_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_notifyIsCallHungUp_Result that will be copied.
     */
    user_cpp_DllExport UCar_notifyIsCallHungUp_Result(const UCar_notifyIsCallHungUp_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_notifyIsCallHungUp_Result that will be copied.
     */
    user_cpp_DllExport UCar_notifyIsCallHungUp_Result(UCar_notifyIsCallHungUp_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_notifyIsCallHungUp that will be copied.
     */
    user_cpp_DllExport UCar_notifyIsCallHungUp_Result &operator=(const UCar_notifyIsCallHungUp_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_notifyIsCallHungUp that will be copied.
     */
    user_cpp_DllExport UCar_notifyIsCallHungUp_Result &operator=(UCar_notifyIsCallHungUp_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_notifyIsCallHungUp_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_notifyIsCallHungUp_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_notifyIsCallHungUp_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_notifyIsCallHungUp_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_notifyIsCallHungUp_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_notifyIsCallHungUp_Out m_result;
};
/*!
 * @brief This class represents the structure UCar_notifySwitchDayOrNight_In that can be used to send/receive requests
 * for the operation UCar::notifySwitchDayOrNight.
 * @ingroup UCAR
 */
class UCar_notifySwitchDayOrNight_In {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_notifySwitchDayOrNight_In();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_notifySwitchDayOrNight_In();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object UCar_notifySwitchDayOrNight_In that will be copied.
     */
    user_cpp_DllExport UCar_notifySwitchDayOrNight_In(const UCar_notifySwitchDayOrNight_In &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_notifySwitchDayOrNight_In that will be copied.
     */
    user_cpp_DllExport UCar_notifySwitchDayOrNight_In(UCar_notifySwitchDayOrNight_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_notifySwitchDayOrNight that will be copied.
     */
    user_cpp_DllExport UCar_notifySwitchDayOrNight_In &operator=(const UCar_notifySwitchDayOrNight_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_notifySwitchDayOrNight that will be copied.
     */
    user_cpp_DllExport UCar_notifySwitchDayOrNight_In &operator=(UCar_notifySwitchDayOrNight_In &&x);

    /*!
     * @brief This function sets a value in member dayNightMode
     * @param _dayNightMode New value for member dayNightMode
     */
    inline user_cpp_DllExport void dayNightMode(int32_t _dayNightMode) { m_dayNightMode = _dayNightMode; }

    /*!
     * @brief This function returns the value of member dayNightMode
     * @return Value of member dayNightMode
     */
    inline user_cpp_DllExport int32_t dayNightMode() const { return m_dayNightMode; }

    /*!
     * @brief This function returns a reference to member dayNightMode
     * @return Reference to member dayNightMode
     */
    inline user_cpp_DllExport int32_t &dayNightMode() { return m_dayNightMode; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_notifySwitchDayOrNight_In &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m_dayNightMode;
};
/*!
 * @brief This class encapsulates output paramaters for operation UCar::notifySwitchDayOrNight.
 * @ingroup UCAR
 */
class UCar_notifySwitchDayOrNight_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_notifySwitchDayOrNight_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_notifySwitchDayOrNight_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_notifySwitchDayOrNight_Out that will be copied.
     */
    user_cpp_DllExport UCar_notifySwitchDayOrNight_Out(const UCar_notifySwitchDayOrNight_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_notifySwitchDayOrNight_Out that will be copied.
     */
    user_cpp_DllExport UCar_notifySwitchDayOrNight_Out(UCar_notifySwitchDayOrNight_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_notifySwitchDayOrNight that will be copied.
     */
    user_cpp_DllExport UCar_notifySwitchDayOrNight_Out &operator=(const UCar_notifySwitchDayOrNight_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_notifySwitchDayOrNight that will be copied.
     */
    user_cpp_DllExport UCar_notifySwitchDayOrNight_Out &operator=(UCar_notifySwitchDayOrNight_Out &&x);

    /*!
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    inline user_cpp_DllExport void return_(bool _return_) { m_return_ = _return_; }

    /*!
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    inline user_cpp_DllExport bool return_() const { return m_return_; }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport bool &return_() { return m_return_; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_notifySwitchDayOrNight_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    bool m_return_;
};

/*!
 * @brief This class represents the structure UCar_notifySwitchDayOrNight_Result that can be used to send/receive
 * replies for the operation UCar::notifySwitchDayOrNight.
 *
 * @ingroup UCAR
 */
class UCar_notifySwitchDayOrNight_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_notifySwitchDayOrNight_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_notifySwitchDayOrNight_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_notifySwitchDayOrNight_Result that will be copied.
     */
    user_cpp_DllExport UCar_notifySwitchDayOrNight_Result(const UCar_notifySwitchDayOrNight_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_notifySwitchDayOrNight_Result that will be copied.
     */
    user_cpp_DllExport UCar_notifySwitchDayOrNight_Result(UCar_notifySwitchDayOrNight_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_notifySwitchDayOrNight that will be copied.
     */
    user_cpp_DllExport UCar_notifySwitchDayOrNight_Result &operator=(const UCar_notifySwitchDayOrNight_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_notifySwitchDayOrNight that will be copied.
     */
    user_cpp_DllExport UCar_notifySwitchDayOrNight_Result &operator=(UCar_notifySwitchDayOrNight_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_notifySwitchDayOrNight_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_notifySwitchDayOrNight_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_notifySwitchDayOrNight_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_notifySwitchDayOrNight_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_notifySwitchDayOrNight_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_notifySwitchDayOrNight_Out m_result;
};
/*!
 * @brief This class represents the structure UCar_awakenVoiceAssistant_In that can be used to send/receive requests
 * for the operation UCar::awakenVoiceAssistant.
 * @ingroup UCAR
 */
class UCar_awakenVoiceAssistant_In {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_awakenVoiceAssistant_In();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_awakenVoiceAssistant_In();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object UCar_awakenVoiceAssistant_In that will be copied.
     */
    user_cpp_DllExport UCar_awakenVoiceAssistant_In(const UCar_awakenVoiceAssistant_In &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_awakenVoiceAssistant_In that will be copied.
     */
    user_cpp_DllExport UCar_awakenVoiceAssistant_In(UCar_awakenVoiceAssistant_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_awakenVoiceAssistant that will be copied.
     */
    user_cpp_DllExport UCar_awakenVoiceAssistant_In &operator=(const UCar_awakenVoiceAssistant_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_awakenVoiceAssistant that will be copied.
     */
    user_cpp_DllExport UCar_awakenVoiceAssistant_In &operator=(UCar_awakenVoiceAssistant_In &&x);

    /*!
     * @brief This function copies the value in member bytes
     * @param _bytes New value to be copied in member bytes
     */
    inline user_cpp_DllExport void bytes(const ByteArray &_bytes) { m_bytes = _bytes; }

    /*!
     * @brief This function moves the value in member bytes
     * @param _bytes New value to be moved in member bytes
     */
    inline user_cpp_DllExport void bytes(ByteArray &&_bytes) { m_bytes = std::move(_bytes); }

    /*!
     * @brief This function returns a constant reference to member bytes
     * @return Constant reference to member bytes
     */
    inline user_cpp_DllExport const ByteArray &bytes() const { return m_bytes; }

    /*!
     * @brief This function returns a reference to member bytes
     * @return Reference to member bytes
     */
    inline user_cpp_DllExport ByteArray &bytes() { return m_bytes; }
    /*!
     * @brief This function copies the value in member audioFormat
     * @param _audioFormat New value to be copied in member audioFormat
     */
    inline user_cpp_DllExport void audioFormat(const AudioFormat &_audioFormat) { m_audioFormat = _audioFormat; }

    /*!
     * @brief This function moves the value in member audioFormat
     * @param _audioFormat New value to be moved in member audioFormat
     */
    inline user_cpp_DllExport void audioFormat(AudioFormat &&_audioFormat) { m_audioFormat = std::move(_audioFormat); }

    /*!
     * @brief This function returns a constant reference to member audioFormat
     * @return Constant reference to member audioFormat
     */
    inline user_cpp_DllExport const AudioFormat &audioFormat() const { return m_audioFormat; }

    /*!
     * @brief This function returns a reference to member audioFormat
     * @return Reference to member audioFormat
     */
    inline user_cpp_DllExport AudioFormat &audioFormat() { return m_audioFormat; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_awakenVoiceAssistant_In &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    ByteArray m_bytes;
    AudioFormat m_audioFormat;
};
/*!
 * @brief This class encapsulates output paramaters for operation UCar::awakenVoiceAssistant.
 * @ingroup UCAR
 */
class UCar_awakenVoiceAssistant_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_awakenVoiceAssistant_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_awakenVoiceAssistant_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_awakenVoiceAssistant_Out that will be copied.
     */
    user_cpp_DllExport UCar_awakenVoiceAssistant_Out(const UCar_awakenVoiceAssistant_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_awakenVoiceAssistant_Out that will be copied.
     */
    user_cpp_DllExport UCar_awakenVoiceAssistant_Out(UCar_awakenVoiceAssistant_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_awakenVoiceAssistant that will be copied.
     */
    user_cpp_DllExport UCar_awakenVoiceAssistant_Out &operator=(const UCar_awakenVoiceAssistant_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_awakenVoiceAssistant that will be copied.
     */
    user_cpp_DllExport UCar_awakenVoiceAssistant_Out &operator=(UCar_awakenVoiceAssistant_Out &&x);

    /*!
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    inline user_cpp_DllExport void return_(bool _return_) { m_return_ = _return_; }

    /*!
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    inline user_cpp_DllExport bool return_() const { return m_return_; }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport bool &return_() { return m_return_; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_awakenVoiceAssistant_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    bool m_return_;
};

/*!
 * @brief This class represents the structure UCar_awakenVoiceAssistant_Result that can be used to send/receive replies
 * for the operation UCar::awakenVoiceAssistant.
 *
 * @ingroup UCAR
 */
class UCar_awakenVoiceAssistant_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_awakenVoiceAssistant_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_awakenVoiceAssistant_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_awakenVoiceAssistant_Result that will be copied.
     */
    user_cpp_DllExport UCar_awakenVoiceAssistant_Result(const UCar_awakenVoiceAssistant_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_awakenVoiceAssistant_Result that will be copied.
     */
    user_cpp_DllExport UCar_awakenVoiceAssistant_Result(UCar_awakenVoiceAssistant_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_awakenVoiceAssistant that will be copied.
     */
    user_cpp_DllExport UCar_awakenVoiceAssistant_Result &operator=(const UCar_awakenVoiceAssistant_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_awakenVoiceAssistant that will be copied.
     */
    user_cpp_DllExport UCar_awakenVoiceAssistant_Result &operator=(UCar_awakenVoiceAssistant_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_awakenVoiceAssistant_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_awakenVoiceAssistant_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_awakenVoiceAssistant_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_awakenVoiceAssistant_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_awakenVoiceAssistant_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_awakenVoiceAssistant_Out m_result;
};
/*!
 * @brief This class represents the structure UCar_presetVendorCustomFields_In that can be used to send/receive requests
 * for the operation UCar::presetVendorCustomFields.
 * @ingroup UCAR
 */
class UCar_presetVendorCustomFields_In {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_presetVendorCustomFields_In();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_presetVendorCustomFields_In();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object UCar_presetVendorCustomFields_In that will be copied.
     */
    user_cpp_DllExport UCar_presetVendorCustomFields_In(const UCar_presetVendorCustomFields_In &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_presetVendorCustomFields_In that will be copied.
     */
    user_cpp_DllExport UCar_presetVendorCustomFields_In(UCar_presetVendorCustomFields_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_presetVendorCustomFields that will be copied.
     */
    user_cpp_DllExport UCar_presetVendorCustomFields_In &operator=(const UCar_presetVendorCustomFields_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_presetVendorCustomFields that will be copied.
     */
    user_cpp_DllExport UCar_presetVendorCustomFields_In &operator=(UCar_presetVendorCustomFields_In &&x);

    /*!
     * @brief This function copies the value in member bytes
     * @param _bytes New value to be copied in member bytes
     */
    inline user_cpp_DllExport void bytes(const ByteArray &_bytes) { m_bytes = _bytes; }

    /*!
     * @brief This function moves the value in member bytes
     * @param _bytes New value to be moved in member bytes
     */
    inline user_cpp_DllExport void bytes(ByteArray &&_bytes) { m_bytes = std::move(_bytes); }

    /*!
     * @brief This function returns a constant reference to member bytes
     * @return Constant reference to member bytes
     */
    inline user_cpp_DllExport const ByteArray &bytes() const { return m_bytes; }

    /*!
     * @brief This function returns a reference to member bytes
     * @return Reference to member bytes
     */
    inline user_cpp_DllExport ByteArray &bytes() { return m_bytes; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_presetVendorCustomFields_In &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    ByteArray m_bytes;
};
/*!
 * @brief This class encapsulates output paramaters for operation UCar::presetVendorCustomFields.
 * @ingroup UCAR
 */
class UCar_presetVendorCustomFields_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_presetVendorCustomFields_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_presetVendorCustomFields_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_presetVendorCustomFields_Out that will be copied.
     */
    user_cpp_DllExport UCar_presetVendorCustomFields_Out(const UCar_presetVendorCustomFields_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_presetVendorCustomFields_Out that will be copied.
     */
    user_cpp_DllExport UCar_presetVendorCustomFields_Out(UCar_presetVendorCustomFields_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_presetVendorCustomFields that will be copied.
     */
    user_cpp_DllExport UCar_presetVendorCustomFields_Out &operator=(const UCar_presetVendorCustomFields_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_presetVendorCustomFields that will be copied.
     */
    user_cpp_DllExport UCar_presetVendorCustomFields_Out &operator=(UCar_presetVendorCustomFields_Out &&x);

    /*!
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    inline user_cpp_DllExport void return_(bool _return_) { m_return_ = _return_; }

    /*!
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    inline user_cpp_DllExport bool return_() const { return m_return_; }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport bool &return_() { return m_return_; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_presetVendorCustomFields_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    bool m_return_;
};

/*!
 * @brief This class represents the structure UCar_presetVendorCustomFields_Result that can be used to send/receive
 * replies for the operation UCar::presetVendorCustomFields.
 *
 * @ingroup UCAR
 */
class UCar_presetVendorCustomFields_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_presetVendorCustomFields_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_presetVendorCustomFields_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_presetVendorCustomFields_Result that will be copied.
     */
    user_cpp_DllExport UCar_presetVendorCustomFields_Result(const UCar_presetVendorCustomFields_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_presetVendorCustomFields_Result that will be copied.
     */
    user_cpp_DllExport UCar_presetVendorCustomFields_Result(UCar_presetVendorCustomFields_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_presetVendorCustomFields that will be copied.
     */
    user_cpp_DllExport UCar_presetVendorCustomFields_Result &operator=(const UCar_presetVendorCustomFields_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_presetVendorCustomFields that will be copied.
     */
    user_cpp_DllExport UCar_presetVendorCustomFields_Result &operator=(UCar_presetVendorCustomFields_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_presetVendorCustomFields_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_presetVendorCustomFields_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_presetVendorCustomFields_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_presetVendorCustomFields_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_presetVendorCustomFields_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_presetVendorCustomFields_Out m_result;
};
/*!
 * @brief This class represents the structure UCar_presetConnectMode_In that can be used to send/receive requests
 * for the operation UCar::presetConnectMode.
 * @ingroup UCAR
 */
class UCar_presetConnectMode_In {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_presetConnectMode_In();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_presetConnectMode_In();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object UCar_presetConnectMode_In that will be copied.
     */
    user_cpp_DllExport UCar_presetConnectMode_In(const UCar_presetConnectMode_In &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_presetConnectMode_In that will be copied.
     */
    user_cpp_DllExport UCar_presetConnectMode_In(UCar_presetConnectMode_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_presetConnectMode that will be copied.
     */
    user_cpp_DllExport UCar_presetConnectMode_In &operator=(const UCar_presetConnectMode_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_presetConnectMode that will be copied.
     */
    user_cpp_DllExport UCar_presetConnectMode_In &operator=(UCar_presetConnectMode_In &&x);

    /*!
     * @brief This function sets a value in member connectMode
     * @param _connectMode New value for member connectMode
     */
    inline user_cpp_DllExport void connectMode(int32_t _connectMode) { m_connectMode = _connectMode; }

    /*!
     * @brief This function returns the value of member connectMode
     * @return Value of member connectMode
     */
    inline user_cpp_DllExport int32_t connectMode() const { return m_connectMode; }

    /*!
     * @brief This function returns a reference to member connectMode
     * @return Reference to member connectMode
     */
    inline user_cpp_DllExport int32_t &connectMode() { return m_connectMode; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_presetConnectMode_In &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m_connectMode;
};
/*!
 * @brief This class encapsulates output paramaters for operation UCar::presetConnectMode.
 * @ingroup UCAR
 */
class UCar_presetConnectMode_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_presetConnectMode_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_presetConnectMode_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_presetConnectMode_Out that will be copied.
     */
    user_cpp_DllExport UCar_presetConnectMode_Out(const UCar_presetConnectMode_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_presetConnectMode_Out that will be copied.
     */
    user_cpp_DllExport UCar_presetConnectMode_Out(UCar_presetConnectMode_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_presetConnectMode that will be copied.
     */
    user_cpp_DllExport UCar_presetConnectMode_Out &operator=(const UCar_presetConnectMode_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_presetConnectMode that will be copied.
     */
    user_cpp_DllExport UCar_presetConnectMode_Out &operator=(UCar_presetConnectMode_Out &&x);

    /*!
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    inline user_cpp_DllExport void return_(bool _return_) { m_return_ = _return_; }

    /*!
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    inline user_cpp_DllExport bool return_() const { return m_return_; }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport bool &return_() { return m_return_; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_presetConnectMode_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    bool m_return_;
};

/*!
 * @brief This class represents the structure UCar_presetConnectMode_Result that can be used to send/receive replies
 * for the operation UCar::presetConnectMode.
 *
 * @ingroup UCAR
 */
class UCar_presetConnectMode_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_presetConnectMode_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_presetConnectMode_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_presetConnectMode_Result that will be copied.
     */
    user_cpp_DllExport UCar_presetConnectMode_Result(const UCar_presetConnectMode_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_presetConnectMode_Result that will be copied.
     */
    user_cpp_DllExport UCar_presetConnectMode_Result(UCar_presetConnectMode_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_presetConnectMode that will be copied.
     */
    user_cpp_DllExport UCar_presetConnectMode_Result &operator=(const UCar_presetConnectMode_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_presetConnectMode that will be copied.
     */
    user_cpp_DllExport UCar_presetConnectMode_Result &operator=(UCar_presetConnectMode_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_presetConnectMode_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_presetConnectMode_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_presetConnectMode_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_presetConnectMode_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_presetConnectMode_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_presetConnectMode_Out m_result;
};

/*!
 * @brief This class encapsulates output paramaters for operation UCar::videoInitialized.
 * @ingroup UCAR
 */
class UCar_videoInitialized_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_videoInitialized_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_videoInitialized_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_videoInitialized_Out that will be copied.
     */
    user_cpp_DllExport UCar_videoInitialized_Out(const UCar_videoInitialized_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_videoInitialized_Out that will be copied.
     */
    user_cpp_DllExport UCar_videoInitialized_Out(UCar_videoInitialized_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_videoInitialized that will be copied.
     */
    user_cpp_DllExport UCar_videoInitialized_Out &operator=(const UCar_videoInitialized_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_videoInitialized that will be copied.
     */
    user_cpp_DllExport UCar_videoInitialized_Out &operator=(UCar_videoInitialized_Out &&x);

    /*!
     * @brief This function sets a value in member type
     * @param _type New value for member type
     */
    inline user_cpp_DllExport void type(int32_t _type) { m_type = _type; }

    /*!
     * @brief This function returns the value of member type
     * @return Value of member type
     */
    inline user_cpp_DllExport int32_t type() const { return m_type; }

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    inline user_cpp_DllExport int32_t &type() { return m_type; }
    /*!
     * @brief This function copies the value in member videFormat
     * @param _videFormat New value to be copied in member videFormat
     */
    inline user_cpp_DllExport void videFormat(const VideoFormat &_videFormat) { m_videFormat = _videFormat; }

    /*!
     * @brief This function moves the value in member videFormat
     * @param _videFormat New value to be moved in member videFormat
     */
    inline user_cpp_DllExport void videFormat(VideoFormat &&_videFormat) { m_videFormat = std::move(_videFormat); }

    /*!
     * @brief This function returns a constant reference to member videFormat
     * @return Constant reference to member videFormat
     */
    inline user_cpp_DllExport const VideoFormat &videFormat() const { return m_videFormat; }

    /*!
     * @brief This function returns a reference to member videFormat
     * @return Reference to member videFormat
     */
    inline user_cpp_DllExport VideoFormat &videFormat() { return m_videFormat; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_videoInitialized_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m_type;
    VideoFormat m_videFormat;
};

/*!
 * @brief This class represents the structure UCar_videoInitialized_Result that can be used to send/receive replies
 * for the operation UCar::videoInitialized.
 *
 * @ingroup UCAR
 */
class UCar_videoInitialized_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_videoInitialized_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_videoInitialized_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_videoInitialized_Result that will be copied.
     */
    user_cpp_DllExport UCar_videoInitialized_Result(const UCar_videoInitialized_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_videoInitialized_Result that will be copied.
     */
    user_cpp_DllExport UCar_videoInitialized_Result(UCar_videoInitialized_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_videoInitialized that will be copied.
     */
    user_cpp_DllExport UCar_videoInitialized_Result &operator=(const UCar_videoInitialized_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_videoInitialized that will be copied.
     */
    user_cpp_DllExport UCar_videoInitialized_Result &operator=(UCar_videoInitialized_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_videoInitialized_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_videoInitialized_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_videoInitialized_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_videoInitialized_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_videoInitialized_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_videoInitialized_Out m_result;
};

/*!
 * @brief This class encapsulates output paramaters for operation UCar::videoDataReceived.
 * @ingroup UCAR
 */
class UCar_videoDataReceived_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_videoDataReceived_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_videoDataReceived_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_videoDataReceived_Out that will be copied.
     */
    user_cpp_DllExport UCar_videoDataReceived_Out(const UCar_videoDataReceived_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_videoDataReceived_Out that will be copied.
     */
    user_cpp_DllExport UCar_videoDataReceived_Out(UCar_videoDataReceived_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_videoDataReceived that will be copied.
     */
    user_cpp_DllExport UCar_videoDataReceived_Out &operator=(const UCar_videoDataReceived_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_videoDataReceived that will be copied.
     */
    user_cpp_DllExport UCar_videoDataReceived_Out &operator=(UCar_videoDataReceived_Out &&x);

    /*!
     * @brief This function sets a value in member type
     * @param _type New value for member type
     */
    inline user_cpp_DllExport void type(int32_t _type) { m_type = _type; }

    /*!
     * @brief This function returns the value of member type
     * @return Value of member type
     */
    inline user_cpp_DllExport int32_t type() const { return m_type; }

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    inline user_cpp_DllExport int32_t &type() { return m_type; }
    /*!
     * @brief This function sets a value in member size
     * @param _size New value for member size
     */
    inline user_cpp_DllExport void size(int32_t _size) { m_size = _size; }

    /*!
     * @brief This function returns the value of member size
     * @return Value of member size
     */
    inline user_cpp_DllExport int32_t size() const { return m_size; }

    /*!
     * @brief This function returns a reference to member size
     * @return Reference to member size
     */
    inline user_cpp_DllExport int32_t &size() { return m_size; }
    /*!
     * @brief This function copies the value in member byte
     * @param _byte New value to be copied in member byte
     */
    inline user_cpp_DllExport void byte(const ByteArray &_byte) { m_byte = _byte; }

    /*!
     * @brief This function moves the value in member byte
     * @param _byte New value to be moved in member byte
     */
    inline user_cpp_DllExport void byte(ByteArray &&_byte) { m_byte = std::move(_byte); }

    /*!
     * @brief This function returns a constant reference to member byte
     * @return Constant reference to member byte
     */
    inline user_cpp_DllExport const ByteArray &byte() const { return m_byte; }

    /*!
     * @brief This function returns a reference to member byte
     * @return Reference to member byte
     */
    inline user_cpp_DllExport ByteArray &byte() { return m_byte; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_videoDataReceived_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m_type;
    int32_t m_size;
    ByteArray m_byte;
};

/*!
 * @brief This class represents the structure UCar_videoDataReceived_Result that can be used to send/receive replies
 * for the operation UCar::videoDataReceived.
 *
 * @ingroup UCAR
 */
class UCar_videoDataReceived_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_videoDataReceived_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_videoDataReceived_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_videoDataReceived_Result that will be copied.
     */
    user_cpp_DllExport UCar_videoDataReceived_Result(const UCar_videoDataReceived_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_videoDataReceived_Result that will be copied.
     */
    user_cpp_DllExport UCar_videoDataReceived_Result(UCar_videoDataReceived_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_videoDataReceived that will be copied.
     */
    user_cpp_DllExport UCar_videoDataReceived_Result &operator=(const UCar_videoDataReceived_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_videoDataReceived that will be copied.
     */
    user_cpp_DllExport UCar_videoDataReceived_Result &operator=(UCar_videoDataReceived_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_videoDataReceived_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_videoDataReceived_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_videoDataReceived_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_videoDataReceived_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_videoDataReceived_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_videoDataReceived_Out m_result;
};

/*!
 * @brief This class encapsulates output paramaters for operation UCar::requestGotoHUDesktop.
 * @ingroup UCAR
 */
class UCar_requestGotoHUDesktop_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_requestGotoHUDesktop_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_requestGotoHUDesktop_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_requestGotoHUDesktop_Out that will be copied.
     */
    user_cpp_DllExport UCar_requestGotoHUDesktop_Out(const UCar_requestGotoHUDesktop_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_requestGotoHUDesktop_Out that will be copied.
     */
    user_cpp_DllExport UCar_requestGotoHUDesktop_Out(UCar_requestGotoHUDesktop_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_requestGotoHUDesktop that will be copied.
     */
    user_cpp_DllExport UCar_requestGotoHUDesktop_Out &operator=(const UCar_requestGotoHUDesktop_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_requestGotoHUDesktop that will be copied.
     */
    user_cpp_DllExport UCar_requestGotoHUDesktop_Out &operator=(UCar_requestGotoHUDesktop_Out &&x);

    inline user_cpp_DllExport void dummy(eprosima::rpc::protocol::dds::rpc::UnusedMember _dummy) { m_dummy = _dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember dummy() const { return m_dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember &dummy() { return m_dummy; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_requestGotoHUDesktop_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    eprosima::rpc::protocol::dds::rpc::UnusedMember m_dummy;
};

/*!
 * @brief This class represents the structure UCar_requestGotoHUDesktop_Result that can be used to send/receive replies
 * for the operation UCar::requestGotoHUDesktop.
 *
 * @ingroup UCAR
 */
class UCar_requestGotoHUDesktop_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_requestGotoHUDesktop_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_requestGotoHUDesktop_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_requestGotoHUDesktop_Result that will be copied.
     */
    user_cpp_DllExport UCar_requestGotoHUDesktop_Result(const UCar_requestGotoHUDesktop_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_requestGotoHUDesktop_Result that will be copied.
     */
    user_cpp_DllExport UCar_requestGotoHUDesktop_Result(UCar_requestGotoHUDesktop_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_requestGotoHUDesktop that will be copied.
     */
    user_cpp_DllExport UCar_requestGotoHUDesktop_Result &operator=(const UCar_requestGotoHUDesktop_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_requestGotoHUDesktop that will be copied.
     */
    user_cpp_DllExport UCar_requestGotoHUDesktop_Result &operator=(UCar_requestGotoHUDesktop_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_requestGotoHUDesktop_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_requestGotoHUDesktop_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_requestGotoHUDesktop_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_requestGotoHUDesktop_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_requestGotoHUDesktop_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_requestGotoHUDesktop_Out m_result;
};

/*!
 * @brief This class encapsulates output paramaters for operation UCar::audioStateChanged.
 * @ingroup UCAR
 */
class UCar_audioStateChanged_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_audioStateChanged_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_audioStateChanged_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_audioStateChanged_Out that will be copied.
     */
    user_cpp_DllExport UCar_audioStateChanged_Out(const UCar_audioStateChanged_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_audioStateChanged_Out that will be copied.
     */
    user_cpp_DllExport UCar_audioStateChanged_Out(UCar_audioStateChanged_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_audioStateChanged that will be copied.
     */
    user_cpp_DllExport UCar_audioStateChanged_Out &operator=(const UCar_audioStateChanged_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_audioStateChanged that will be copied.
     */
    user_cpp_DllExport UCar_audioStateChanged_Out &operator=(UCar_audioStateChanged_Out &&x);

    /*!
     * @brief This function sets a value in member var2
     * @param _var2 New value for member var2
     */
    inline user_cpp_DllExport void var2(int32_t _var2) { m_var2 = _var2; }

    /*!
     * @brief This function returns the value of member var2
     * @return Value of member var2
     */
    inline user_cpp_DllExport int32_t var2() const { return m_var2; }

    /*!
     * @brief This function returns a reference to member var2
     * @return Reference to member var2
     */
    inline user_cpp_DllExport int32_t &var2() { return m_var2; }
    /*!
     * @brief This function copies the value in member audioFormat
     * @param _audioFormat New value to be copied in member audioFormat
     */
    inline user_cpp_DllExport void audioFormat(const AudioFormat &_audioFormat) { m_audioFormat = _audioFormat; }

    /*!
     * @brief This function moves the value in member audioFormat
     * @param _audioFormat New value to be moved in member audioFormat
     */
    inline user_cpp_DllExport void audioFormat(AudioFormat &&_audioFormat) { m_audioFormat = std::move(_audioFormat); }

    /*!
     * @brief This function returns a constant reference to member audioFormat
     * @return Constant reference to member audioFormat
     */
    inline user_cpp_DllExport const AudioFormat &audioFormat() const { return m_audioFormat; }

    /*!
     * @brief This function returns a reference to member audioFormat
     * @return Reference to member audioFormat
     */
    inline user_cpp_DllExport AudioFormat &audioFormat() { return m_audioFormat; }
    /*!
     * @brief This function sets a value in member playerState
     * @param _playerState New value for member playerState
     */
    inline user_cpp_DllExport void playerState(int32_t _playerState) { m_playerState = _playerState; }

    /*!
     * @brief This function returns the value of member playerState
     * @return Value of member playerState
     */
    inline user_cpp_DllExport int32_t playerState() const { return m_playerState; }

    /*!
     * @brief This function returns a reference to member playerState
     * @return Reference to member playerState
     */
    inline user_cpp_DllExport int32_t &playerState() { return m_playerState; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_audioStateChanged_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m_var2;
    AudioFormat m_audioFormat;
    int32_t m_playerState;
};

/*!
 * @brief This class represents the structure UCar_audioStateChanged_Result that can be used to send/receive replies
 * for the operation UCar::audioStateChanged.
 *
 * @ingroup UCAR
 */
class UCar_audioStateChanged_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_audioStateChanged_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_audioStateChanged_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_audioStateChanged_Result that will be copied.
     */
    user_cpp_DllExport UCar_audioStateChanged_Result(const UCar_audioStateChanged_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_audioStateChanged_Result that will be copied.
     */
    user_cpp_DllExport UCar_audioStateChanged_Result(UCar_audioStateChanged_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_audioStateChanged that will be copied.
     */
    user_cpp_DllExport UCar_audioStateChanged_Result &operator=(const UCar_audioStateChanged_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_audioStateChanged that will be copied.
     */
    user_cpp_DllExport UCar_audioStateChanged_Result &operator=(UCar_audioStateChanged_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_audioStateChanged_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_audioStateChanged_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_audioStateChanged_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_audioStateChanged_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_audioStateChanged_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_audioStateChanged_Out m_result;
};

/*!
 * @brief This class encapsulates output paramaters for operation UCar::audioDataReceived.
 * @ingroup UCAR
 */
class UCar_audioDataReceived_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_audioDataReceived_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_audioDataReceived_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_audioDataReceived_Out that will be copied.
     */
    user_cpp_DllExport UCar_audioDataReceived_Out(const UCar_audioDataReceived_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_audioDataReceived_Out that will be copied.
     */
    user_cpp_DllExport UCar_audioDataReceived_Out(UCar_audioDataReceived_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_audioDataReceived that will be copied.
     */
    user_cpp_DllExport UCar_audioDataReceived_Out &operator=(const UCar_audioDataReceived_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_audioDataReceived that will be copied.
     */
    user_cpp_DllExport UCar_audioDataReceived_Out &operator=(UCar_audioDataReceived_Out &&x);

    /*!
     * @brief This function sets a value in member var2
     * @param _var2 New value for member var2
     */
    inline user_cpp_DllExport void var2(int32_t _var2) { m_var2 = _var2; }

    /*!
     * @brief This function returns the value of member var2
     * @return Value of member var2
     */
    inline user_cpp_DllExport int32_t var2() const { return m_var2; }

    /*!
     * @brief This function returns a reference to member var2
     * @return Reference to member var2
     */
    inline user_cpp_DllExport int32_t &var2() { return m_var2; }
    /*!
     * @brief This function sets a value in member var3
     * @param _var3 New value for member var3
     */
    inline user_cpp_DllExport void var3(int32_t _var3) { m_var3 = _var3; }

    /*!
     * @brief This function returns the value of member var3
     * @return Value of member var3
     */
    inline user_cpp_DllExport int32_t var3() const { return m_var3; }

    /*!
     * @brief This function returns a reference to member var3
     * @return Reference to member var3
     */
    inline user_cpp_DllExport int32_t &var3() { return m_var3; }
    /*!
     * @brief This function copies the value in member var4
     * @param _var4 New value to be copied in member var4
     */
    inline user_cpp_DllExport void var4(const ByteArray &_var4) { m_var4 = _var4; }

    /*!
     * @brief This function moves the value in member var4
     * @param _var4 New value to be moved in member var4
     */
    inline user_cpp_DllExport void var4(ByteArray &&_var4) { m_var4 = std::move(_var4); }

    /*!
     * @brief This function returns a constant reference to member var4
     * @return Constant reference to member var4
     */
    inline user_cpp_DllExport const ByteArray &var4() const { return m_var4; }

    /*!
     * @brief This function returns a reference to member var4
     * @return Reference to member var4
     */
    inline user_cpp_DllExport ByteArray &var4() { return m_var4; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_audioDataReceived_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m_var2;
    int32_t m_var3;
    ByteArray m_var4;
};

/*!
 * @brief This class represents the structure UCar_audioDataReceived_Result that can be used to send/receive replies
 * for the operation UCar::audioDataReceived.
 *
 * @ingroup UCAR
 */
class UCar_audioDataReceived_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_audioDataReceived_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_audioDataReceived_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_audioDataReceived_Result that will be copied.
     */
    user_cpp_DllExport UCar_audioDataReceived_Result(const UCar_audioDataReceived_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_audioDataReceived_Result that will be copied.
     */
    user_cpp_DllExport UCar_audioDataReceived_Result(UCar_audioDataReceived_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_audioDataReceived that will be copied.
     */
    user_cpp_DllExport UCar_audioDataReceived_Result &operator=(const UCar_audioDataReceived_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_audioDataReceived that will be copied.
     */
    user_cpp_DllExport UCar_audioDataReceived_Result &operator=(UCar_audioDataReceived_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_audioDataReceived_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_audioDataReceived_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_audioDataReceived_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_audioDataReceived_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_audioDataReceived_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_audioDataReceived_Out m_result;
};

/*!
 * @brief This class encapsulates output paramaters for operation UCar::musicInfoReceived.
 * @ingroup UCAR
 */
class UCar_musicInfoReceived_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_musicInfoReceived_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_musicInfoReceived_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_musicInfoReceived_Out that will be copied.
     */
    user_cpp_DllExport UCar_musicInfoReceived_Out(const UCar_musicInfoReceived_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_musicInfoReceived_Out that will be copied.
     */
    user_cpp_DllExport UCar_musicInfoReceived_Out(UCar_musicInfoReceived_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_musicInfoReceived that will be copied.
     */
    user_cpp_DllExport UCar_musicInfoReceived_Out &operator=(const UCar_musicInfoReceived_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_musicInfoReceived that will be copied.
     */
    user_cpp_DllExport UCar_musicInfoReceived_Out &operator=(UCar_musicInfoReceived_Out &&x);

    /*!
     * @brief This function copies the value in member var2
     * @param _var2 New value to be copied in member var2
     */
    inline user_cpp_DllExport void var2(const MusicInfo &_var2) { m_var2 = _var2; }

    /*!
     * @brief This function moves the value in member var2
     * @param _var2 New value to be moved in member var2
     */
    inline user_cpp_DllExport void var2(MusicInfo &&_var2) { m_var2 = std::move(_var2); }

    /*!
     * @brief This function returns a constant reference to member var2
     * @return Constant reference to member var2
     */
    inline user_cpp_DllExport const MusicInfo &var2() const { return m_var2; }

    /*!
     * @brief This function returns a reference to member var2
     * @return Reference to member var2
     */
    inline user_cpp_DllExport MusicInfo &var2() { return m_var2; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_musicInfoReceived_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    MusicInfo m_var2;
};

/*!
 * @brief This class represents the structure UCar_musicInfoReceived_Result that can be used to send/receive replies
 * for the operation UCar::musicInfoReceived.
 *
 * @ingroup UCAR
 */
class UCar_musicInfoReceived_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_musicInfoReceived_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_musicInfoReceived_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_musicInfoReceived_Result that will be copied.
     */
    user_cpp_DllExport UCar_musicInfoReceived_Result(const UCar_musicInfoReceived_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_musicInfoReceived_Result that will be copied.
     */
    user_cpp_DllExport UCar_musicInfoReceived_Result(UCar_musicInfoReceived_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_musicInfoReceived that will be copied.
     */
    user_cpp_DllExport UCar_musicInfoReceived_Result &operator=(const UCar_musicInfoReceived_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_musicInfoReceived that will be copied.
     */
    user_cpp_DllExport UCar_musicInfoReceived_Result &operator=(UCar_musicInfoReceived_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_musicInfoReceived_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_musicInfoReceived_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_musicInfoReceived_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_musicInfoReceived_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_musicInfoReceived_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_musicInfoReceived_Out m_result;
};

/*!
 * @brief This class encapsulates output paramaters for operation UCar::navigationInfoReceived.
 * @ingroup UCAR
 */
class UCar_navigationInfoReceived_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_navigationInfoReceived_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_navigationInfoReceived_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_navigationInfoReceived_Out that will be copied.
     */
    user_cpp_DllExport UCar_navigationInfoReceived_Out(const UCar_navigationInfoReceived_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_navigationInfoReceived_Out that will be copied.
     */
    user_cpp_DllExport UCar_navigationInfoReceived_Out(UCar_navigationInfoReceived_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_navigationInfoReceived that will be copied.
     */
    user_cpp_DllExport UCar_navigationInfoReceived_Out &operator=(const UCar_navigationInfoReceived_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_navigationInfoReceived that will be copied.
     */
    user_cpp_DllExport UCar_navigationInfoReceived_Out &operator=(UCar_navigationInfoReceived_Out &&x);

    /*!
     * @brief This function copies the value in member var2
     * @param _var2 New value to be copied in member var2
     */
    inline user_cpp_DllExport void var2(const NavigationInfo &_var2) { m_var2 = _var2; }

    /*!
     * @brief This function moves the value in member var2
     * @param _var2 New value to be moved in member var2
     */
    inline user_cpp_DllExport void var2(NavigationInfo &&_var2) { m_var2 = std::move(_var2); }

    /*!
     * @brief This function returns a constant reference to member var2
     * @return Constant reference to member var2
     */
    inline user_cpp_DllExport const NavigationInfo &var2() const { return m_var2; }

    /*!
     * @brief This function returns a reference to member var2
     * @return Reference to member var2
     */
    inline user_cpp_DllExport NavigationInfo &var2() { return m_var2; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_navigationInfoReceived_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    NavigationInfo m_var2;
};

/*!
 * @brief This class represents the structure UCar_navigationInfoReceived_Result that can be used to send/receive
 * replies for the operation UCar::navigationInfoReceived.
 *
 * @ingroup UCAR
 */
class UCar_navigationInfoReceived_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_navigationInfoReceived_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_navigationInfoReceived_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_navigationInfoReceived_Result that will be copied.
     */
    user_cpp_DllExport UCar_navigationInfoReceived_Result(const UCar_navigationInfoReceived_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_navigationInfoReceived_Result that will be copied.
     */
    user_cpp_DllExport UCar_navigationInfoReceived_Result(UCar_navigationInfoReceived_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_navigationInfoReceived that will be copied.
     */
    user_cpp_DllExport UCar_navigationInfoReceived_Result &operator=(const UCar_navigationInfoReceived_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_navigationInfoReceived that will be copied.
     */
    user_cpp_DllExport UCar_navigationInfoReceived_Result &operator=(UCar_navigationInfoReceived_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_navigationInfoReceived_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_navigationInfoReceived_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_navigationInfoReceived_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_navigationInfoReceived_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_navigationInfoReceived_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_navigationInfoReceived_Out m_result;
};

/*!
 * @brief This class encapsulates output paramaters for operation UCar::phoneStateInfoReceived.
 * @ingroup UCAR
 */
class UCar_phoneStateInfoReceived_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_phoneStateInfoReceived_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_phoneStateInfoReceived_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_phoneStateInfoReceived_Out that will be copied.
     */
    user_cpp_DllExport UCar_phoneStateInfoReceived_Out(const UCar_phoneStateInfoReceived_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_phoneStateInfoReceived_Out that will be copied.
     */
    user_cpp_DllExport UCar_phoneStateInfoReceived_Out(UCar_phoneStateInfoReceived_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_phoneStateInfoReceived that will be copied.
     */
    user_cpp_DllExport UCar_phoneStateInfoReceived_Out &operator=(const UCar_phoneStateInfoReceived_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_phoneStateInfoReceived that will be copied.
     */
    user_cpp_DllExport UCar_phoneStateInfoReceived_Out &operator=(UCar_phoneStateInfoReceived_Out &&x);

    /*!
     * @brief This function copies the value in member var2
     * @param _var2 New value to be copied in member var2
     */
    inline user_cpp_DllExport void var2(const PhoneStateInfo &_var2) { m_var2 = _var2; }

    /*!
     * @brief This function moves the value in member var2
     * @param _var2 New value to be moved in member var2
     */
    inline user_cpp_DllExport void var2(PhoneStateInfo &&_var2) { m_var2 = std::move(_var2); }

    /*!
     * @brief This function returns a constant reference to member var2
     * @return Constant reference to member var2
     */
    inline user_cpp_DllExport const PhoneStateInfo &var2() const { return m_var2; }

    /*!
     * @brief This function returns a reference to member var2
     * @return Reference to member var2
     */
    inline user_cpp_DllExport PhoneStateInfo &var2() { return m_var2; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_phoneStateInfoReceived_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    PhoneStateInfo m_var2;
};

/*!
 * @brief This class represents the structure UCar_phoneStateInfoReceived_Result that can be used to send/receive
 * replies for the operation UCar::phoneStateInfoReceived.
 *
 * @ingroup UCAR
 */
class UCar_phoneStateInfoReceived_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_phoneStateInfoReceived_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_phoneStateInfoReceived_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_phoneStateInfoReceived_Result that will be copied.
     */
    user_cpp_DllExport UCar_phoneStateInfoReceived_Result(const UCar_phoneStateInfoReceived_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_phoneStateInfoReceived_Result that will be copied.
     */
    user_cpp_DllExport UCar_phoneStateInfoReceived_Result(UCar_phoneStateInfoReceived_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_phoneStateInfoReceived that will be copied.
     */
    user_cpp_DllExport UCar_phoneStateInfoReceived_Result &operator=(const UCar_phoneStateInfoReceived_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_phoneStateInfoReceived that will be copied.
     */
    user_cpp_DllExport UCar_phoneStateInfoReceived_Result &operator=(UCar_phoneStateInfoReceived_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_phoneStateInfoReceived_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_phoneStateInfoReceived_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_phoneStateInfoReceived_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_phoneStateInfoReceived_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_phoneStateInfoReceived_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_phoneStateInfoReceived_Out m_result;
};

/*!
 * @brief This class encapsulates output paramaters for operation UCar::micRecordRequest.
 * @ingroup UCAR
 */
class UCar_micRecordRequest_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_micRecordRequest_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_micRecordRequest_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_micRecordRequest_Out that will be copied.
     */
    user_cpp_DllExport UCar_micRecordRequest_Out(const UCar_micRecordRequest_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_micRecordRequest_Out that will be copied.
     */
    user_cpp_DllExport UCar_micRecordRequest_Out(UCar_micRecordRequest_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_micRecordRequest that will be copied.
     */
    user_cpp_DllExport UCar_micRecordRequest_Out &operator=(const UCar_micRecordRequest_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_micRecordRequest that will be copied.
     */
    user_cpp_DllExport UCar_micRecordRequest_Out &operator=(UCar_micRecordRequest_Out &&x);

    /*!
     * @brief This function copies the value in member var2
     * @param _var2 New value to be copied in member var2
     */
    inline user_cpp_DllExport void var2(const AudioFormat &_var2) { m_var2 = _var2; }

    /*!
     * @brief This function moves the value in member var2
     * @param _var2 New value to be moved in member var2
     */
    inline user_cpp_DllExport void var2(AudioFormat &&_var2) { m_var2 = std::move(_var2); }

    /*!
     * @brief This function returns a constant reference to member var2
     * @return Constant reference to member var2
     */
    inline user_cpp_DllExport const AudioFormat &var2() const { return m_var2; }

    /*!
     * @brief This function returns a reference to member var2
     * @return Reference to member var2
     */
    inline user_cpp_DllExport AudioFormat &var2() { return m_var2; }
    /*!
     * @brief This function sets a value in member var3
     * @param _var3 New value for member var3
     */
    inline user_cpp_DllExport void var3(bool _var3) { m_var3 = _var3; }

    /*!
     * @brief This function returns the value of member var3
     * @return Value of member var3
     */
    inline user_cpp_DllExport bool var3() const { return m_var3; }

    /*!
     * @brief This function returns a reference to member var3
     * @return Reference to member var3
     */
    inline user_cpp_DllExport bool &var3() { return m_var3; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_micRecordRequest_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    AudioFormat m_var2;
    bool m_var3;
};

/*!
 * @brief This class represents the structure UCar_micRecordRequest_Result that can be used to send/receive replies
 * for the operation UCar::micRecordRequest.
 *
 * @ingroup UCAR
 */
class UCar_micRecordRequest_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_micRecordRequest_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_micRecordRequest_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_micRecordRequest_Result that will be copied.
     */
    user_cpp_DllExport UCar_micRecordRequest_Result(const UCar_micRecordRequest_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_micRecordRequest_Result that will be copied.
     */
    user_cpp_DllExport UCar_micRecordRequest_Result(UCar_micRecordRequest_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_micRecordRequest that will be copied.
     */
    user_cpp_DllExport UCar_micRecordRequest_Result &operator=(const UCar_micRecordRequest_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_micRecordRequest that will be copied.
     */
    user_cpp_DllExport UCar_micRecordRequest_Result &operator=(UCar_micRecordRequest_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_micRecordRequest_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_micRecordRequest_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_micRecordRequest_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_micRecordRequest_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_micRecordRequest_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_micRecordRequest_Out m_result;
};

/*!
 * @brief This class encapsulates output paramaters for operation UCar::userInterventionNeeded.
 * @ingroup UCAR
 */
class UCar_userInterventionNeeded_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_userInterventionNeeded_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_userInterventionNeeded_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_userInterventionNeeded_Out that will be copied.
     */
    user_cpp_DllExport UCar_userInterventionNeeded_Out(const UCar_userInterventionNeeded_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_userInterventionNeeded_Out that will be copied.
     */
    user_cpp_DllExport UCar_userInterventionNeeded_Out(UCar_userInterventionNeeded_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_userInterventionNeeded that will be copied.
     */
    user_cpp_DllExport UCar_userInterventionNeeded_Out &operator=(const UCar_userInterventionNeeded_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_userInterventionNeeded that will be copied.
     */
    user_cpp_DllExport UCar_userInterventionNeeded_Out &operator=(UCar_userInterventionNeeded_Out &&x);

    inline user_cpp_DllExport void dummy(eprosima::rpc::protocol::dds::rpc::UnusedMember _dummy) { m_dummy = _dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember dummy() const { return m_dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember &dummy() { return m_dummy; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_userInterventionNeeded_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    eprosima::rpc::protocol::dds::rpc::UnusedMember m_dummy;
};

/*!
 * @brief This class represents the structure UCar_userInterventionNeeded_Result that can be used to send/receive
 * replies for the operation UCar::userInterventionNeeded.
 *
 * @ingroup UCAR
 */
class UCar_userInterventionNeeded_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_userInterventionNeeded_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_userInterventionNeeded_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_userInterventionNeeded_Result that will be copied.
     */
    user_cpp_DllExport UCar_userInterventionNeeded_Result(const UCar_userInterventionNeeded_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_userInterventionNeeded_Result that will be copied.
     */
    user_cpp_DllExport UCar_userInterventionNeeded_Result(UCar_userInterventionNeeded_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_userInterventionNeeded that will be copied.
     */
    user_cpp_DllExport UCar_userInterventionNeeded_Result &operator=(const UCar_userInterventionNeeded_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_userInterventionNeeded that will be copied.
     */
    user_cpp_DllExport UCar_userInterventionNeeded_Result &operator=(UCar_userInterventionNeeded_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const UCar_userInterventionNeeded_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(UCar_userInterventionNeeded_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const UCar_userInterventionNeeded_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport UCar_userInterventionNeeded_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_userInterventionNeeded_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    UCar_userInterventionNeeded_Out m_result;
};

/*!
 * @brief This class represents the union used in the DDS topic to encapsulate the operations in request samples.
 * @ingroup UCAR
 */
class UCar_Call {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_Call();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_Call();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_Call that will be copied.
     */
    user_cpp_DllExport UCar_Call(const UCar_Call &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_Call that will be copied.
     */
    user_cpp_DllExport UCar_Call(UCar_Call &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_Call that will be copied.
     */
    user_cpp_DllExport UCar_Call &operator=(const UCar_Call &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object UCar_Call that will be copied.
     */
    user_cpp_DllExport UCar_Call &operator=(UCar_Call &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownOp(eprosima::rpc::protocol::dds::rpc::UnknownOperation _unknownOp);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownOperation unknownOp() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownOperation &unknownOp();

    /*!
     * @brief This function copies the value in member sendTouchEvent
     * @param _sendTouchEvent New value to be copied in member sendTouchEvent
     */
    user_cpp_DllExport void sendTouchEvent(const UCar_sendTouchEvent_In &_sendTouchEvent);

    /*!
     * @brief This function moves the value in member sendTouchEvent
     * @param _sendTouchEvent New value to be moved in member sendTouchEvent
     */
    user_cpp_DllExport void sendTouchEvent(UCar_sendTouchEvent_In &&_sendTouchEvent);

    /*!
     * @brief This function returns a constant reference to member sendTouchEvent
     * @return Constant reference to member sendTouchEvent
     */
    user_cpp_DllExport const UCar_sendTouchEvent_In &sendTouchEvent() const;

    /*!
     * @brief This function returns a reference to member sendTouchEvent
     * @return Reference to member sendTouchEvent
     */
    user_cpp_DllExport UCar_sendTouchEvent_In &sendTouchEvent();

    /*!
     * @brief This function copies the value in member sendMicRecordData
     * @param _sendMicRecordData New value to be copied in member sendMicRecordData
     */
    user_cpp_DllExport void sendMicRecordData(const UCar_sendMicRecordData_In &_sendMicRecordData);

    /*!
     * @brief This function moves the value in member sendMicRecordData
     * @param _sendMicRecordData New value to be moved in member sendMicRecordData
     */
    user_cpp_DllExport void sendMicRecordData(UCar_sendMicRecordData_In &&_sendMicRecordData);

    /*!
     * @brief This function returns a constant reference to member sendMicRecordData
     * @return Constant reference to member sendMicRecordData
     */
    user_cpp_DllExport const UCar_sendMicRecordData_In &sendMicRecordData() const;

    /*!
     * @brief This function returns a reference to member sendMicRecordData
     * @return Reference to member sendMicRecordData
     */
    user_cpp_DllExport UCar_sendMicRecordData_In &sendMicRecordData();

    /*!
     * @brief This function copies the value in member sendKeyEvent
     * @param _sendKeyEvent New value to be copied in member sendKeyEvent
     */
    user_cpp_DllExport void sendKeyEvent(const UCar_sendKeyEvent_In &_sendKeyEvent);

    /*!
     * @brief This function moves the value in member sendKeyEvent
     * @param _sendKeyEvent New value to be moved in member sendKeyEvent
     */
    user_cpp_DllExport void sendKeyEvent(UCar_sendKeyEvent_In &&_sendKeyEvent);

    /*!
     * @brief This function returns a constant reference to member sendKeyEvent
     * @return Constant reference to member sendKeyEvent
     */
    user_cpp_DllExport const UCar_sendKeyEvent_In &sendKeyEvent() const;

    /*!
     * @brief This function returns a reference to member sendKeyEvent
     * @return Reference to member sendKeyEvent
     */
    user_cpp_DllExport UCar_sendKeyEvent_In &sendKeyEvent();

    /*!
     * @brief This function copies the value in member sendGotoForeground
     * @param _sendGotoForeground New value to be copied in member sendGotoForeground
     */
    user_cpp_DllExport void sendGotoForeground(const UCar_sendGotoForeground_In &_sendGotoForeground);

    /*!
     * @brief This function moves the value in member sendGotoForeground
     * @param _sendGotoForeground New value to be moved in member sendGotoForeground
     */
    user_cpp_DllExport void sendGotoForeground(UCar_sendGotoForeground_In &&_sendGotoForeground);

    /*!
     * @brief This function returns a constant reference to member sendGotoForeground
     * @return Constant reference to member sendGotoForeground
     */
    user_cpp_DllExport const UCar_sendGotoForeground_In &sendGotoForeground() const;

    /*!
     * @brief This function returns a reference to member sendGotoForeground
     * @return Reference to member sendGotoForeground
     */
    user_cpp_DllExport UCar_sendGotoForeground_In &sendGotoForeground();

    /*!
     * @brief This function copies the value in member sendGotoBackground
     * @param _sendGotoBackground New value to be copied in member sendGotoBackground
     */
    user_cpp_DllExport void sendGotoBackground(const UCar_sendGotoBackground_In &_sendGotoBackground);

    /*!
     * @brief This function moves the value in member sendGotoBackground
     * @param _sendGotoBackground New value to be moved in member sendGotoBackground
     */
    user_cpp_DllExport void sendGotoBackground(UCar_sendGotoBackground_In &&_sendGotoBackground);

    /*!
     * @brief This function returns a constant reference to member sendGotoBackground
     * @return Constant reference to member sendGotoBackground
     */
    user_cpp_DllExport const UCar_sendGotoBackground_In &sendGotoBackground() const;

    /*!
     * @brief This function returns a reference to member sendGotoBackground
     * @return Reference to member sendGotoBackground
     */
    user_cpp_DllExport UCar_sendGotoBackground_In &sendGotoBackground();

    /*!
     * @brief This function copies the value in member sendVRCMD
     * @param _sendVRCMD New value to be copied in member sendVRCMD
     */
    user_cpp_DllExport void sendVRCMD(const UCar_sendVRCMD_In &_sendVRCMD);

    /*!
     * @brief This function moves the value in member sendVRCMD
     * @param _sendVRCMD New value to be moved in member sendVRCMD
     */
    user_cpp_DllExport void sendVRCMD(UCar_sendVRCMD_In &&_sendVRCMD);

    /*!
     * @brief This function returns a constant reference to member sendVRCMD
     * @return Constant reference to member sendVRCMD
     */
    user_cpp_DllExport const UCar_sendVRCMD_In &sendVRCMD() const;

    /*!
     * @brief This function returns a reference to member sendVRCMD
     * @return Reference to member sendVRCMD
     */
    user_cpp_DllExport UCar_sendVRCMD_In &sendVRCMD();

    /*!
     * @brief This function copies the value in member notifyIsCallHungUp
     * @param _notifyIsCallHungUp New value to be copied in member notifyIsCallHungUp
     */
    user_cpp_DllExport void notifyIsCallHungUp(const UCar_notifyIsCallHungUp_In &_notifyIsCallHungUp);

    /*!
     * @brief This function moves the value in member notifyIsCallHungUp
     * @param _notifyIsCallHungUp New value to be moved in member notifyIsCallHungUp
     */
    user_cpp_DllExport void notifyIsCallHungUp(UCar_notifyIsCallHungUp_In &&_notifyIsCallHungUp);

    /*!
     * @brief This function returns a constant reference to member notifyIsCallHungUp
     * @return Constant reference to member notifyIsCallHungUp
     */
    user_cpp_DllExport const UCar_notifyIsCallHungUp_In &notifyIsCallHungUp() const;

    /*!
     * @brief This function returns a reference to member notifyIsCallHungUp
     * @return Reference to member notifyIsCallHungUp
     */
    user_cpp_DllExport UCar_notifyIsCallHungUp_In &notifyIsCallHungUp();

    /*!
     * @brief This function copies the value in member notifySwitchDayOrNight
     * @param _notifySwitchDayOrNight New value to be copied in member notifySwitchDayOrNight
     */
    user_cpp_DllExport void notifySwitchDayOrNight(const UCar_notifySwitchDayOrNight_In &_notifySwitchDayOrNight);

    /*!
     * @brief This function moves the value in member notifySwitchDayOrNight
     * @param _notifySwitchDayOrNight New value to be moved in member notifySwitchDayOrNight
     */
    user_cpp_DllExport void notifySwitchDayOrNight(UCar_notifySwitchDayOrNight_In &&_notifySwitchDayOrNight);

    /*!
     * @brief This function returns a constant reference to member notifySwitchDayOrNight
     * @return Constant reference to member notifySwitchDayOrNight
     */
    user_cpp_DllExport const UCar_notifySwitchDayOrNight_In &notifySwitchDayOrNight() const;

    /*!
     * @brief This function returns a reference to member notifySwitchDayOrNight
     * @return Reference to member notifySwitchDayOrNight
     */
    user_cpp_DllExport UCar_notifySwitchDayOrNight_In &notifySwitchDayOrNight();

    /*!
     * @brief This function copies the value in member awakenVoiceAssistant
     * @param _awakenVoiceAssistant New value to be copied in member awakenVoiceAssistant
     */
    user_cpp_DllExport void awakenVoiceAssistant(const UCar_awakenVoiceAssistant_In &_awakenVoiceAssistant);

    /*!
     * @brief This function moves the value in member awakenVoiceAssistant
     * @param _awakenVoiceAssistant New value to be moved in member awakenVoiceAssistant
     */
    user_cpp_DllExport void awakenVoiceAssistant(UCar_awakenVoiceAssistant_In &&_awakenVoiceAssistant);

    /*!
     * @brief This function returns a constant reference to member awakenVoiceAssistant
     * @return Constant reference to member awakenVoiceAssistant
     */
    user_cpp_DllExport const UCar_awakenVoiceAssistant_In &awakenVoiceAssistant() const;

    /*!
     * @brief This function returns a reference to member awakenVoiceAssistant
     * @return Reference to member awakenVoiceAssistant
     */
    user_cpp_DllExport UCar_awakenVoiceAssistant_In &awakenVoiceAssistant();

    /*!
     * @brief This function copies the value in member presetVendorCustomFields
     * @param _presetVendorCustomFields New value to be copied in member presetVendorCustomFields
     */
    user_cpp_DllExport void presetVendorCustomFields(const UCar_presetVendorCustomFields_In &_presetVendorCustomFields);

    /*!
     * @brief This function moves the value in member presetVendorCustomFields
     * @param _presetVendorCustomFields New value to be moved in member presetVendorCustomFields
     */
    user_cpp_DllExport void presetVendorCustomFields(UCar_presetVendorCustomFields_In &&_presetVendorCustomFields);

    /*!
     * @brief This function returns a constant reference to member presetVendorCustomFields
     * @return Constant reference to member presetVendorCustomFields
     */
    user_cpp_DllExport const UCar_presetVendorCustomFields_In &presetVendorCustomFields() const;

    /*!
     * @brief This function returns a reference to member presetVendorCustomFields
     * @return Reference to member presetVendorCustomFields
     */
    user_cpp_DllExport UCar_presetVendorCustomFields_In &presetVendorCustomFields();

    /*!
     * @brief This function copies the value in member presetConnectMode
     * @param _presetConnectMode New value to be copied in member presetConnectMode
     */
    user_cpp_DllExport void presetConnectMode(const UCar_presetConnectMode_In &_presetConnectMode);

    /*!
     * @brief This function moves the value in member presetConnectMode
     * @param _presetConnectMode New value to be moved in member presetConnectMode
     */
    user_cpp_DllExport void presetConnectMode(UCar_presetConnectMode_In &&_presetConnectMode);

    /*!
     * @brief This function returns a constant reference to member presetConnectMode
     * @return Constant reference to member presetConnectMode
     */
    user_cpp_DllExport const UCar_presetConnectMode_In &presetConnectMode() const;

    /*!
     * @brief This function returns a reference to member presetConnectMode
     * @return Reference to member presetConnectMode
     */
    user_cpp_DllExport UCar_presetConnectMode_In &presetConnectMode();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_Call &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownOperation m_unknownOp;
    UCar_sendTouchEvent_In m_sendTouchEvent;

    UCar_sendMicRecordData_In m_sendMicRecordData;

    UCar_sendKeyEvent_In m_sendKeyEvent;

    UCar_sendGotoForeground_In m_sendGotoForeground;

    UCar_sendGotoBackground_In m_sendGotoBackground;

    UCar_sendVRCMD_In m_sendVRCMD;

    UCar_notifyIsCallHungUp_In m_notifyIsCallHungUp;

    UCar_notifySwitchDayOrNight_In m_notifySwitchDayOrNight;

    UCar_awakenVoiceAssistant_In m_awakenVoiceAssistant;

    UCar_presetVendorCustomFields_In m_presetVendorCustomFields;

    UCar_presetConnectMode_In m_presetConnectMode;
};

/*!
 * @brief This class represents the structure UCar_Request that can be used to send/receive requests
 * for the interface UCar.
 * @ingroup UCAR
 */
class UCar_Request {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_Request();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_Request();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_Request that will be copied.
     */
    user_cpp_DllExport UCar_Request(const UCar_Request &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_Request that will be copied.
     */
    user_cpp_DllExport UCar_Request(UCar_Request &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar that will be copied.
     */
    user_cpp_DllExport UCar_Request &operator=(const UCar_Request &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar that will be copied.
     */
    user_cpp_DllExport UCar_Request &operator=(UCar_Request &&x);

    /*!
     * @brief This method sets the request header information.
     * @param _header Request header.
     */
    inline user_cpp_DllExport void header(const eprosima::rpc::protocol::dds::rpc::RequestHeader &_header) {
        m_header = _header;
    }

    /*!
     * @brief This method sets the request header information.
     * @param _header Request header.
     */
    inline user_cpp_DllExport void header(eprosima::rpc::protocol::dds::rpc::RequestHeader &&_header) {
        m_header = std::move(_header);
    }

    /*!
     * @brief This method returns the request header information.
     * @return Request header.
     */
    inline user_cpp_DllExport const eprosima::rpc::protocol::dds::rpc::RequestHeader &header() const {
        return m_header;
    }

    /*!
     * @brief This method returns the request header information.
     * @return Request header.
     */
    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::RequestHeader &header() { return m_header; }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _request Union.
     */
    inline user_cpp_DllExport void data(const UCar_Call &_data) { m_data = _data; }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _request Union.
     */
    inline user_cpp_DllExport void data(UCar_Call &&_data) { m_data = std::move(_data); }

    /*!
     * @brief This method returns the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport const UCar_Call &data() const { return m_data; }

    /*!
     * @brief This method returns the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport UCar_Call &data() { return m_data; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_Request &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    eprosima::rpc::protocol::dds::rpc::RequestHeader m_header;

    UCar_Call m_data;
};

/*!
 * @brief This class represents the union used in the DDS topic to encapsulate the operations in reply samples.
 * @ingroup UCAR
 */
class UCar_Return {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_Return();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_Return();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UCar_Return that will be copied.
     */
    user_cpp_DllExport UCar_Return(const UCar_Return &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_Return that will be copied.
     */
    user_cpp_DllExport UCar_Return(UCar_Return &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar_Return that will be copied.
     */
    user_cpp_DllExport UCar_Return &operator=(const UCar_Return &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object UCar_Return that will be copied.
     */
    user_cpp_DllExport UCar_Return &operator=(UCar_Return &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownOp(eprosima::rpc::protocol::dds::rpc::UnknownOperation _unknownOp);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownOperation unknownOp() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownOperation &unknownOp();

    /*!
     * @brief This function copies the value in member sendTouchEvent
     * @param _sendTouchEvent New value to be copied in member sendTouchEvent
     */
    user_cpp_DllExport void sendTouchEvent(const UCar_sendTouchEvent_Result &_sendTouchEvent);

    /*!
     * @brief This function moves the value in member sendTouchEvent
     * @param _sendTouchEvent New value to be moved in member sendTouchEvent
     */
    user_cpp_DllExport void sendTouchEvent(UCar_sendTouchEvent_Result &&_sendTouchEvent);

    /*!
     * @brief This function returns a constant reference to member sendTouchEvent
     * @return Constant reference to member sendTouchEvent
     */
    user_cpp_DllExport const UCar_sendTouchEvent_Result &sendTouchEvent() const;

    /*!
     * @brief This function returns a reference to member sendTouchEvent
     * @return Reference to member sendTouchEvent
     */
    user_cpp_DllExport UCar_sendTouchEvent_Result &sendTouchEvent();
    /*!
     * @brief This function copies the value in member sendMicRecordData
     * @param _sendMicRecordData New value to be copied in member sendMicRecordData
     */
    user_cpp_DllExport void sendMicRecordData(const UCar_sendMicRecordData_Result &_sendMicRecordData);

    /*!
     * @brief This function moves the value in member sendMicRecordData
     * @param _sendMicRecordData New value to be moved in member sendMicRecordData
     */
    user_cpp_DllExport void sendMicRecordData(UCar_sendMicRecordData_Result &&_sendMicRecordData);

    /*!
     * @brief This function returns a constant reference to member sendMicRecordData
     * @return Constant reference to member sendMicRecordData
     */
    user_cpp_DllExport const UCar_sendMicRecordData_Result &sendMicRecordData() const;

    /*!
     * @brief This function returns a reference to member sendMicRecordData
     * @return Reference to member sendMicRecordData
     */
    user_cpp_DllExport UCar_sendMicRecordData_Result &sendMicRecordData();
    /*!
     * @brief This function copies the value in member sendKeyEvent
     * @param _sendKeyEvent New value to be copied in member sendKeyEvent
     */
    user_cpp_DllExport void sendKeyEvent(const UCar_sendKeyEvent_Result &_sendKeyEvent);

    /*!
     * @brief This function moves the value in member sendKeyEvent
     * @param _sendKeyEvent New value to be moved in member sendKeyEvent
     */
    user_cpp_DllExport void sendKeyEvent(UCar_sendKeyEvent_Result &&_sendKeyEvent);

    /*!
     * @brief This function returns a constant reference to member sendKeyEvent
     * @return Constant reference to member sendKeyEvent
     */
    user_cpp_DllExport const UCar_sendKeyEvent_Result &sendKeyEvent() const;

    /*!
     * @brief This function returns a reference to member sendKeyEvent
     * @return Reference to member sendKeyEvent
     */
    user_cpp_DllExport UCar_sendKeyEvent_Result &sendKeyEvent();
    /*!
     * @brief This function copies the value in member sendGotoForeground
     * @param _sendGotoForeground New value to be copied in member sendGotoForeground
     */
    user_cpp_DllExport void sendGotoForeground(const UCar_sendGotoForeground_Result &_sendGotoForeground);

    /*!
     * @brief This function moves the value in member sendGotoForeground
     * @param _sendGotoForeground New value to be moved in member sendGotoForeground
     */
    user_cpp_DllExport void sendGotoForeground(UCar_sendGotoForeground_Result &&_sendGotoForeground);

    /*!
     * @brief This function returns a constant reference to member sendGotoForeground
     * @return Constant reference to member sendGotoForeground
     */
    user_cpp_DllExport const UCar_sendGotoForeground_Result &sendGotoForeground() const;

    /*!
     * @brief This function returns a reference to member sendGotoForeground
     * @return Reference to member sendGotoForeground
     */
    user_cpp_DllExport UCar_sendGotoForeground_Result &sendGotoForeground();
    /*!
     * @brief This function copies the value in member sendGotoBackground
     * @param _sendGotoBackground New value to be copied in member sendGotoBackground
     */
    user_cpp_DllExport void sendGotoBackground(const UCar_sendGotoBackground_Result &_sendGotoBackground);

    /*!
     * @brief This function moves the value in member sendGotoBackground
     * @param _sendGotoBackground New value to be moved in member sendGotoBackground
     */
    user_cpp_DllExport void sendGotoBackground(UCar_sendGotoBackground_Result &&_sendGotoBackground);

    /*!
     * @brief This function returns a constant reference to member sendGotoBackground
     * @return Constant reference to member sendGotoBackground
     */
    user_cpp_DllExport const UCar_sendGotoBackground_Result &sendGotoBackground() const;

    /*!
     * @brief This function returns a reference to member sendGotoBackground
     * @return Reference to member sendGotoBackground
     */
    user_cpp_DllExport UCar_sendGotoBackground_Result &sendGotoBackground();
    /*!
     * @brief This function copies the value in member sendVRCMD
     * @param _sendVRCMD New value to be copied in member sendVRCMD
     */
    user_cpp_DllExport void sendVRCMD(const UCar_sendVRCMD_Result &_sendVRCMD);

    /*!
     * @brief This function moves the value in member sendVRCMD
     * @param _sendVRCMD New value to be moved in member sendVRCMD
     */
    user_cpp_DllExport void sendVRCMD(UCar_sendVRCMD_Result &&_sendVRCMD);

    /*!
     * @brief This function returns a constant reference to member sendVRCMD
     * @return Constant reference to member sendVRCMD
     */
    user_cpp_DllExport const UCar_sendVRCMD_Result &sendVRCMD() const;

    /*!
     * @brief This function returns a reference to member sendVRCMD
     * @return Reference to member sendVRCMD
     */
    user_cpp_DllExport UCar_sendVRCMD_Result &sendVRCMD();
    /*!
     * @brief This function copies the value in member notifyIsCallHungUp
     * @param _notifyIsCallHungUp New value to be copied in member notifyIsCallHungUp
     */
    user_cpp_DllExport void notifyIsCallHungUp(const UCar_notifyIsCallHungUp_Result &_notifyIsCallHungUp);

    /*!
     * @brief This function moves the value in member notifyIsCallHungUp
     * @param _notifyIsCallHungUp New value to be moved in member notifyIsCallHungUp
     */
    user_cpp_DllExport void notifyIsCallHungUp(UCar_notifyIsCallHungUp_Result &&_notifyIsCallHungUp);

    /*!
     * @brief This function returns a constant reference to member notifyIsCallHungUp
     * @return Constant reference to member notifyIsCallHungUp
     */
    user_cpp_DllExport const UCar_notifyIsCallHungUp_Result &notifyIsCallHungUp() const;

    /*!
     * @brief This function returns a reference to member notifyIsCallHungUp
     * @return Reference to member notifyIsCallHungUp
     */
    user_cpp_DllExport UCar_notifyIsCallHungUp_Result &notifyIsCallHungUp();
    /*!
     * @brief This function copies the value in member notifySwitchDayOrNight
     * @param _notifySwitchDayOrNight New value to be copied in member notifySwitchDayOrNight
     */
    user_cpp_DllExport void notifySwitchDayOrNight(const UCar_notifySwitchDayOrNight_Result &_notifySwitchDayOrNight);

    /*!
     * @brief This function moves the value in member notifySwitchDayOrNight
     * @param _notifySwitchDayOrNight New value to be moved in member notifySwitchDayOrNight
     */
    user_cpp_DllExport void notifySwitchDayOrNight(UCar_notifySwitchDayOrNight_Result &&_notifySwitchDayOrNight);

    /*!
     * @brief This function returns a constant reference to member notifySwitchDayOrNight
     * @return Constant reference to member notifySwitchDayOrNight
     */
    user_cpp_DllExport const UCar_notifySwitchDayOrNight_Result &notifySwitchDayOrNight() const;

    /*!
     * @brief This function returns a reference to member notifySwitchDayOrNight
     * @return Reference to member notifySwitchDayOrNight
     */
    user_cpp_DllExport UCar_notifySwitchDayOrNight_Result &notifySwitchDayOrNight();
    /*!
     * @brief This function copies the value in member awakenVoiceAssistant
     * @param _awakenVoiceAssistant New value to be copied in member awakenVoiceAssistant
     */
    user_cpp_DllExport void awakenVoiceAssistant(const UCar_awakenVoiceAssistant_Result &_awakenVoiceAssistant);

    /*!
     * @brief This function moves the value in member awakenVoiceAssistant
     * @param _awakenVoiceAssistant New value to be moved in member awakenVoiceAssistant
     */
    user_cpp_DllExport void awakenVoiceAssistant(UCar_awakenVoiceAssistant_Result &&_awakenVoiceAssistant);

    /*!
     * @brief This function returns a constant reference to member awakenVoiceAssistant
     * @return Constant reference to member awakenVoiceAssistant
     */
    user_cpp_DllExport const UCar_awakenVoiceAssistant_Result &awakenVoiceAssistant() const;

    /*!
     * @brief This function returns a reference to member awakenVoiceAssistant
     * @return Reference to member awakenVoiceAssistant
     */
    user_cpp_DllExport UCar_awakenVoiceAssistant_Result &awakenVoiceAssistant();
    /*!
     * @brief This function copies the value in member presetVendorCustomFields
     * @param _presetVendorCustomFields New value to be copied in member presetVendorCustomFields
     */
    user_cpp_DllExport void presetVendorCustomFields(
        const UCar_presetVendorCustomFields_Result &_presetVendorCustomFields);

    /*!
     * @brief This function moves the value in member presetVendorCustomFields
     * @param _presetVendorCustomFields New value to be moved in member presetVendorCustomFields
     */
    user_cpp_DllExport void presetVendorCustomFields(UCar_presetVendorCustomFields_Result &&_presetVendorCustomFields);

    /*!
     * @brief This function returns a constant reference to member presetVendorCustomFields
     * @return Constant reference to member presetVendorCustomFields
     */
    user_cpp_DllExport const UCar_presetVendorCustomFields_Result &presetVendorCustomFields() const;

    /*!
     * @brief This function returns a reference to member presetVendorCustomFields
     * @return Reference to member presetVendorCustomFields
     */
    user_cpp_DllExport UCar_presetVendorCustomFields_Result &presetVendorCustomFields();
    /*!
     * @brief This function copies the value in member presetConnectMode
     * @param _presetConnectMode New value to be copied in member presetConnectMode
     */
    user_cpp_DllExport void presetConnectMode(const UCar_presetConnectMode_Result &_presetConnectMode);

    /*!
     * @brief This function moves the value in member presetConnectMode
     * @param _presetConnectMode New value to be moved in member presetConnectMode
     */
    user_cpp_DllExport void presetConnectMode(UCar_presetConnectMode_Result &&_presetConnectMode);

    /*!
     * @brief This function returns a constant reference to member presetConnectMode
     * @return Constant reference to member presetConnectMode
     */
    user_cpp_DllExport const UCar_presetConnectMode_Result &presetConnectMode() const;

    /*!
     * @brief This function returns a reference to member presetConnectMode
     * @return Reference to member presetConnectMode
     */
    user_cpp_DllExport UCar_presetConnectMode_Result &presetConnectMode();
    /*!
     * @brief This function copies the value in member videoInitialized
     * @param _videoInitialized New value to be copied in member videoInitialized
     */
    user_cpp_DllExport void videoInitialized(const UCar_videoInitialized_Result &_videoInitialized);

    /*!
     * @brief This function moves the value in member videoInitialized
     * @param _videoInitialized New value to be moved in member videoInitialized
     */
    user_cpp_DllExport void videoInitialized(UCar_videoInitialized_Result &&_videoInitialized);

    /*!
     * @brief This function returns a constant reference to member videoInitialized
     * @return Constant reference to member videoInitialized
     */
    user_cpp_DllExport const UCar_videoInitialized_Result &videoInitialized() const;

    /*!
     * @brief This function returns a reference to member videoInitialized
     * @return Reference to member videoInitialized
     */
    user_cpp_DllExport UCar_videoInitialized_Result &videoInitialized();
    /*!
     * @brief This function copies the value in member videoDataReceived
     * @param _videoDataReceived New value to be copied in member videoDataReceived
     */
    user_cpp_DllExport void videoDataReceived(const UCar_videoDataReceived_Result &_videoDataReceived);

    /*!
     * @brief This function moves the value in member videoDataReceived
     * @param _videoDataReceived New value to be moved in member videoDataReceived
     */
    user_cpp_DllExport void videoDataReceived(UCar_videoDataReceived_Result &&_videoDataReceived);

    /*!
     * @brief This function returns a constant reference to member videoDataReceived
     * @return Constant reference to member videoDataReceived
     */
    user_cpp_DllExport const UCar_videoDataReceived_Result &videoDataReceived() const;

    /*!
     * @brief This function returns a reference to member videoDataReceived
     * @return Reference to member videoDataReceived
     */
    user_cpp_DllExport UCar_videoDataReceived_Result &videoDataReceived();
    /*!
     * @brief This function copies the value in member requestGotoHUDesktop
     * @param _requestGotoHUDesktop New value to be copied in member requestGotoHUDesktop
     */
    user_cpp_DllExport void requestGotoHUDesktop(const UCar_requestGotoHUDesktop_Result &_requestGotoHUDesktop);

    /*!
     * @brief This function moves the value in member requestGotoHUDesktop
     * @param _requestGotoHUDesktop New value to be moved in member requestGotoHUDesktop
     */
    user_cpp_DllExport void requestGotoHUDesktop(UCar_requestGotoHUDesktop_Result &&_requestGotoHUDesktop);

    /*!
     * @brief This function returns a constant reference to member requestGotoHUDesktop
     * @return Constant reference to member requestGotoHUDesktop
     */
    user_cpp_DllExport const UCar_requestGotoHUDesktop_Result &requestGotoHUDesktop() const;

    /*!
     * @brief This function returns a reference to member requestGotoHUDesktop
     * @return Reference to member requestGotoHUDesktop
     */
    user_cpp_DllExport UCar_requestGotoHUDesktop_Result &requestGotoHUDesktop();
    /*!
     * @brief This function copies the value in member audioStateChanged
     * @param _audioStateChanged New value to be copied in member audioStateChanged
     */
    user_cpp_DllExport void audioStateChanged(const UCar_audioStateChanged_Result &_audioStateChanged);

    /*!
     * @brief This function moves the value in member audioStateChanged
     * @param _audioStateChanged New value to be moved in member audioStateChanged
     */
    user_cpp_DllExport void audioStateChanged(UCar_audioStateChanged_Result &&_audioStateChanged);

    /*!
     * @brief This function returns a constant reference to member audioStateChanged
     * @return Constant reference to member audioStateChanged
     */
    user_cpp_DllExport const UCar_audioStateChanged_Result &audioStateChanged() const;

    /*!
     * @brief This function returns a reference to member audioStateChanged
     * @return Reference to member audioStateChanged
     */
    user_cpp_DllExport UCar_audioStateChanged_Result &audioStateChanged();
    /*!
     * @brief This function copies the value in member audioDataReceived
     * @param _audioDataReceived New value to be copied in member audioDataReceived
     */
    user_cpp_DllExport void audioDataReceived(const UCar_audioDataReceived_Result &_audioDataReceived);

    /*!
     * @brief This function moves the value in member audioDataReceived
     * @param _audioDataReceived New value to be moved in member audioDataReceived
     */
    user_cpp_DllExport void audioDataReceived(UCar_audioDataReceived_Result &&_audioDataReceived);

    /*!
     * @brief This function returns a constant reference to member audioDataReceived
     * @return Constant reference to member audioDataReceived
     */
    user_cpp_DllExport const UCar_audioDataReceived_Result &audioDataReceived() const;

    /*!
     * @brief This function returns a reference to member audioDataReceived
     * @return Reference to member audioDataReceived
     */
    user_cpp_DllExport UCar_audioDataReceived_Result &audioDataReceived();
    /*!
     * @brief This function copies the value in member musicInfoReceived
     * @param _musicInfoReceived New value to be copied in member musicInfoReceived
     */
    user_cpp_DllExport void musicInfoReceived(const UCar_musicInfoReceived_Result &_musicInfoReceived);

    /*!
     * @brief This function moves the value in member musicInfoReceived
     * @param _musicInfoReceived New value to be moved in member musicInfoReceived
     */
    user_cpp_DllExport void musicInfoReceived(UCar_musicInfoReceived_Result &&_musicInfoReceived);

    /*!
     * @brief This function returns a constant reference to member musicInfoReceived
     * @return Constant reference to member musicInfoReceived
     */
    user_cpp_DllExport const UCar_musicInfoReceived_Result &musicInfoReceived() const;

    /*!
     * @brief This function returns a reference to member musicInfoReceived
     * @return Reference to member musicInfoReceived
     */
    user_cpp_DllExport UCar_musicInfoReceived_Result &musicInfoReceived();
    /*!
     * @brief This function copies the value in member navigationInfoReceived
     * @param _navigationInfoReceived New value to be copied in member navigationInfoReceived
     */
    user_cpp_DllExport void navigationInfoReceived(const UCar_navigationInfoReceived_Result &_navigationInfoReceived);

    /*!
     * @brief This function moves the value in member navigationInfoReceived
     * @param _navigationInfoReceived New value to be moved in member navigationInfoReceived
     */
    user_cpp_DllExport void navigationInfoReceived(UCar_navigationInfoReceived_Result &&_navigationInfoReceived);

    /*!
     * @brief This function returns a constant reference to member navigationInfoReceived
     * @return Constant reference to member navigationInfoReceived
     */
    user_cpp_DllExport const UCar_navigationInfoReceived_Result &navigationInfoReceived() const;

    /*!
     * @brief This function returns a reference to member navigationInfoReceived
     * @return Reference to member navigationInfoReceived
     */
    user_cpp_DllExport UCar_navigationInfoReceived_Result &navigationInfoReceived();
    /*!
     * @brief This function copies the value in member phoneStateInfoReceived
     * @param _phoneStateInfoReceived New value to be copied in member phoneStateInfoReceived
     */
    user_cpp_DllExport void phoneStateInfoReceived(const UCar_phoneStateInfoReceived_Result &_phoneStateInfoReceived);

    /*!
     * @brief This function moves the value in member phoneStateInfoReceived
     * @param _phoneStateInfoReceived New value to be moved in member phoneStateInfoReceived
     */
    user_cpp_DllExport void phoneStateInfoReceived(UCar_phoneStateInfoReceived_Result &&_phoneStateInfoReceived);

    /*!
     * @brief This function returns a constant reference to member phoneStateInfoReceived
     * @return Constant reference to member phoneStateInfoReceived
     */
    user_cpp_DllExport const UCar_phoneStateInfoReceived_Result &phoneStateInfoReceived() const;

    /*!
     * @brief This function returns a reference to member phoneStateInfoReceived
     * @return Reference to member phoneStateInfoReceived
     */
    user_cpp_DllExport UCar_phoneStateInfoReceived_Result &phoneStateInfoReceived();
    /*!
     * @brief This function copies the value in member micRecordRequest
     * @param _micRecordRequest New value to be copied in member micRecordRequest
     */
    user_cpp_DllExport void micRecordRequest(const UCar_micRecordRequest_Result &_micRecordRequest);

    /*!
     * @brief This function moves the value in member micRecordRequest
     * @param _micRecordRequest New value to be moved in member micRecordRequest
     */
    user_cpp_DllExport void micRecordRequest(UCar_micRecordRequest_Result &&_micRecordRequest);

    /*!
     * @brief This function returns a constant reference to member micRecordRequest
     * @return Constant reference to member micRecordRequest
     */
    user_cpp_DllExport const UCar_micRecordRequest_Result &micRecordRequest() const;

    /*!
     * @brief This function returns a reference to member micRecordRequest
     * @return Reference to member micRecordRequest
     */
    user_cpp_DllExport UCar_micRecordRequest_Result &micRecordRequest();
    /*!
     * @brief This function copies the value in member userInterventionNeeded
     * @param _userInterventionNeeded New value to be copied in member userInterventionNeeded
     */
    user_cpp_DllExport void userInterventionNeeded(const UCar_userInterventionNeeded_Result &_userInterventionNeeded);

    /*!
     * @brief This function moves the value in member userInterventionNeeded
     * @param _userInterventionNeeded New value to be moved in member userInterventionNeeded
     */
    user_cpp_DllExport void userInterventionNeeded(UCar_userInterventionNeeded_Result &&_userInterventionNeeded);

    /*!
     * @brief This function returns a constant reference to member userInterventionNeeded
     * @return Constant reference to member userInterventionNeeded
     */
    user_cpp_DllExport const UCar_userInterventionNeeded_Result &userInterventionNeeded() const;

    /*!
     * @brief This function returns a reference to member userInterventionNeeded
     * @return Reference to member userInterventionNeeded
     */
    user_cpp_DllExport UCar_userInterventionNeeded_Result &userInterventionNeeded();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_Return &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownOperation m_unknownOp;

    UCar_sendTouchEvent_Result m_sendTouchEvent;
    UCar_sendMicRecordData_Result m_sendMicRecordData;
    UCar_sendKeyEvent_Result m_sendKeyEvent;
    UCar_sendGotoForeground_Result m_sendGotoForeground;
    UCar_sendGotoBackground_Result m_sendGotoBackground;
    UCar_sendVRCMD_Result m_sendVRCMD;
    UCar_notifyIsCallHungUp_Result m_notifyIsCallHungUp;
    UCar_notifySwitchDayOrNight_Result m_notifySwitchDayOrNight;
    UCar_awakenVoiceAssistant_Result m_awakenVoiceAssistant;
    UCar_presetVendorCustomFields_Result m_presetVendorCustomFields;
    UCar_presetConnectMode_Result m_presetConnectMode;
    UCar_videoInitialized_Result m_videoInitialized;
    UCar_videoDataReceived_Result m_videoDataReceived;
    UCar_requestGotoHUDesktop_Result m_requestGotoHUDesktop;
    UCar_audioStateChanged_Result m_audioStateChanged;
    UCar_audioDataReceived_Result m_audioDataReceived;
    UCar_musicInfoReceived_Result m_musicInfoReceived;
    UCar_navigationInfoReceived_Result m_navigationInfoReceived;
    UCar_phoneStateInfoReceived_Result m_phoneStateInfoReceived;
    UCar_micRecordRequest_Result m_micRecordRequest;
    UCar_userInterventionNeeded_Result m_userInterventionNeeded;
};

/*!
 * @brief This class represents the structure UCar_Reply that can be used to send/receive replies
 * for the interface UCar.
 * @ingroup UCAR
 */
class UCar_Reply {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport UCar_Reply();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~UCar_Reply();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object UCar_Reply that will be copied.
     */
    user_cpp_DllExport UCar_Reply(const UCar_Reply &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UCar_Reply that will be copied.
     */
    user_cpp_DllExport UCar_Reply(UCar_Reply &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar that will be copied.
     */
    user_cpp_DllExport UCar_Reply &operator=(const UCar_Reply &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UCar that will be copied.
     */
    user_cpp_DllExport UCar_Reply &operator=(UCar_Reply &&x);

    /*!
     * @brief This method sets the reply header information.
     * @param _header Reply header.
     */
    inline user_cpp_DllExport void header(const eprosima::rpc::protocol::dds::rpc::ReplyHeader &_header) {
        m_header = _header;
    }

    /*!
     * @brief This method sets the reply header information.
     * @param _header Reply header.
     */
    inline user_cpp_DllExport void header(eprosima::rpc::protocol::dds::rpc::ReplyHeader &&_header) {
        m_header = std::move(_header);
    }

    /*!
     * @brief This method returns the reply header information.
     * @return Reply header.
     */
    inline user_cpp_DllExport const eprosima::rpc::protocol::dds::rpc::ReplyHeader &header() const { return m_header; }

    /*!
     * @brief This method returns the reply header information.
     * @return Reply header.
     */
    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::ReplyHeader &header() { return m_header; }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _reply Union.
     */
    inline user_cpp_DllExport void data(const UCar_Return &_data) { m_data = _data; }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _reply Union.
     */
    inline user_cpp_DllExport void data(UCar_Return &&_data) { m_data = std::move(_data); }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport const UCar_Return &data() const { return m_data; }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport UCar_Return &data() { return m_data; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const UCar_Reply &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    eprosima::rpc::protocol::dds::rpc::ReplyHeader m_header;

    UCar_Return m_data;
};

#endif  // _UCar_TOPICS_H_