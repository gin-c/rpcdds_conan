/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * _LICENSE file included in this  distribution.
 *
 *************************************************************************
 *
 * @file UCar.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}
#endif

#include "UCar.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

VideoFormat::VideoFormat() {
    // m_mimeType com.eprosima.idl.parser.typecode.StringTypeCode@359f7cdf
    m_mimeType = "";
    // m_width com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1fa268de
    m_width = 0;
    // m_height com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4f6ee6e4
    m_height = 0;
}

VideoFormat::~VideoFormat() {}

VideoFormat::VideoFormat(const VideoFormat &x) {
    m_mimeType = x.m_mimeType;
    m_width = x.m_width;
    m_height = x.m_height;
}

VideoFormat::VideoFormat(VideoFormat &&x) {
    m_mimeType = std::move(x.m_mimeType);
    m_width = x.m_width;
    m_height = x.m_height;
}

VideoFormat &VideoFormat::operator=(const VideoFormat &x) {

    m_mimeType = x.m_mimeType;
    m_width = x.m_width;
    m_height = x.m_height;

    return *this;
}

VideoFormat &VideoFormat::operator=(VideoFormat &&x) {

    m_mimeType = std::move(x.m_mimeType);
    m_width = x.m_width;
    m_height = x.m_height;

    return *this;
}

size_t VideoFormat::getMaxCdrSerializedSize(size_t current_alignment) {
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    return current_alignment - initial_alignment;
}

size_t VideoFormat::getCdrSerializedSize(const VideoFormat &data, size_t current_alignment) {
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.mimeType().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    return current_alignment - initial_alignment;
}

void VideoFormat::serialize(eprosima::fastcdr::Cdr &scdr) const {

    scdr << m_mimeType;
    scdr << m_width;
    scdr << m_height;
}

void VideoFormat::deserialize(eprosima::fastcdr::Cdr &dcdr) {

    dcdr >> m_mimeType;
    dcdr >> m_width;
    dcdr >> m_height;
}

/*!
 * @brief This function copies the value in member mimeType
 * @param _mimeType New value to be copied in member mimeType
 */
void VideoFormat::mimeType(const std::string &_mimeType) { m_mimeType = _mimeType; }

/*!
 * @brief This function moves the value in member mimeType
 * @param _mimeType New value to be moved in member mimeType
 */
void VideoFormat::mimeType(std::string &&_mimeType) { m_mimeType = std::move(_mimeType); }

/*!
 * @brief This function returns a constant reference to member mimeType
 * @return Constant reference to member mimeType
 */
const std::string &VideoFormat::mimeType() const { return m_mimeType; }

/*!
 * @brief This function returns a reference to member mimeType
 * @return Reference to member mimeType
 */
std::string &VideoFormat::mimeType() { return m_mimeType; }
/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void VideoFormat::width(int32_t _width) { m_width = _width; }

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
int32_t VideoFormat::width() const { return m_width; }

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
int32_t &VideoFormat::width() { return m_width; }

/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void VideoFormat::height(int32_t _height) { m_height = _height; }

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
int32_t VideoFormat::height() const { return m_height; }

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
int32_t &VideoFormat::height() { return m_height; }

AudioFormat::AudioFormat() {
    // m_mimeType com.eprosima.idl.parser.typecode.StringTypeCode@12468a38
    m_mimeType = "";
    // m_sampleRate com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1aa7ecca
    m_sampleRate = 0;
    // m_channelConfig com.eprosima.idl.parser.typecode.PrimitiveTypeCode@59309333
    m_channelConfig = 0;
    // m_encodingFormat com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5876a9af
    m_encodingFormat = 0;
}

AudioFormat::~AudioFormat() {}

AudioFormat::AudioFormat(const AudioFormat &x) {
    m_mimeType = x.m_mimeType;
    m_sampleRate = x.m_sampleRate;
    m_channelConfig = x.m_channelConfig;
    m_encodingFormat = x.m_encodingFormat;
}

AudioFormat::AudioFormat(AudioFormat &&x) {
    m_mimeType = std::move(x.m_mimeType);
    m_sampleRate = x.m_sampleRate;
    m_channelConfig = x.m_channelConfig;
    m_encodingFormat = x.m_encodingFormat;
}

AudioFormat &AudioFormat::operator=(const AudioFormat &x) {

    m_mimeType = x.m_mimeType;
    m_sampleRate = x.m_sampleRate;
    m_channelConfig = x.m_channelConfig;
    m_encodingFormat = x.m_encodingFormat;

    return *this;
}

AudioFormat &AudioFormat::operator=(AudioFormat &&x) {

    m_mimeType = std::move(x.m_mimeType);
    m_sampleRate = x.m_sampleRate;
    m_channelConfig = x.m_channelConfig;
    m_encodingFormat = x.m_encodingFormat;

    return *this;
}

size_t AudioFormat::getMaxCdrSerializedSize(size_t current_alignment) {
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    return current_alignment - initial_alignment;
}

size_t AudioFormat::getCdrSerializedSize(const AudioFormat &data, size_t current_alignment) {
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.mimeType().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    return current_alignment - initial_alignment;
}

void AudioFormat::serialize(eprosima::fastcdr::Cdr &scdr) const {

    scdr << m_mimeType;
    scdr << m_sampleRate;
    scdr << m_channelConfig;
    scdr << m_encodingFormat;
}

void AudioFormat::deserialize(eprosima::fastcdr::Cdr &dcdr) {

    dcdr >> m_mimeType;
    dcdr >> m_sampleRate;
    dcdr >> m_channelConfig;
    dcdr >> m_encodingFormat;
}

/*!
 * @brief This function copies the value in member mimeType
 * @param _mimeType New value to be copied in member mimeType
 */
void AudioFormat::mimeType(const std::string &_mimeType) { m_mimeType = _mimeType; }

/*!
 * @brief This function moves the value in member mimeType
 * @param _mimeType New value to be moved in member mimeType
 */
void AudioFormat::mimeType(std::string &&_mimeType) { m_mimeType = std::move(_mimeType); }

/*!
 * @brief This function returns a constant reference to member mimeType
 * @return Constant reference to member mimeType
 */
const std::string &AudioFormat::mimeType() const { return m_mimeType; }

/*!
 * @brief This function returns a reference to member mimeType
 * @return Reference to member mimeType
 */
std::string &AudioFormat::mimeType() { return m_mimeType; }
/*!
 * @brief This function sets a value in member sampleRate
 * @param _sampleRate New value for member sampleRate
 */
void AudioFormat::sampleRate(int32_t _sampleRate) { m_sampleRate = _sampleRate; }

/*!
 * @brief This function returns the value of member sampleRate
 * @return Value of member sampleRate
 */
int32_t AudioFormat::sampleRate() const { return m_sampleRate; }

/*!
 * @brief This function returns a reference to member sampleRate
 * @return Reference to member sampleRate
 */
int32_t &AudioFormat::sampleRate() { return m_sampleRate; }

/*!
 * @brief This function sets a value in member channelConfig
 * @param _channelConfig New value for member channelConfig
 */
void AudioFormat::channelConfig(int32_t _channelConfig) { m_channelConfig = _channelConfig; }

/*!
 * @brief This function returns the value of member channelConfig
 * @return Value of member channelConfig
 */
int32_t AudioFormat::channelConfig() const { return m_channelConfig; }

/*!
 * @brief This function returns a reference to member channelConfig
 * @return Reference to member channelConfig
 */
int32_t &AudioFormat::channelConfig() { return m_channelConfig; }

/*!
 * @brief This function sets a value in member encodingFormat
 * @param _encodingFormat New value for member encodingFormat
 */
void AudioFormat::encodingFormat(int32_t _encodingFormat) { m_encodingFormat = _encodingFormat; }

/*!
 * @brief This function returns the value of member encodingFormat
 * @return Value of member encodingFormat
 */
int32_t AudioFormat::encodingFormat() const { return m_encodingFormat; }

/*!
 * @brief This function returns a reference to member encodingFormat
 * @return Reference to member encodingFormat
 */
int32_t &AudioFormat::encodingFormat() { return m_encodingFormat; }

MusicInfo::MusicInfo() {
    // m_artistName com.eprosima.idl.parser.typecode.StringTypeCode@16293aa2
    m_artistName = "";
    // m_albumName com.eprosima.idl.parser.typecode.StringTypeCode@5158b42f
    m_albumName = "";
    // m_coverArt com.eprosima.idl.parser.typecode.StringTypeCode@595b007d
    m_coverArt = "";
    // m_lyrics com.eprosima.idl.parser.typecode.StringTypeCode@72d1ad2e
    m_lyrics = "";
    // m_totalTimesMs com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2d7275fc
    m_totalTimesMs = 0;
    // m_title com.eprosima.idl.parser.typecode.StringTypeCode@399f45b1
    m_title = "";
    // m_authorName com.eprosima.idl.parser.typecode.StringTypeCode@38c6f217
    m_authorName = "";
    // m_writerName com.eprosima.idl.parser.typecode.StringTypeCode@478190fc
    m_writerName = "";
    // m_composerName com.eprosima.idl.parser.typecode.StringTypeCode@35cabb2a
    m_composerName = "";
    // m_playingCurrentTimeMs com.eprosima.idl.parser.typecode.PrimitiveTypeCode@36bc55de
    m_playingCurrentTimeMs = 0;
    // m_isFavorite com.eprosima.idl.parser.typecode.PrimitiveTypeCode@564fabc8
    m_isFavorite = false;
    // m_isPlaying com.eprosima.idl.parser.typecode.PrimitiveTypeCode@16d04d3d
    m_isPlaying = false;
}

MusicInfo::~MusicInfo() {}

MusicInfo::MusicInfo(const MusicInfo &x) {
    m_artistName = x.m_artistName;
    m_albumName = x.m_albumName;
    m_coverArt = x.m_coverArt;
    m_lyrics = x.m_lyrics;
    m_totalTimesMs = x.m_totalTimesMs;
    m_title = x.m_title;
    m_authorName = x.m_authorName;
    m_writerName = x.m_writerName;
    m_composerName = x.m_composerName;
    m_playingCurrentTimeMs = x.m_playingCurrentTimeMs;
    m_isFavorite = x.m_isFavorite;
    m_isPlaying = x.m_isPlaying;
}

MusicInfo::MusicInfo(MusicInfo &&x) {
    m_artistName = std::move(x.m_artistName);
    m_albumName = std::move(x.m_albumName);
    m_coverArt = std::move(x.m_coverArt);
    m_lyrics = std::move(x.m_lyrics);
    m_totalTimesMs = x.m_totalTimesMs;
    m_title = std::move(x.m_title);
    m_authorName = std::move(x.m_authorName);
    m_writerName = std::move(x.m_writerName);
    m_composerName = std::move(x.m_composerName);
    m_playingCurrentTimeMs = x.m_playingCurrentTimeMs;
    m_isFavorite = x.m_isFavorite;
    m_isPlaying = x.m_isPlaying;
}

MusicInfo &MusicInfo::operator=(const MusicInfo &x) {

    m_artistName = x.m_artistName;
    m_albumName = x.m_albumName;
    m_coverArt = x.m_coverArt;
    m_lyrics = x.m_lyrics;
    m_totalTimesMs = x.m_totalTimesMs;
    m_title = x.m_title;
    m_authorName = x.m_authorName;
    m_writerName = x.m_writerName;
    m_composerName = x.m_composerName;
    m_playingCurrentTimeMs = x.m_playingCurrentTimeMs;
    m_isFavorite = x.m_isFavorite;
    m_isPlaying = x.m_isPlaying;

    return *this;
}

MusicInfo &MusicInfo::operator=(MusicInfo &&x) {

    m_artistName = std::move(x.m_artistName);
    m_albumName = std::move(x.m_albumName);
    m_coverArt = std::move(x.m_coverArt);
    m_lyrics = std::move(x.m_lyrics);
    m_totalTimesMs = x.m_totalTimesMs;
    m_title = std::move(x.m_title);
    m_authorName = std::move(x.m_authorName);
    m_writerName = std::move(x.m_writerName);
    m_composerName = std::move(x.m_composerName);
    m_playingCurrentTimeMs = x.m_playingCurrentTimeMs;
    m_isFavorite = x.m_isFavorite;
    m_isPlaying = x.m_isPlaying;

    return *this;
}

size_t MusicInfo::getMaxCdrSerializedSize(size_t current_alignment) {
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    return current_alignment - initial_alignment;
}

size_t MusicInfo::getCdrSerializedSize(const MusicInfo &data, size_t current_alignment) {
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.artistName().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.albumName().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.coverArt().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.lyrics().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.title().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.authorName().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.writerName().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.composerName().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    return current_alignment - initial_alignment;
}

void MusicInfo::serialize(eprosima::fastcdr::Cdr &scdr) const {

    scdr << m_artistName;
    scdr << m_albumName;
    scdr << m_coverArt;
    scdr << m_lyrics;
    scdr << m_totalTimesMs;
    scdr << m_title;
    scdr << m_authorName;
    scdr << m_writerName;
    scdr << m_composerName;
    scdr << m_playingCurrentTimeMs;
    scdr << m_isFavorite;
    scdr << m_isPlaying;
}

void MusicInfo::deserialize(eprosima::fastcdr::Cdr &dcdr) {

    dcdr >> m_artistName;
    dcdr >> m_albumName;
    dcdr >> m_coverArt;
    dcdr >> m_lyrics;
    dcdr >> m_totalTimesMs;
    dcdr >> m_title;
    dcdr >> m_authorName;
    dcdr >> m_writerName;
    dcdr >> m_composerName;
    dcdr >> m_playingCurrentTimeMs;
    dcdr >> m_isFavorite;
    dcdr >> m_isPlaying;
}

/*!
 * @brief This function copies the value in member artistName
 * @param _artistName New value to be copied in member artistName
 */
void MusicInfo::artistName(const std::string &_artistName) { m_artistName = _artistName; }

/*!
 * @brief This function moves the value in member artistName
 * @param _artistName New value to be moved in member artistName
 */
void MusicInfo::artistName(std::string &&_artistName) { m_artistName = std::move(_artistName); }

/*!
 * @brief This function returns a constant reference to member artistName
 * @return Constant reference to member artistName
 */
const std::string &MusicInfo::artistName() const { return m_artistName; }

/*!
 * @brief This function returns a reference to member artistName
 * @return Reference to member artistName
 */
std::string &MusicInfo::artistName() { return m_artistName; }
/*!
 * @brief This function copies the value in member albumName
 * @param _albumName New value to be copied in member albumName
 */
void MusicInfo::albumName(const std::string &_albumName) { m_albumName = _albumName; }

/*!
 * @brief This function moves the value in member albumName
 * @param _albumName New value to be moved in member albumName
 */
void MusicInfo::albumName(std::string &&_albumName) { m_albumName = std::move(_albumName); }

/*!
 * @brief This function returns a constant reference to member albumName
 * @return Constant reference to member albumName
 */
const std::string &MusicInfo::albumName() const { return m_albumName; }

/*!
 * @brief This function returns a reference to member albumName
 * @return Reference to member albumName
 */
std::string &MusicInfo::albumName() { return m_albumName; }
/*!
 * @brief This function copies the value in member coverArt
 * @param _coverArt New value to be copied in member coverArt
 */
void MusicInfo::coverArt(const std::string &_coverArt) { m_coverArt = _coverArt; }

/*!
 * @brief This function moves the value in member coverArt
 * @param _coverArt New value to be moved in member coverArt
 */
void MusicInfo::coverArt(std::string &&_coverArt) { m_coverArt = std::move(_coverArt); }

/*!
 * @brief This function returns a constant reference to member coverArt
 * @return Constant reference to member coverArt
 */
const std::string &MusicInfo::coverArt() const { return m_coverArt; }

/*!
 * @brief This function returns a reference to member coverArt
 * @return Reference to member coverArt
 */
std::string &MusicInfo::coverArt() { return m_coverArt; }
/*!
 * @brief This function copies the value in member lyrics
 * @param _lyrics New value to be copied in member lyrics
 */
void MusicInfo::lyrics(const std::string &_lyrics) { m_lyrics = _lyrics; }

/*!
 * @brief This function moves the value in member lyrics
 * @param _lyrics New value to be moved in member lyrics
 */
void MusicInfo::lyrics(std::string &&_lyrics) { m_lyrics = std::move(_lyrics); }

/*!
 * @brief This function returns a constant reference to member lyrics
 * @return Constant reference to member lyrics
 */
const std::string &MusicInfo::lyrics() const { return m_lyrics; }

/*!
 * @brief This function returns a reference to member lyrics
 * @return Reference to member lyrics
 */
std::string &MusicInfo::lyrics() { return m_lyrics; }
/*!
 * @brief This function sets a value in member totalTimesMs
 * @param _totalTimesMs New value for member totalTimesMs
 */
void MusicInfo::totalTimesMs(int32_t _totalTimesMs) { m_totalTimesMs = _totalTimesMs; }

/*!
 * @brief This function returns the value of member totalTimesMs
 * @return Value of member totalTimesMs
 */
int32_t MusicInfo::totalTimesMs() const { return m_totalTimesMs; }

/*!
 * @brief This function returns a reference to member totalTimesMs
 * @return Reference to member totalTimesMs
 */
int32_t &MusicInfo::totalTimesMs() { return m_totalTimesMs; }

/*!
 * @brief This function copies the value in member title
 * @param _title New value to be copied in member title
 */
void MusicInfo::title(const std::string &_title) { m_title = _title; }

/*!
 * @brief This function moves the value in member title
 * @param _title New value to be moved in member title
 */
void MusicInfo::title(std::string &&_title) { m_title = std::move(_title); }

/*!
 * @brief This function returns a constant reference to member title
 * @return Constant reference to member title
 */
const std::string &MusicInfo::title() const { return m_title; }

/*!
 * @brief This function returns a reference to member title
 * @return Reference to member title
 */
std::string &MusicInfo::title() { return m_title; }
/*!
 * @brief This function copies the value in member authorName
 * @param _authorName New value to be copied in member authorName
 */
void MusicInfo::authorName(const std::string &_authorName) { m_authorName = _authorName; }

/*!
 * @brief This function moves the value in member authorName
 * @param _authorName New value to be moved in member authorName
 */
void MusicInfo::authorName(std::string &&_authorName) { m_authorName = std::move(_authorName); }

/*!
 * @brief This function returns a constant reference to member authorName
 * @return Constant reference to member authorName
 */
const std::string &MusicInfo::authorName() const { return m_authorName; }

/*!
 * @brief This function returns a reference to member authorName
 * @return Reference to member authorName
 */
std::string &MusicInfo::authorName() { return m_authorName; }
/*!
 * @brief This function copies the value in member writerName
 * @param _writerName New value to be copied in member writerName
 */
void MusicInfo::writerName(const std::string &_writerName) { m_writerName = _writerName; }

/*!
 * @brief This function moves the value in member writerName
 * @param _writerName New value to be moved in member writerName
 */
void MusicInfo::writerName(std::string &&_writerName) { m_writerName = std::move(_writerName); }

/*!
 * @brief This function returns a constant reference to member writerName
 * @return Constant reference to member writerName
 */
const std::string &MusicInfo::writerName() const { return m_writerName; }

/*!
 * @brief This function returns a reference to member writerName
 * @return Reference to member writerName
 */
std::string &MusicInfo::writerName() { return m_writerName; }
/*!
 * @brief This function copies the value in member composerName
 * @param _composerName New value to be copied in member composerName
 */
void MusicInfo::composerName(const std::string &_composerName) { m_composerName = _composerName; }

/*!
 * @brief This function moves the value in member composerName
 * @param _composerName New value to be moved in member composerName
 */
void MusicInfo::composerName(std::string &&_composerName) { m_composerName = std::move(_composerName); }

/*!
 * @brief This function returns a constant reference to member composerName
 * @return Constant reference to member composerName
 */
const std::string &MusicInfo::composerName() const { return m_composerName; }

/*!
 * @brief This function returns a reference to member composerName
 * @return Reference to member composerName
 */
std::string &MusicInfo::composerName() { return m_composerName; }
/*!
 * @brief This function sets a value in member playingCurrentTimeMs
 * @param _playingCurrentTimeMs New value for member playingCurrentTimeMs
 */
void MusicInfo::playingCurrentTimeMs(int32_t _playingCurrentTimeMs) { m_playingCurrentTimeMs = _playingCurrentTimeMs; }

/*!
 * @brief This function returns the value of member playingCurrentTimeMs
 * @return Value of member playingCurrentTimeMs
 */
int32_t MusicInfo::playingCurrentTimeMs() const { return m_playingCurrentTimeMs; }

/*!
 * @brief This function returns a reference to member playingCurrentTimeMs
 * @return Reference to member playingCurrentTimeMs
 */
int32_t &MusicInfo::playingCurrentTimeMs() { return m_playingCurrentTimeMs; }

/*!
 * @brief This function sets a value in member isFavorite
 * @param _isFavorite New value for member isFavorite
 */
void MusicInfo::isFavorite(bool _isFavorite) { m_isFavorite = _isFavorite; }

/*!
 * @brief This function returns the value of member isFavorite
 * @return Value of member isFavorite
 */
bool MusicInfo::isFavorite() const { return m_isFavorite; }

/*!
 * @brief This function returns a reference to member isFavorite
 * @return Reference to member isFavorite
 */
bool &MusicInfo::isFavorite() { return m_isFavorite; }

/*!
 * @brief This function sets a value in member isPlaying
 * @param _isPlaying New value for member isPlaying
 */
void MusicInfo::isPlaying(bool _isPlaying) { m_isPlaying = _isPlaying; }

/*!
 * @brief This function returns the value of member isPlaying
 * @return Value of member isPlaying
 */
bool MusicInfo::isPlaying() const { return m_isPlaying; }

/*!
 * @brief This function returns a reference to member isPlaying
 * @return Reference to member isPlaying
 */
bool &MusicInfo::isPlaying() { return m_isPlaying; }

NavigationInfo::NavigationInfo() {
    // m_isNavigating com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5c33f1a9
    m_isNavigating = false;
    // m_directionIcon com.eprosima.idl.parser.typecode.SequenceTypeCode@1623b78d

    // m_distance com.eprosima.idl.parser.typecode.StringTypeCode@c8c12ac
    m_distance = "";
    // m_distanceUnit com.eprosima.idl.parser.typecode.StringTypeCode@6adbc9d
    m_distanceUnit = "";
    // m_operation com.eprosima.idl.parser.typecode.StringTypeCode@4550bb58
    m_operation = "";
    // m_where com.eprosima.idl.parser.typecode.StringTypeCode@4ec4f3a0
    m_where = "";
    // m_title1 com.eprosima.idl.parser.typecode.StringTypeCode@223191a6
    m_title1 = "";
    // m_title2 com.eprosima.idl.parser.typecode.StringTypeCode@49139829
    m_title2 = "";
}

NavigationInfo::~NavigationInfo() {}

NavigationInfo::NavigationInfo(const NavigationInfo &x) {
    m_isNavigating = x.m_isNavigating;
    m_directionIcon = x.m_directionIcon;
    m_distance = x.m_distance;
    m_distanceUnit = x.m_distanceUnit;
    m_operation = x.m_operation;
    m_where = x.m_where;
    m_title1 = x.m_title1;
    m_title2 = x.m_title2;
}

NavigationInfo::NavigationInfo(NavigationInfo &&x) {
    m_isNavigating = x.m_isNavigating;
    m_directionIcon = std::move(x.m_directionIcon);
    m_distance = std::move(x.m_distance);
    m_distanceUnit = std::move(x.m_distanceUnit);
    m_operation = std::move(x.m_operation);
    m_where = std::move(x.m_where);
    m_title1 = std::move(x.m_title1);
    m_title2 = std::move(x.m_title2);
}

NavigationInfo &NavigationInfo::operator=(const NavigationInfo &x) {

    m_isNavigating = x.m_isNavigating;
    m_directionIcon = x.m_directionIcon;
    m_distance = x.m_distance;
    m_distanceUnit = x.m_distanceUnit;
    m_operation = x.m_operation;
    m_where = x.m_where;
    m_title1 = x.m_title1;
    m_title2 = x.m_title2;

    return *this;
}

NavigationInfo &NavigationInfo::operator=(NavigationInfo &&x) {

    m_isNavigating = x.m_isNavigating;
    m_directionIcon = std::move(x.m_directionIcon);
    m_distance = std::move(x.m_distance);
    m_distanceUnit = std::move(x.m_distanceUnit);
    m_operation = std::move(x.m_operation);
    m_where = std::move(x.m_where);
    m_title1 = std::move(x.m_title1);
    m_title2 = std::move(x.m_title2);

    return *this;
}

size_t NavigationInfo::getMaxCdrSerializedSize(size_t current_alignment) {
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t NavigationInfo::getCdrSerializedSize(const NavigationInfo &data, size_t current_alignment) {
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.directionIcon().size() > 0) {
        current_alignment +=
            (data.directionIcon().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.distance().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.distanceUnit().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.operation().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.where().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.title1().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.title2().size() + 1;

    return current_alignment - initial_alignment;
}

void NavigationInfo::serialize(eprosima::fastcdr::Cdr &scdr) const {

    scdr << m_isNavigating;
    scdr << m_directionIcon;
    scdr << m_distance;
    scdr << m_distanceUnit;
    scdr << m_operation;
    scdr << m_where;
    scdr << m_title1;
    scdr << m_title2;
}

void NavigationInfo::deserialize(eprosima::fastcdr::Cdr &dcdr) {

    dcdr >> m_isNavigating;
    dcdr >> m_directionIcon;
    dcdr >> m_distance;
    dcdr >> m_distanceUnit;
    dcdr >> m_operation;
    dcdr >> m_where;
    dcdr >> m_title1;
    dcdr >> m_title2;
}

/*!
 * @brief This function sets a value in member isNavigating
 * @param _isNavigating New value for member isNavigating
 */
void NavigationInfo::isNavigating(bool _isNavigating) { m_isNavigating = _isNavigating; }

/*!
 * @brief This function returns the value of member isNavigating
 * @return Value of member isNavigating
 */
bool NavigationInfo::isNavigating() const { return m_isNavigating; }

/*!
 * @brief This function returns a reference to member isNavigating
 * @return Reference to member isNavigating
 */
bool &NavigationInfo::isNavigating() { return m_isNavigating; }

/*!
 * @brief This function copies the value in member directionIcon
 * @param _directionIcon New value to be copied in member directionIcon
 */
void NavigationInfo::directionIcon(const std::vector<char> &_directionIcon) { m_directionIcon = _directionIcon; }

/*!
 * @brief This function moves the value in member directionIcon
 * @param _directionIcon New value to be moved in member directionIcon
 */
void NavigationInfo::directionIcon(std::vector<char> &&_directionIcon) { m_directionIcon = std::move(_directionIcon); }

/*!
 * @brief This function returns a constant reference to member directionIcon
 * @return Constant reference to member directionIcon
 */
const std::vector<char> &NavigationInfo::directionIcon() const { return m_directionIcon; }

/*!
 * @brief This function returns a reference to member directionIcon
 * @return Reference to member directionIcon
 */
std::vector<char> &NavigationInfo::directionIcon() { return m_directionIcon; }
/*!
 * @brief This function copies the value in member distance
 * @param _distance New value to be copied in member distance
 */
void NavigationInfo::distance(const std::string &_distance) { m_distance = _distance; }

/*!
 * @brief This function moves the value in member distance
 * @param _distance New value to be moved in member distance
 */
void NavigationInfo::distance(std::string &&_distance) { m_distance = std::move(_distance); }

/*!
 * @brief This function returns a constant reference to member distance
 * @return Constant reference to member distance
 */
const std::string &NavigationInfo::distance() const { return m_distance; }

/*!
 * @brief This function returns a reference to member distance
 * @return Reference to member distance
 */
std::string &NavigationInfo::distance() { return m_distance; }
/*!
 * @brief This function copies the value in member distanceUnit
 * @param _distanceUnit New value to be copied in member distanceUnit
 */
void NavigationInfo::distanceUnit(const std::string &_distanceUnit) { m_distanceUnit = _distanceUnit; }

/*!
 * @brief This function moves the value in member distanceUnit
 * @param _distanceUnit New value to be moved in member distanceUnit
 */
void NavigationInfo::distanceUnit(std::string &&_distanceUnit) { m_distanceUnit = std::move(_distanceUnit); }

/*!
 * @brief This function returns a constant reference to member distanceUnit
 * @return Constant reference to member distanceUnit
 */
const std::string &NavigationInfo::distanceUnit() const { return m_distanceUnit; }

/*!
 * @brief This function returns a reference to member distanceUnit
 * @return Reference to member distanceUnit
 */
std::string &NavigationInfo::distanceUnit() { return m_distanceUnit; }
/*!
 * @brief This function copies the value in member operation
 * @param _operation New value to be copied in member operation
 */
void NavigationInfo::operation(const std::string &_operation) { m_operation = _operation; }

/*!
 * @brief This function moves the value in member operation
 * @param _operation New value to be moved in member operation
 */
void NavigationInfo::operation(std::string &&_operation) { m_operation = std::move(_operation); }

/*!
 * @brief This function returns a constant reference to member operation
 * @return Constant reference to member operation
 */
const std::string &NavigationInfo::operation() const { return m_operation; }

/*!
 * @brief This function returns a reference to member operation
 * @return Reference to member operation
 */
std::string &NavigationInfo::operation() { return m_operation; }
/*!
 * @brief This function copies the value in member where
 * @param _where New value to be copied in member where
 */
void NavigationInfo::where(const std::string &_where) { m_where = _where; }

/*!
 * @brief This function moves the value in member where
 * @param _where New value to be moved in member where
 */
void NavigationInfo::where(std::string &&_where) { m_where = std::move(_where); }

/*!
 * @brief This function returns a constant reference to member where
 * @return Constant reference to member where
 */
const std::string &NavigationInfo::where() const { return m_where; }

/*!
 * @brief This function returns a reference to member where
 * @return Reference to member where
 */
std::string &NavigationInfo::where() { return m_where; }
/*!
 * @brief This function copies the value in member title1
 * @param _title1 New value to be copied in member title1
 */
void NavigationInfo::title1(const std::string &_title1) { m_title1 = _title1; }

/*!
 * @brief This function moves the value in member title1
 * @param _title1 New value to be moved in member title1
 */
void NavigationInfo::title1(std::string &&_title1) { m_title1 = std::move(_title1); }

/*!
 * @brief This function returns a constant reference to member title1
 * @return Constant reference to member title1
 */
const std::string &NavigationInfo::title1() const { return m_title1; }

/*!
 * @brief This function returns a reference to member title1
 * @return Reference to member title1
 */
std::string &NavigationInfo::title1() { return m_title1; }
/*!
 * @brief This function copies the value in member title2
 * @param _title2 New value to be copied in member title2
 */
void NavigationInfo::title2(const std::string &_title2) { m_title2 = _title2; }

/*!
 * @brief This function moves the value in member title2
 * @param _title2 New value to be moved in member title2
 */
void NavigationInfo::title2(std::string &&_title2) { m_title2 = std::move(_title2); }

/*!
 * @brief This function returns a constant reference to member title2
 * @return Constant reference to member title2
 */
const std::string &NavigationInfo::title2() const { return m_title2; }

/*!
 * @brief This function returns a reference to member title2
 * @return Reference to member title2
 */
std::string &NavigationInfo::title2() { return m_title2; }

PhoneStateInfo::PhoneStateInfo() {
    // m_phoneCs com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2f9f7dcf
    m_phoneCs = 0;
    // m_isScreenLocked com.eprosima.idl.parser.typecode.PrimitiveTypeCode@747ddf94
    m_isScreenLocked = false;
    // m_isWechatQqCall com.eprosima.idl.parser.typecode.PrimitiveTypeCode@35e2d654
    m_isWechatQqCall = false;
}

PhoneStateInfo::~PhoneStateInfo() {}

PhoneStateInfo::PhoneStateInfo(const PhoneStateInfo &x) {
    m_phoneCs = x.m_phoneCs;
    m_isScreenLocked = x.m_isScreenLocked;
    m_isWechatQqCall = x.m_isWechatQqCall;
}

PhoneStateInfo::PhoneStateInfo(PhoneStateInfo &&x) {
    m_phoneCs = x.m_phoneCs;
    m_isScreenLocked = x.m_isScreenLocked;
    m_isWechatQqCall = x.m_isWechatQqCall;
}

PhoneStateInfo &PhoneStateInfo::operator=(const PhoneStateInfo &x) {

    m_phoneCs = x.m_phoneCs;
    m_isScreenLocked = x.m_isScreenLocked;
    m_isWechatQqCall = x.m_isWechatQqCall;

    return *this;
}

PhoneStateInfo &PhoneStateInfo::operator=(PhoneStateInfo &&x) {

    m_phoneCs = x.m_phoneCs;
    m_isScreenLocked = x.m_isScreenLocked;
    m_isWechatQqCall = x.m_isWechatQqCall;

    return *this;
}

size_t PhoneStateInfo::getMaxCdrSerializedSize(size_t current_alignment) {
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    return current_alignment - initial_alignment;
}

size_t PhoneStateInfo::getCdrSerializedSize(const PhoneStateInfo &data, size_t current_alignment) {
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    return current_alignment - initial_alignment;
}

void PhoneStateInfo::serialize(eprosima::fastcdr::Cdr &scdr) const {

    scdr << m_phoneCs;
    scdr << m_isScreenLocked;
    scdr << m_isWechatQqCall;
}

void PhoneStateInfo::deserialize(eprosima::fastcdr::Cdr &dcdr) {

    dcdr >> m_phoneCs;
    dcdr >> m_isScreenLocked;
    dcdr >> m_isWechatQqCall;
}

/*!
 * @brief This function sets a value in member phoneCs
 * @param _phoneCs New value for member phoneCs
 */
void PhoneStateInfo::phoneCs(int32_t _phoneCs) { m_phoneCs = _phoneCs; }

/*!
 * @brief This function returns the value of member phoneCs
 * @return Value of member phoneCs
 */
int32_t PhoneStateInfo::phoneCs() const { return m_phoneCs; }

/*!
 * @brief This function returns a reference to member phoneCs
 * @return Reference to member phoneCs
 */
int32_t &PhoneStateInfo::phoneCs() { return m_phoneCs; }

/*!
 * @brief This function sets a value in member isScreenLocked
 * @param _isScreenLocked New value for member isScreenLocked
 */
void PhoneStateInfo::isScreenLocked(bool _isScreenLocked) { m_isScreenLocked = _isScreenLocked; }

/*!
 * @brief This function returns the value of member isScreenLocked
 * @return Value of member isScreenLocked
 */
bool PhoneStateInfo::isScreenLocked() const { return m_isScreenLocked; }

/*!
 * @brief This function returns a reference to member isScreenLocked
 * @return Reference to member isScreenLocked
 */
bool &PhoneStateInfo::isScreenLocked() { return m_isScreenLocked; }

/*!
 * @brief This function sets a value in member isWechatQqCall
 * @param _isWechatQqCall New value for member isWechatQqCall
 */
void PhoneStateInfo::isWechatQqCall(bool _isWechatQqCall) { m_isWechatQqCall = _isWechatQqCall; }

/*!
 * @brief This function returns the value of member isWechatQqCall
 * @return Value of member isWechatQqCall
 */
bool PhoneStateInfo::isWechatQqCall() const { return m_isWechatQqCall; }

/*!
 * @brief This function returns a reference to member isWechatQqCall
 * @return Reference to member isWechatQqCall
 */
bool &PhoneStateInfo::isWechatQqCall() { return m_isWechatQqCall; }
