/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 *
 * @file AIOpenApiProxy.cxx
 * This source file contains the definition of the proxy for all interfaces.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "AIOpenApiProxy.h"
#include "AIOpenApiProtocol.h"
#include <rpcdds/transports/ProxyTransport.h>

namespace AI {

namespace OpenApi {
VSPProxy::VSPProxy(eprosima::rpc::strategy::ServerStrategy &strategy,
                   eprosima::rpc::transport::ProxyTransport &transport,
                   eprosima::rpc::protocol::AIOpenApiProtocol &protocol, VSPProxyImpl &servant)
    : Proxy(strategy, transport, protocol), _impl(servant) {
    protocol.activateInterface("AI::OpenApi::VSP");
    protocol.linkAI_OpenApi_VSPNotifyImpl(servant);
}

VSPProxy::~VSPProxy() {}

bool VSPProxy::beginVoice() {
    bool return_ =
        dynamic_cast<eprosima::rpc::protocol::AIOpenApiProtocol &>(getProtocol()).AI_OpenApi_VSP_beginVoice();
    return return_;
}
void VSPProxy::beginVoice_async(VSP_beginVoiceCallbackHandler &obj) {
    dynamic_cast<eprosima::rpc::protocol::AIOpenApiProtocol &>(getProtocol()).AI_OpenApi_VSP_beginVoice_async(obj);
}

bool VSPProxy::stopVoice() {
    bool return_ = dynamic_cast<eprosima::rpc::protocol::AIOpenApiProtocol &>(getProtocol()).AI_OpenApi_VSP_stopVoice();
    return return_;
}
void VSPProxy::stopVoice_async(VSP_stopVoiceCallbackHandler &obj) {
    dynamic_cast<eprosima::rpc::protocol::AIOpenApiProtocol &>(getProtocol()).AI_OpenApi_VSP_stopVoice_async(obj);
}

PhotoProxy::PhotoProxy(eprosima::rpc::strategy::ServerStrategy &strategy,
                       eprosima::rpc::transport::ProxyTransport &transport,
                       eprosima::rpc::protocol::AIOpenApiProtocol &protocol, PhotoProxyImpl &servant)
    : Proxy(strategy, transport, protocol), _impl(servant) {
    protocol.activateInterface("AI::OpenApi::Photo");
    protocol.linkAI_OpenApi_PhotoNotifyImpl(servant);
}

PhotoProxy::~PhotoProxy() {}

std::string PhotoProxy::getPhotoInfo(/*in*/ const std::string &pId) {
    std::string return_ =
        dynamic_cast<eprosima::rpc::protocol::AIOpenApiProtocol &>(getProtocol()).AI_OpenApi_Photo_getPhotoInfo(pId);
    return return_;
}
void PhotoProxy::getPhotoInfo_async(Photo_getPhotoInfoCallbackHandler &obj, /*in*/ const std::string &pId) {
    dynamic_cast<eprosima::rpc::protocol::AIOpenApiProtocol &>(getProtocol())
        .AI_OpenApi_Photo_getPhotoInfo_async(obj, pId);
}

};  // namespace OpenApi

};  // namespace AI
