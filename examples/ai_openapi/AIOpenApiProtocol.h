/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 *
 * @file AIOpenApiProtocol.h
 * This header file contains the declaration of the interface for all protocols.
 *
 * This file was generated by the tool rpcddsgen.
 */

#ifndef _AIOpenApi_PROTOCOL_H_
#define _AIOpenApi_PROTOCOL_H_

#include "AIOpenApi.h"
#include "AIOpenApiAsyncCallbackHandlers.h"
#include "AIOpenApiProxyImpl.h"
#include "AIOpenApiServerImpl.h"
#include <rpcdds/protocols/Protocol.h>
namespace eprosima {
namespace rpc {
namespace protocol {
/*!
 * @brief Protocol base class for the specific application
 * @ingroup AIOPENAPI
 */
class RPCUSERDllExport AIOpenApiProtocol : public Protocol {
public:
    /*!
     * @brief This method sets the transport for the communications. It has to be implemented by the children classes.
     * @param transport Transport to use.
     * @return True if the assignment is successful, false otherwise
     */
    virtual bool setTransport(eprosima::rpc::transport::Transport &transport) = 0;

    /*!
     * @brief In some protocols this function activates needed entities to use an interface.
     * @param interfaceName Interface name.
     * @return Whether the activation works successfully.
     */
    virtual bool activateInterface(const char *interfaceName) = 0;

    /*!
     * @brief This method links a specific servant with the protocol.
     * @param s_impl Servant implementation.
     */
    void linkAI_OpenApi_VSPImpl(AI::OpenApi::VSPServerImpl &s_impl) { _AI_OpenApi_VSP_s_impl = &s_impl; }

    /*!
     * @brief This method links a specific servant with the protocol.
     * @param s_impl Servant implementation.
     */
    void linkAI_OpenApi_PhotoImpl(AI::OpenApi::PhotoServerImpl &s_impl) { _AI_OpenApi_Photo_s_impl = &s_impl; }

    /*!
     * @brief This method links a specific proxy with the protocol.
     * @param p_impl Servant implementation.
     */
    void linkAI_OpenApi_VSPNotifyImpl(AI::OpenApi::VSPProxyImpl &p_impl) { _AI_OpenApi_VSP_p_impl = &p_impl; }

    /*!
     * @brief This method links a specific proxy with the protocol.
     * @param p_impl Servant implementation.
     */
    void linkAI_OpenApi_PhotoNotifyImpl(AI::OpenApi::PhotoProxyImpl &p_impl) { _AI_OpenApi_Photo_p_impl = &p_impl; }

    /*!
     * @brief This method implements the proxy part of the protocol for the operation beginVoice.
     *        It has to be implemented by the child classes.
     */
    virtual bool AI_OpenApi_VSP_beginVoice() = 0;
    /*!
     * @brief This asynchronous method implements the proxy part of the protocol for the operation beginVoice.
     *        It has to be implemented by the child classes.
     */
    virtual void AI_OpenApi_VSP_beginVoice_async(AI::OpenApi::VSP_beginVoiceCallbackHandler &obj) = 0;

    /*!
     * @brief This method implements the proxy part of the protocol for the operation stopVoice.
     *        It has to be implemented by the child classes.
     */
    virtual bool AI_OpenApi_VSP_stopVoice() = 0;
    /*!
     * @brief This asynchronous method implements the proxy part of the protocol for the operation stopVoice.
     *        It has to be implemented by the child classes.
     */
    virtual void AI_OpenApi_VSP_stopVoice_async(AI::OpenApi::VSP_stopVoiceCallbackHandler &obj) = 0;

    /*!
     * @brief This method implements the proxy part of the protocol for the operation init.
     *        It has to be implemented by the child classes.
     */
    virtual void AI_OpenApi_VSP_init(/*in*/ int32_t state) = 0;

    /*!
     * @brief This method implements the proxy part of the protocol for the operation ready.
     *        It has to be implemented by the child classes.
     */
    virtual void AI_OpenApi_VSP_ready() = 0;

    /*!
     * @brief This method implements the proxy part of the protocol for the operation vadBegin.
     *        It has to be implemented by the child classes.
     */
    virtual void AI_OpenApi_VSP_vadBegin() = 0;

    /*!
     * @brief This method implements the proxy part of the protocol for the operation vadEnd.
     *        It has to be implemented by the child classes.
     */
    virtual void AI_OpenApi_VSP_vadEnd() = 0;

    /*!
     * @brief This method implements the proxy part of the protocol for the operation error.
     *        It has to be implemented by the child classes.
     */
    virtual void AI_OpenApi_VSP_error(/*in*/ const AI::Error &error) = 0;

    /*!
     * @brief This method implements the proxy part of the protocol for the operation partial.
     *        It has to be implemented by the child classes.
     */
    virtual void AI_OpenApi_VSP_partial(/*in*/ const std::string &text) = 0;

    /*!
     * @brief This method implements the proxy part of the protocol for the operation finalResult.
     *        It has to be implemented by the child classes.
     */
    virtual void AI_OpenApi_VSP_finalResult(/*in*/ const std::string &text) = 0;

    /*!
     * @brief This method implements the proxy part of the protocol for the operation getPhotoInfo.
     *        It has to be implemented by the child classes.
     */
    virtual std::string AI_OpenApi_Photo_getPhotoInfo(/*in*/ const std::string &pId) = 0;
    /*!
     * @brief This asynchronous method implements the proxy part of the protocol for the operation getPhotoInfo.
     *        It has to be implemented by the child classes.
     */
    virtual void AI_OpenApi_Photo_getPhotoInfo_async(AI::OpenApi::Photo_getPhotoInfoCallbackHandler &obj,
                                                     /*in*/ const std::string &pId) = 0;

protected:
    AIOpenApiProtocol()
        : Protocol()

          ,
          _AI_OpenApi_VSP_s_impl(NULL)

          ,
          _AI_OpenApi_Photo_s_impl(NULL)

          ,
          _AI_OpenApi_VSP_p_impl(NULL)

          ,
          _AI_OpenApi_Photo_p_impl(NULL)

    {}

    virtual ~AIOpenApiProtocol() {}

    AI::OpenApi::VSPServerImpl *_AI_OpenApi_VSP_s_impl;

    AI::OpenApi::PhotoServerImpl *_AI_OpenApi_Photo_s_impl;

    AI::OpenApi::VSPProxyImpl *_AI_OpenApi_VSP_p_impl;

    AI::OpenApi::PhotoProxyImpl *_AI_OpenApi_Photo_p_impl;
};
}  // namespace protocol
}  // namespace rpc
}  // namespace eprosima

#endif  // _AIOpenApi_PROTOCOL_H_