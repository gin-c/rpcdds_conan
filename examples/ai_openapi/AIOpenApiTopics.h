/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 *
 * @file AIOpenApiTopics.h
 * This header file contains the declaration of topics generated using operations in the IDL file.
 *
 * This file was generated by the tool rpcddsgen.
 */

#ifndef _AIOpenApi_TOPICS_H_
#define _AIOpenApi_TOPICS_H_

#include "AIOpenApi.h"
#include <rpcdds/protocols/dds/MessageHeader.h>
#include <rpcdds/utils/Messages.h>

#include <cstddef>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define user_cpp_DllExport __declspec(dllexport)
#else
#define user_cpp_DllExport
#endif
#else
#define user_cpp_DllExport
#endif

namespace AI {

namespace OpenApi {

/*!
 * @brief This class represents the structure VSP_beginVoice_In that can be used to send/receive requests
 * for the operation VSP::beginVoice.
 * @ingroup AIOPENAPI
 */
class VSP_beginVoice_In {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_beginVoice_In();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_beginVoice_In();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object VSP_beginVoice_In that will be copied.
     */
    user_cpp_DllExport VSP_beginVoice_In(const VSP_beginVoice_In &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_beginVoice_In that will be copied.
     */
    user_cpp_DllExport VSP_beginVoice_In(VSP_beginVoice_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_beginVoice that will be copied.
     */
    user_cpp_DllExport VSP_beginVoice_In &operator=(const VSP_beginVoice_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_beginVoice that will be copied.
     */
    user_cpp_DllExport VSP_beginVoice_In &operator=(VSP_beginVoice_In &&x);

    inline user_cpp_DllExport void dummy(eprosima::rpc::protocol::dds::rpc::UnusedMember _dummy) { m_dummy = _dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember dummy() const { return m_dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember &dummy() { return m_dummy; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_beginVoice_In &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    eprosima::rpc::protocol::dds::rpc::UnusedMember m_dummy;
};
/*!
 * @brief This class encapsulates output paramaters for operation VSP::beginVoice.
 * @ingroup AIOPENAPI
 */
class VSP_beginVoice_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_beginVoice_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_beginVoice_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_beginVoice_Out that will be copied.
     */
    user_cpp_DllExport VSP_beginVoice_Out(const VSP_beginVoice_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_beginVoice_Out that will be copied.
     */
    user_cpp_DllExport VSP_beginVoice_Out(VSP_beginVoice_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_beginVoice that will be copied.
     */
    user_cpp_DllExport VSP_beginVoice_Out &operator=(const VSP_beginVoice_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_beginVoice that will be copied.
     */
    user_cpp_DllExport VSP_beginVoice_Out &operator=(VSP_beginVoice_Out &&x);

    /*!
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    inline user_cpp_DllExport void return_(bool _return_) { m_return_ = _return_; }

    /*!
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    inline user_cpp_DllExport bool return_() const { return m_return_; }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport bool &return_() { return m_return_; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_beginVoice_Out &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    bool m_return_;
};

/*!
 * @brief This class represents the structure VSP_beginVoice_Result that can be used to send/receive replies
 * for the operation VSP::beginVoice.
 *
 * @ingroup AIOPENAPI
 */
class VSP_beginVoice_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_beginVoice_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_beginVoice_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_beginVoice_Result that will be copied.
     */
    user_cpp_DllExport VSP_beginVoice_Result(const VSP_beginVoice_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_beginVoice_Result that will be copied.
     */
    user_cpp_DllExport VSP_beginVoice_Result(VSP_beginVoice_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_beginVoice that will be copied.
     */
    user_cpp_DllExport VSP_beginVoice_Result &operator=(const VSP_beginVoice_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_beginVoice that will be copied.
     */
    user_cpp_DllExport VSP_beginVoice_Result &operator=(VSP_beginVoice_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const VSP_beginVoice_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(VSP_beginVoice_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const VSP_beginVoice_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport VSP_beginVoice_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_beginVoice_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    VSP_beginVoice_Out m_result;
};
/*!
 * @brief This class represents the structure VSP_stopVoice_In that can be used to send/receive requests
 * for the operation VSP::stopVoice.
 * @ingroup AIOPENAPI
 */
class VSP_stopVoice_In {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_stopVoice_In();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_stopVoice_In();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object VSP_stopVoice_In that will be copied.
     */
    user_cpp_DllExport VSP_stopVoice_In(const VSP_stopVoice_In &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_stopVoice_In that will be copied.
     */
    user_cpp_DllExport VSP_stopVoice_In(VSP_stopVoice_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_stopVoice that will be copied.
     */
    user_cpp_DllExport VSP_stopVoice_In &operator=(const VSP_stopVoice_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_stopVoice that will be copied.
     */
    user_cpp_DllExport VSP_stopVoice_In &operator=(VSP_stopVoice_In &&x);

    inline user_cpp_DllExport void dummy(eprosima::rpc::protocol::dds::rpc::UnusedMember _dummy) { m_dummy = _dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember dummy() const { return m_dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember &dummy() { return m_dummy; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_stopVoice_In &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    eprosima::rpc::protocol::dds::rpc::UnusedMember m_dummy;
};
/*!
 * @brief This class encapsulates output paramaters for operation VSP::stopVoice.
 * @ingroup AIOPENAPI
 */
class VSP_stopVoice_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_stopVoice_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_stopVoice_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_stopVoice_Out that will be copied.
     */
    user_cpp_DllExport VSP_stopVoice_Out(const VSP_stopVoice_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_stopVoice_Out that will be copied.
     */
    user_cpp_DllExport VSP_stopVoice_Out(VSP_stopVoice_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_stopVoice that will be copied.
     */
    user_cpp_DllExport VSP_stopVoice_Out &operator=(const VSP_stopVoice_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_stopVoice that will be copied.
     */
    user_cpp_DllExport VSP_stopVoice_Out &operator=(VSP_stopVoice_Out &&x);

    /*!
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    inline user_cpp_DllExport void return_(bool _return_) { m_return_ = _return_; }

    /*!
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    inline user_cpp_DllExport bool return_() const { return m_return_; }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport bool &return_() { return m_return_; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_stopVoice_Out &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    bool m_return_;
};

/*!
 * @brief This class represents the structure VSP_stopVoice_Result that can be used to send/receive replies
 * for the operation VSP::stopVoice.
 *
 * @ingroup AIOPENAPI
 */
class VSP_stopVoice_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_stopVoice_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_stopVoice_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_stopVoice_Result that will be copied.
     */
    user_cpp_DllExport VSP_stopVoice_Result(const VSP_stopVoice_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_stopVoice_Result that will be copied.
     */
    user_cpp_DllExport VSP_stopVoice_Result(VSP_stopVoice_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_stopVoice that will be copied.
     */
    user_cpp_DllExport VSP_stopVoice_Result &operator=(const VSP_stopVoice_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_stopVoice that will be copied.
     */
    user_cpp_DllExport VSP_stopVoice_Result &operator=(VSP_stopVoice_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const VSP_stopVoice_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(VSP_stopVoice_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const VSP_stopVoice_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport VSP_stopVoice_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_stopVoice_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    VSP_stopVoice_Out m_result;
};

/*!
 * @brief This class encapsulates output paramaters for operation VSP::init.
 * @ingroup AIOPENAPI
 */
class VSP_init_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_init_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_init_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_init_Out that will be copied.
     */
    user_cpp_DllExport VSP_init_Out(const VSP_init_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_init_Out that will be copied.
     */
    user_cpp_DllExport VSP_init_Out(VSP_init_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_init that will be copied.
     */
    user_cpp_DllExport VSP_init_Out &operator=(const VSP_init_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_init that will be copied.
     */
    user_cpp_DllExport VSP_init_Out &operator=(VSP_init_Out &&x);

    /*!
     * @brief This function sets a value in member state
     * @param _state New value for member state
     */
    inline user_cpp_DllExport void state(int32_t _state) { m_state = _state; }

    /*!
     * @brief This function returns the value of member state
     * @return Value of member state
     */
    inline user_cpp_DllExport int32_t state() const { return m_state; }

    /*!
     * @brief This function returns a reference to member state
     * @return Reference to member state
     */
    inline user_cpp_DllExport int32_t &state() { return m_state; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_init_Out &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m_state;
};

/*!
 * @brief This class represents the structure VSP_init_Result that can be used to send/receive replies
 * for the operation VSP::init.
 *
 * @ingroup AIOPENAPI
 */
class VSP_init_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_init_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_init_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_init_Result that will be copied.
     */
    user_cpp_DllExport VSP_init_Result(const VSP_init_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_init_Result that will be copied.
     */
    user_cpp_DllExport VSP_init_Result(VSP_init_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_init that will be copied.
     */
    user_cpp_DllExport VSP_init_Result &operator=(const VSP_init_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_init that will be copied.
     */
    user_cpp_DllExport VSP_init_Result &operator=(VSP_init_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const VSP_init_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(VSP_init_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const VSP_init_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport VSP_init_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_init_Result &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    VSP_init_Out m_result;
};

/*!
 * @brief This class encapsulates output paramaters for operation VSP::ready.
 * @ingroup AIOPENAPI
 */
class VSP_ready_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_ready_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_ready_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_ready_Out that will be copied.
     */
    user_cpp_DllExport VSP_ready_Out(const VSP_ready_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_ready_Out that will be copied.
     */
    user_cpp_DllExport VSP_ready_Out(VSP_ready_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_ready that will be copied.
     */
    user_cpp_DllExport VSP_ready_Out &operator=(const VSP_ready_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_ready that will be copied.
     */
    user_cpp_DllExport VSP_ready_Out &operator=(VSP_ready_Out &&x);

    inline user_cpp_DllExport void dummy(eprosima::rpc::protocol::dds::rpc::UnusedMember _dummy) { m_dummy = _dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember dummy() const { return m_dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember &dummy() { return m_dummy; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_ready_Out &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    eprosima::rpc::protocol::dds::rpc::UnusedMember m_dummy;
};

/*!
 * @brief This class represents the structure VSP_ready_Result that can be used to send/receive replies
 * for the operation VSP::ready.
 *
 * @ingroup AIOPENAPI
 */
class VSP_ready_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_ready_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_ready_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_ready_Result that will be copied.
     */
    user_cpp_DllExport VSP_ready_Result(const VSP_ready_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_ready_Result that will be copied.
     */
    user_cpp_DllExport VSP_ready_Result(VSP_ready_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_ready that will be copied.
     */
    user_cpp_DllExport VSP_ready_Result &operator=(const VSP_ready_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_ready that will be copied.
     */
    user_cpp_DllExport VSP_ready_Result &operator=(VSP_ready_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const VSP_ready_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(VSP_ready_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const VSP_ready_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport VSP_ready_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_ready_Result &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    VSP_ready_Out m_result;
};

/*!
 * @brief This class encapsulates output paramaters for operation VSP::vadBegin.
 * @ingroup AIOPENAPI
 */
class VSP_vadBegin_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_vadBegin_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_vadBegin_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_vadBegin_Out that will be copied.
     */
    user_cpp_DllExport VSP_vadBegin_Out(const VSP_vadBegin_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_vadBegin_Out that will be copied.
     */
    user_cpp_DllExport VSP_vadBegin_Out(VSP_vadBegin_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_vadBegin that will be copied.
     */
    user_cpp_DllExport VSP_vadBegin_Out &operator=(const VSP_vadBegin_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_vadBegin that will be copied.
     */
    user_cpp_DllExport VSP_vadBegin_Out &operator=(VSP_vadBegin_Out &&x);

    inline user_cpp_DllExport void dummy(eprosima::rpc::protocol::dds::rpc::UnusedMember _dummy) { m_dummy = _dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember dummy() const { return m_dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember &dummy() { return m_dummy; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_vadBegin_Out &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    eprosima::rpc::protocol::dds::rpc::UnusedMember m_dummy;
};

/*!
 * @brief This class represents the structure VSP_vadBegin_Result that can be used to send/receive replies
 * for the operation VSP::vadBegin.
 *
 * @ingroup AIOPENAPI
 */
class VSP_vadBegin_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_vadBegin_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_vadBegin_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_vadBegin_Result that will be copied.
     */
    user_cpp_DllExport VSP_vadBegin_Result(const VSP_vadBegin_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_vadBegin_Result that will be copied.
     */
    user_cpp_DllExport VSP_vadBegin_Result(VSP_vadBegin_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_vadBegin that will be copied.
     */
    user_cpp_DllExport VSP_vadBegin_Result &operator=(const VSP_vadBegin_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_vadBegin that will be copied.
     */
    user_cpp_DllExport VSP_vadBegin_Result &operator=(VSP_vadBegin_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const VSP_vadBegin_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(VSP_vadBegin_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const VSP_vadBegin_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport VSP_vadBegin_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_vadBegin_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    VSP_vadBegin_Out m_result;
};

/*!
 * @brief This class encapsulates output paramaters for operation VSP::vadEnd.
 * @ingroup AIOPENAPI
 */
class VSP_vadEnd_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_vadEnd_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_vadEnd_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_vadEnd_Out that will be copied.
     */
    user_cpp_DllExport VSP_vadEnd_Out(const VSP_vadEnd_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_vadEnd_Out that will be copied.
     */
    user_cpp_DllExport VSP_vadEnd_Out(VSP_vadEnd_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_vadEnd that will be copied.
     */
    user_cpp_DllExport VSP_vadEnd_Out &operator=(const VSP_vadEnd_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_vadEnd that will be copied.
     */
    user_cpp_DllExport VSP_vadEnd_Out &operator=(VSP_vadEnd_Out &&x);

    inline user_cpp_DllExport void dummy(eprosima::rpc::protocol::dds::rpc::UnusedMember _dummy) { m_dummy = _dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember dummy() const { return m_dummy; }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember &dummy() { return m_dummy; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_vadEnd_Out &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    eprosima::rpc::protocol::dds::rpc::UnusedMember m_dummy;
};

/*!
 * @brief This class represents the structure VSP_vadEnd_Result that can be used to send/receive replies
 * for the operation VSP::vadEnd.
 *
 * @ingroup AIOPENAPI
 */
class VSP_vadEnd_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_vadEnd_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_vadEnd_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_vadEnd_Result that will be copied.
     */
    user_cpp_DllExport VSP_vadEnd_Result(const VSP_vadEnd_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_vadEnd_Result that will be copied.
     */
    user_cpp_DllExport VSP_vadEnd_Result(VSP_vadEnd_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_vadEnd that will be copied.
     */
    user_cpp_DllExport VSP_vadEnd_Result &operator=(const VSP_vadEnd_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_vadEnd that will be copied.
     */
    user_cpp_DllExport VSP_vadEnd_Result &operator=(VSP_vadEnd_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const VSP_vadEnd_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(VSP_vadEnd_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const VSP_vadEnd_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport VSP_vadEnd_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_vadEnd_Result &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    VSP_vadEnd_Out m_result;
};

/*!
 * @brief This class encapsulates output paramaters for operation VSP::error.
 * @ingroup AIOPENAPI
 */
class VSP_error_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_error_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_error_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_error_Out that will be copied.
     */
    user_cpp_DllExport VSP_error_Out(const VSP_error_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_error_Out that will be copied.
     */
    user_cpp_DllExport VSP_error_Out(VSP_error_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_error that will be copied.
     */
    user_cpp_DllExport VSP_error_Out &operator=(const VSP_error_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_error that will be copied.
     */
    user_cpp_DllExport VSP_error_Out &operator=(VSP_error_Out &&x);

    /*!
     * @brief This function copies the value in member error
     * @param _error New value to be copied in member error
     */
    inline user_cpp_DllExport void error(const AI::Error &_error) { m_error = _error; }

    /*!
     * @brief This function moves the value in member error
     * @param _error New value to be moved in member error
     */
    inline user_cpp_DllExport void error(AI::Error &&_error) { m_error = std::move(_error); }

    /*!
     * @brief This function returns a constant reference to member error
     * @return Constant reference to member error
     */
    inline user_cpp_DllExport const AI::Error &error() const { return m_error; }

    /*!
     * @brief This function returns a reference to member error
     * @return Reference to member error
     */
    inline user_cpp_DllExport AI::Error &error() { return m_error; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_error_Out &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    AI::Error m_error;
};

/*!
 * @brief This class represents the structure VSP_error_Result that can be used to send/receive replies
 * for the operation VSP::error.
 *
 * @ingroup AIOPENAPI
 */
class VSP_error_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_error_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_error_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_error_Result that will be copied.
     */
    user_cpp_DllExport VSP_error_Result(const VSP_error_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_error_Result that will be copied.
     */
    user_cpp_DllExport VSP_error_Result(VSP_error_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_error that will be copied.
     */
    user_cpp_DllExport VSP_error_Result &operator=(const VSP_error_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_error that will be copied.
     */
    user_cpp_DllExport VSP_error_Result &operator=(VSP_error_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const VSP_error_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(VSP_error_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const VSP_error_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport VSP_error_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_error_Result &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    VSP_error_Out m_result;
};

/*!
 * @brief This class encapsulates output paramaters for operation VSP::partial.
 * @ingroup AIOPENAPI
 */
class VSP_partial_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_partial_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_partial_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_partial_Out that will be copied.
     */
    user_cpp_DllExport VSP_partial_Out(const VSP_partial_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_partial_Out that will be copied.
     */
    user_cpp_DllExport VSP_partial_Out(VSP_partial_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_partial that will be copied.
     */
    user_cpp_DllExport VSP_partial_Out &operator=(const VSP_partial_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_partial that will be copied.
     */
    user_cpp_DllExport VSP_partial_Out &operator=(VSP_partial_Out &&x);

    /*!
     * @brief This function copies the value in member text
     * @param _text New value to be copied in member text
     */
    inline user_cpp_DllExport void text(const std::string &_text) { m_text = _text; }

    /*!
     * @brief This function moves the value in member text
     * @param _text New value to be moved in member text
     */
    inline user_cpp_DllExport void text(std::string &&_text) { m_text = std::move(_text); }

    /*!
     * @brief This function returns a constant reference to member text
     * @return Constant reference to member text
     */
    inline user_cpp_DllExport const std::string &text() const { return m_text; }

    /*!
     * @brief This function returns a reference to member text
     * @return Reference to member text
     */
    inline user_cpp_DllExport std::string &text() { return m_text; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_partial_Out &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    std::string m_text;
};

/*!
 * @brief This class represents the structure VSP_partial_Result that can be used to send/receive replies
 * for the operation VSP::partial.
 *
 * @ingroup AIOPENAPI
 */
class VSP_partial_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_partial_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_partial_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_partial_Result that will be copied.
     */
    user_cpp_DllExport VSP_partial_Result(const VSP_partial_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_partial_Result that will be copied.
     */
    user_cpp_DllExport VSP_partial_Result(VSP_partial_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_partial that will be copied.
     */
    user_cpp_DllExport VSP_partial_Result &operator=(const VSP_partial_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_partial that will be copied.
     */
    user_cpp_DllExport VSP_partial_Result &operator=(VSP_partial_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const VSP_partial_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(VSP_partial_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const VSP_partial_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport VSP_partial_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_partial_Result &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    VSP_partial_Out m_result;
};

/*!
 * @brief This class encapsulates output paramaters for operation VSP::finalResult.
 * @ingroup AIOPENAPI
 */
class VSP_finalResult_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_finalResult_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_finalResult_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_finalResult_Out that will be copied.
     */
    user_cpp_DllExport VSP_finalResult_Out(const VSP_finalResult_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_finalResult_Out that will be copied.
     */
    user_cpp_DllExport VSP_finalResult_Out(VSP_finalResult_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_finalResult that will be copied.
     */
    user_cpp_DllExport VSP_finalResult_Out &operator=(const VSP_finalResult_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_finalResult that will be copied.
     */
    user_cpp_DllExport VSP_finalResult_Out &operator=(VSP_finalResult_Out &&x);

    /*!
     * @brief This function copies the value in member text
     * @param _text New value to be copied in member text
     */
    inline user_cpp_DllExport void text(const std::string &_text) { m_text = _text; }

    /*!
     * @brief This function moves the value in member text
     * @param _text New value to be moved in member text
     */
    inline user_cpp_DllExport void text(std::string &&_text) { m_text = std::move(_text); }

    /*!
     * @brief This function returns a constant reference to member text
     * @return Constant reference to member text
     */
    inline user_cpp_DllExport const std::string &text() const { return m_text; }

    /*!
     * @brief This function returns a reference to member text
     * @return Reference to member text
     */
    inline user_cpp_DllExport std::string &text() { return m_text; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_finalResult_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    std::string m_text;
};

/*!
 * @brief This class represents the structure VSP_finalResult_Result that can be used to send/receive replies
 * for the operation VSP::finalResult.
 *
 * @ingroup AIOPENAPI
 */
class VSP_finalResult_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_finalResult_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_finalResult_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_finalResult_Result that will be copied.
     */
    user_cpp_DllExport VSP_finalResult_Result(const VSP_finalResult_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_finalResult_Result that will be copied.
     */
    user_cpp_DllExport VSP_finalResult_Result(VSP_finalResult_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_finalResult that will be copied.
     */
    user_cpp_DllExport VSP_finalResult_Result &operator=(const VSP_finalResult_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_finalResult that will be copied.
     */
    user_cpp_DllExport VSP_finalResult_Result &operator=(VSP_finalResult_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const VSP_finalResult_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(VSP_finalResult_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const VSP_finalResult_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport VSP_finalResult_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_finalResult_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    VSP_finalResult_Out m_result;
};

/*!
 * @brief This class represents the union used in the DDS topic to encapsulate the operations in request samples.
 * @ingroup AIOPENAPI
 */
class VSP_Call {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_Call();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_Call();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_Call that will be copied.
     */
    user_cpp_DllExport VSP_Call(const VSP_Call &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_Call that will be copied.
     */
    user_cpp_DllExport VSP_Call(VSP_Call &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_Call that will be copied.
     */
    user_cpp_DllExport VSP_Call &operator=(const VSP_Call &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object VSP_Call that will be copied.
     */
    user_cpp_DllExport VSP_Call &operator=(VSP_Call &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownOp(eprosima::rpc::protocol::dds::rpc::UnknownOperation _unknownOp);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownOperation unknownOp() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownOperation &unknownOp();

    /*!
     * @brief This function copies the value in member beginVoice
     * @param _beginVoice New value to be copied in member beginVoice
     */
    user_cpp_DllExport void beginVoice(const VSP_beginVoice_In &_beginVoice);

    /*!
     * @brief This function moves the value in member beginVoice
     * @param _beginVoice New value to be moved in member beginVoice
     */
    user_cpp_DllExport void beginVoice(VSP_beginVoice_In &&_beginVoice);

    /*!
     * @brief This function returns a constant reference to member beginVoice
     * @return Constant reference to member beginVoice
     */
    user_cpp_DllExport const VSP_beginVoice_In &beginVoice() const;

    /*!
     * @brief This function returns a reference to member beginVoice
     * @return Reference to member beginVoice
     */
    user_cpp_DllExport VSP_beginVoice_In &beginVoice();

    /*!
     * @brief This function copies the value in member stopVoice
     * @param _stopVoice New value to be copied in member stopVoice
     */
    user_cpp_DllExport void stopVoice(const VSP_stopVoice_In &_stopVoice);

    /*!
     * @brief This function moves the value in member stopVoice
     * @param _stopVoice New value to be moved in member stopVoice
     */
    user_cpp_DllExport void stopVoice(VSP_stopVoice_In &&_stopVoice);

    /*!
     * @brief This function returns a constant reference to member stopVoice
     * @return Constant reference to member stopVoice
     */
    user_cpp_DllExport const VSP_stopVoice_In &stopVoice() const;

    /*!
     * @brief This function returns a reference to member stopVoice
     * @return Reference to member stopVoice
     */
    user_cpp_DllExport VSP_stopVoice_In &stopVoice();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_Call &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownOperation m_unknownOp;
    VSP_beginVoice_In m_beginVoice;

    VSP_stopVoice_In m_stopVoice;
};

/*!
 * @brief This class represents the structure VSP_Request that can be used to send/receive requests
 * for the interface VSP.
 * @ingroup AIOPENAPI
 */
class VSP_Request {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_Request();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_Request();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_Request that will be copied.
     */
    user_cpp_DllExport VSP_Request(const VSP_Request &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_Request that will be copied.
     */
    user_cpp_DllExport VSP_Request(VSP_Request &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP that will be copied.
     */
    user_cpp_DllExport VSP_Request &operator=(const VSP_Request &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP that will be copied.
     */
    user_cpp_DllExport VSP_Request &operator=(VSP_Request &&x);

    /*!
     * @brief This method sets the request header information.
     * @param _header Request header.
     */
    inline user_cpp_DllExport void header(const eprosima::rpc::protocol::dds::rpc::RequestHeader &_header) {
        m_header = _header;
    }

    /*!
     * @brief This method sets the request header information.
     * @param _header Request header.
     */
    inline user_cpp_DllExport void header(eprosima::rpc::protocol::dds::rpc::RequestHeader &&_header) {
        m_header = std::move(_header);
    }

    /*!
     * @brief This method returns the request header information.
     * @return Request header.
     */
    inline user_cpp_DllExport const eprosima::rpc::protocol::dds::rpc::RequestHeader &header() const {
        return m_header;
    }

    /*!
     * @brief This method returns the request header information.
     * @return Request header.
     */
    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::RequestHeader &header() { return m_header; }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _request Union.
     */
    inline user_cpp_DllExport void data(const VSP_Call &_data) { m_data = _data; }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _request Union.
     */
    inline user_cpp_DllExport void data(VSP_Call &&_data) { m_data = std::move(_data); }

    /*!
     * @brief This method returns the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport const VSP_Call &data() const { return m_data; }

    /*!
     * @brief This method returns the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport VSP_Call &data() { return m_data; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_Request &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    eprosima::rpc::protocol::dds::rpc::RequestHeader m_header;

    VSP_Call m_data;
};

/*!
 * @brief This class represents the union used in the DDS topic to encapsulate the operations in reply samples.
 * @ingroup AIOPENAPI
 */
class VSP_Return {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_Return();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_Return();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VSP_Return that will be copied.
     */
    user_cpp_DllExport VSP_Return(const VSP_Return &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_Return that will be copied.
     */
    user_cpp_DllExport VSP_Return(VSP_Return &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP_Return that will be copied.
     */
    user_cpp_DllExport VSP_Return &operator=(const VSP_Return &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object VSP_Return that will be copied.
     */
    user_cpp_DllExport VSP_Return &operator=(VSP_Return &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownOp(eprosima::rpc::protocol::dds::rpc::UnknownOperation _unknownOp);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownOperation unknownOp() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownOperation &unknownOp();

    /*!
     * @brief This function copies the value in member beginVoice
     * @param _beginVoice New value to be copied in member beginVoice
     */
    user_cpp_DllExport void beginVoice(const VSP_beginVoice_Result &_beginVoice);

    /*!
     * @brief This function moves the value in member beginVoice
     * @param _beginVoice New value to be moved in member beginVoice
     */
    user_cpp_DllExport void beginVoice(VSP_beginVoice_Result &&_beginVoice);

    /*!
     * @brief This function returns a constant reference to member beginVoice
     * @return Constant reference to member beginVoice
     */
    user_cpp_DllExport const VSP_beginVoice_Result &beginVoice() const;

    /*!
     * @brief This function returns a reference to member beginVoice
     * @return Reference to member beginVoice
     */
    user_cpp_DllExport VSP_beginVoice_Result &beginVoice();
    /*!
     * @brief This function copies the value in member stopVoice
     * @param _stopVoice New value to be copied in member stopVoice
     */
    user_cpp_DllExport void stopVoice(const VSP_stopVoice_Result &_stopVoice);

    /*!
     * @brief This function moves the value in member stopVoice
     * @param _stopVoice New value to be moved in member stopVoice
     */
    user_cpp_DllExport void stopVoice(VSP_stopVoice_Result &&_stopVoice);

    /*!
     * @brief This function returns a constant reference to member stopVoice
     * @return Constant reference to member stopVoice
     */
    user_cpp_DllExport const VSP_stopVoice_Result &stopVoice() const;

    /*!
     * @brief This function returns a reference to member stopVoice
     * @return Reference to member stopVoice
     */
    user_cpp_DllExport VSP_stopVoice_Result &stopVoice();
    /*!
     * @brief This function copies the value in member init
     * @param _init New value to be copied in member init
     */
    user_cpp_DllExport void init(const VSP_init_Result &_init);

    /*!
     * @brief This function moves the value in member init
     * @param _init New value to be moved in member init
     */
    user_cpp_DllExport void init(VSP_init_Result &&_init);

    /*!
     * @brief This function returns a constant reference to member init
     * @return Constant reference to member init
     */
    user_cpp_DllExport const VSP_init_Result &init() const;

    /*!
     * @brief This function returns a reference to member init
     * @return Reference to member init
     */
    user_cpp_DllExport VSP_init_Result &init();
    /*!
     * @brief This function copies the value in member ready
     * @param _ready New value to be copied in member ready
     */
    user_cpp_DllExport void ready(const VSP_ready_Result &_ready);

    /*!
     * @brief This function moves the value in member ready
     * @param _ready New value to be moved in member ready
     */
    user_cpp_DllExport void ready(VSP_ready_Result &&_ready);

    /*!
     * @brief This function returns a constant reference to member ready
     * @return Constant reference to member ready
     */
    user_cpp_DllExport const VSP_ready_Result &ready() const;

    /*!
     * @brief This function returns a reference to member ready
     * @return Reference to member ready
     */
    user_cpp_DllExport VSP_ready_Result &ready();
    /*!
     * @brief This function copies the value in member vadBegin
     * @param _vadBegin New value to be copied in member vadBegin
     */
    user_cpp_DllExport void vadBegin(const VSP_vadBegin_Result &_vadBegin);

    /*!
     * @brief This function moves the value in member vadBegin
     * @param _vadBegin New value to be moved in member vadBegin
     */
    user_cpp_DllExport void vadBegin(VSP_vadBegin_Result &&_vadBegin);

    /*!
     * @brief This function returns a constant reference to member vadBegin
     * @return Constant reference to member vadBegin
     */
    user_cpp_DllExport const VSP_vadBegin_Result &vadBegin() const;

    /*!
     * @brief This function returns a reference to member vadBegin
     * @return Reference to member vadBegin
     */
    user_cpp_DllExport VSP_vadBegin_Result &vadBegin();
    /*!
     * @brief This function copies the value in member vadEnd
     * @param _vadEnd New value to be copied in member vadEnd
     */
    user_cpp_DllExport void vadEnd(const VSP_vadEnd_Result &_vadEnd);

    /*!
     * @brief This function moves the value in member vadEnd
     * @param _vadEnd New value to be moved in member vadEnd
     */
    user_cpp_DllExport void vadEnd(VSP_vadEnd_Result &&_vadEnd);

    /*!
     * @brief This function returns a constant reference to member vadEnd
     * @return Constant reference to member vadEnd
     */
    user_cpp_DllExport const VSP_vadEnd_Result &vadEnd() const;

    /*!
     * @brief This function returns a reference to member vadEnd
     * @return Reference to member vadEnd
     */
    user_cpp_DllExport VSP_vadEnd_Result &vadEnd();
    /*!
     * @brief This function copies the value in member error
     * @param _error New value to be copied in member error
     */
    user_cpp_DllExport void error(const VSP_error_Result &_error);

    /*!
     * @brief This function moves the value in member error
     * @param _error New value to be moved in member error
     */
    user_cpp_DllExport void error(VSP_error_Result &&_error);

    /*!
     * @brief This function returns a constant reference to member error
     * @return Constant reference to member error
     */
    user_cpp_DllExport const VSP_error_Result &error() const;

    /*!
     * @brief This function returns a reference to member error
     * @return Reference to member error
     */
    user_cpp_DllExport VSP_error_Result &error();
    /*!
     * @brief This function copies the value in member partial
     * @param _partial New value to be copied in member partial
     */
    user_cpp_DllExport void partial(const VSP_partial_Result &_partial);

    /*!
     * @brief This function moves the value in member partial
     * @param _partial New value to be moved in member partial
     */
    user_cpp_DllExport void partial(VSP_partial_Result &&_partial);

    /*!
     * @brief This function returns a constant reference to member partial
     * @return Constant reference to member partial
     */
    user_cpp_DllExport const VSP_partial_Result &partial() const;

    /*!
     * @brief This function returns a reference to member partial
     * @return Reference to member partial
     */
    user_cpp_DllExport VSP_partial_Result &partial();
    /*!
     * @brief This function copies the value in member finalResult
     * @param _finalResult New value to be copied in member finalResult
     */
    user_cpp_DllExport void finalResult(const VSP_finalResult_Result &_finalResult);

    /*!
     * @brief This function moves the value in member finalResult
     * @param _finalResult New value to be moved in member finalResult
     */
    user_cpp_DllExport void finalResult(VSP_finalResult_Result &&_finalResult);

    /*!
     * @brief This function returns a constant reference to member finalResult
     * @return Constant reference to member finalResult
     */
    user_cpp_DllExport const VSP_finalResult_Result &finalResult() const;

    /*!
     * @brief This function returns a reference to member finalResult
     * @return Reference to member finalResult
     */
    user_cpp_DllExport VSP_finalResult_Result &finalResult();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_Return &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownOperation m_unknownOp;

    VSP_beginVoice_Result m_beginVoice;
    VSP_stopVoice_Result m_stopVoice;
    VSP_init_Result m_init;
    VSP_ready_Result m_ready;
    VSP_vadBegin_Result m_vadBegin;
    VSP_vadEnd_Result m_vadEnd;
    VSP_error_Result m_error;
    VSP_partial_Result m_partial;
    VSP_finalResult_Result m_finalResult;
};

/*!
 * @brief This class represents the structure VSP_Reply that can be used to send/receive replies
 * for the interface VSP.
 * @ingroup AIOPENAPI
 */
class VSP_Reply {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport VSP_Reply();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~VSP_Reply();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object VSP_Reply that will be copied.
     */
    user_cpp_DllExport VSP_Reply(const VSP_Reply &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VSP_Reply that will be copied.
     */
    user_cpp_DllExport VSP_Reply(VSP_Reply &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP that will be copied.
     */
    user_cpp_DllExport VSP_Reply &operator=(const VSP_Reply &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VSP that will be copied.
     */
    user_cpp_DllExport VSP_Reply &operator=(VSP_Reply &&x);

    /*!
     * @brief This method sets the reply header information.
     * @param _header Reply header.
     */
    inline user_cpp_DllExport void header(const eprosima::rpc::protocol::dds::rpc::ReplyHeader &_header) {
        m_header = _header;
    }

    /*!
     * @brief This method sets the reply header information.
     * @param _header Reply header.
     */
    inline user_cpp_DllExport void header(eprosima::rpc::protocol::dds::rpc::ReplyHeader &&_header) {
        m_header = std::move(_header);
    }

    /*!
     * @brief This method returns the reply header information.
     * @return Reply header.
     */
    inline user_cpp_DllExport const eprosima::rpc::protocol::dds::rpc::ReplyHeader &header() const { return m_header; }

    /*!
     * @brief This method returns the reply header information.
     * @return Reply header.
     */
    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::ReplyHeader &header() { return m_header; }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _reply Union.
     */
    inline user_cpp_DllExport void data(const VSP_Return &_data) { m_data = _data; }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _reply Union.
     */
    inline user_cpp_DllExport void data(VSP_Return &&_data) { m_data = std::move(_data); }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport const VSP_Return &data() const { return m_data; }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport VSP_Return &data() { return m_data; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const VSP_Reply &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    eprosima::rpc::protocol::dds::rpc::ReplyHeader m_header;

    VSP_Return m_data;
};

/*!
 * @brief This class represents the structure Photo_getPhotoInfo_In that can be used to send/receive requests
 * for the operation Photo::getPhotoInfo.
 * @ingroup AIOPENAPI
 */
class Photo_getPhotoInfo_In {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Photo_getPhotoInfo_In();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Photo_getPhotoInfo_In();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object Photo_getPhotoInfo_In that will be copied.
     */
    user_cpp_DllExport Photo_getPhotoInfo_In(const Photo_getPhotoInfo_In &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Photo_getPhotoInfo_In that will be copied.
     */
    user_cpp_DllExport Photo_getPhotoInfo_In(Photo_getPhotoInfo_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Photo_getPhotoInfo that will be copied.
     */
    user_cpp_DllExport Photo_getPhotoInfo_In &operator=(const Photo_getPhotoInfo_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Photo_getPhotoInfo that will be copied.
     */
    user_cpp_DllExport Photo_getPhotoInfo_In &operator=(Photo_getPhotoInfo_In &&x);

    /*!
     * @brief This function copies the value in member pId
     * @param _pId New value to be copied in member pId
     */
    inline user_cpp_DllExport void pId(const std::string &_pId) { m_pId = _pId; }

    /*!
     * @brief This function moves the value in member pId
     * @param _pId New value to be moved in member pId
     */
    inline user_cpp_DllExport void pId(std::string &&_pId) { m_pId = std::move(_pId); }

    /*!
     * @brief This function returns a constant reference to member pId
     * @return Constant reference to member pId
     */
    inline user_cpp_DllExport const std::string &pId() const { return m_pId; }

    /*!
     * @brief This function returns a reference to member pId
     * @return Reference to member pId
     */
    inline user_cpp_DllExport std::string &pId() { return m_pId; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Photo_getPhotoInfo_In &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    std::string m_pId;
};
/*!
 * @brief This class encapsulates output paramaters for operation Photo::getPhotoInfo.
 * @ingroup AIOPENAPI
 */
class Photo_getPhotoInfo_Out {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Photo_getPhotoInfo_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Photo_getPhotoInfo_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Photo_getPhotoInfo_Out that will be copied.
     */
    user_cpp_DllExport Photo_getPhotoInfo_Out(const Photo_getPhotoInfo_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Photo_getPhotoInfo_Out that will be copied.
     */
    user_cpp_DllExport Photo_getPhotoInfo_Out(Photo_getPhotoInfo_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Photo_getPhotoInfo that will be copied.
     */
    user_cpp_DllExport Photo_getPhotoInfo_Out &operator=(const Photo_getPhotoInfo_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Photo_getPhotoInfo that will be copied.
     */
    user_cpp_DllExport Photo_getPhotoInfo_Out &operator=(Photo_getPhotoInfo_Out &&x);

    /*!
     * @brief This function copies the value in member return_
     * @param _return_ New value to be copied in member return_
     */
    inline user_cpp_DllExport void return_(const std::string &_return_) { m_return_ = _return_; }

    /*!
     * @brief This function moves the value in member return_
     * @param _return_ New value to be moved in member return_
     */
    inline user_cpp_DllExport void return_(std::string &&_return_) { m_return_ = std::move(_return_); }

    /*!
     * @brief This function returns a constant reference to member return_
     * @return Constant reference to member return_
     */
    inline user_cpp_DllExport const std::string &return_() const { return m_return_; }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport std::string &return_() { return m_return_; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Photo_getPhotoInfo_Out &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    std::string m_return_;
};

/*!
 * @brief This class represents the structure Photo_getPhotoInfo_Result that can be used to send/receive replies
 * for the operation Photo::getPhotoInfo.
 *
 * @ingroup AIOPENAPI
 */
class Photo_getPhotoInfo_Result {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Photo_getPhotoInfo_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Photo_getPhotoInfo_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Photo_getPhotoInfo_Result that will be copied.
     */
    user_cpp_DllExport Photo_getPhotoInfo_Result(const Photo_getPhotoInfo_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Photo_getPhotoInfo_Result that will be copied.
     */
    user_cpp_DllExport Photo_getPhotoInfo_Result(Photo_getPhotoInfo_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Photo_getPhotoInfo that will be copied.
     */
    user_cpp_DllExport Photo_getPhotoInfo_Result &operator=(const Photo_getPhotoInfo_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Photo_getPhotoInfo that will be copied.
     */
    user_cpp_DllExport Photo_getPhotoInfo_Result &operator=(Photo_getPhotoInfo_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException &unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const Photo_getPhotoInfo_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(Photo_getPhotoInfo_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport const Photo_getPhotoInfo_Out &result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is
     * not the current selection.
     */
    user_cpp_DllExport Photo_getPhotoInfo_Out &result();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Photo_getPhotoInfo_Result &data,
                                                          size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    Photo_getPhotoInfo_Out m_result;
};

/*!
 * @brief This class represents the union used in the DDS topic to encapsulate the operations in request samples.
 * @ingroup AIOPENAPI
 */
class Photo_Call {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Photo_Call();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Photo_Call();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Photo_Call that will be copied.
     */
    user_cpp_DllExport Photo_Call(const Photo_Call &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Photo_Call that will be copied.
     */
    user_cpp_DllExport Photo_Call(Photo_Call &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Photo_Call that will be copied.
     */
    user_cpp_DllExport Photo_Call &operator=(const Photo_Call &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Photo_Call that will be copied.
     */
    user_cpp_DllExport Photo_Call &operator=(Photo_Call &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownOp(eprosima::rpc::protocol::dds::rpc::UnknownOperation _unknownOp);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownOperation unknownOp() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownOperation &unknownOp();

    /*!
     * @brief This function copies the value in member getPhotoInfo
     * @param _getPhotoInfo New value to be copied in member getPhotoInfo
     */
    user_cpp_DllExport void getPhotoInfo(const Photo_getPhotoInfo_In &_getPhotoInfo);

    /*!
     * @brief This function moves the value in member getPhotoInfo
     * @param _getPhotoInfo New value to be moved in member getPhotoInfo
     */
    user_cpp_DllExport void getPhotoInfo(Photo_getPhotoInfo_In &&_getPhotoInfo);

    /*!
     * @brief This function returns a constant reference to member getPhotoInfo
     * @return Constant reference to member getPhotoInfo
     */
    user_cpp_DllExport const Photo_getPhotoInfo_In &getPhotoInfo() const;

    /*!
     * @brief This function returns a reference to member getPhotoInfo
     * @return Reference to member getPhotoInfo
     */
    user_cpp_DllExport Photo_getPhotoInfo_In &getPhotoInfo();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Photo_Call &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownOperation m_unknownOp;
    Photo_getPhotoInfo_In m_getPhotoInfo;
};

/*!
 * @brief This class represents the structure Photo_Request that can be used to send/receive requests
 * for the interface Photo.
 * @ingroup AIOPENAPI
 */
class Photo_Request {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Photo_Request();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Photo_Request();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Photo_Request that will be copied.
     */
    user_cpp_DllExport Photo_Request(const Photo_Request &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Photo_Request that will be copied.
     */
    user_cpp_DllExport Photo_Request(Photo_Request &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Photo that will be copied.
     */
    user_cpp_DllExport Photo_Request &operator=(const Photo_Request &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Photo that will be copied.
     */
    user_cpp_DllExport Photo_Request &operator=(Photo_Request &&x);

    /*!
     * @brief This method sets the request header information.
     * @param _header Request header.
     */
    inline user_cpp_DllExport void header(const eprosima::rpc::protocol::dds::rpc::RequestHeader &_header) {
        m_header = _header;
    }

    /*!
     * @brief This method sets the request header information.
     * @param _header Request header.
     */
    inline user_cpp_DllExport void header(eprosima::rpc::protocol::dds::rpc::RequestHeader &&_header) {
        m_header = std::move(_header);
    }

    /*!
     * @brief This method returns the request header information.
     * @return Request header.
     */
    inline user_cpp_DllExport const eprosima::rpc::protocol::dds::rpc::RequestHeader &header() const {
        return m_header;
    }

    /*!
     * @brief This method returns the request header information.
     * @return Request header.
     */
    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::RequestHeader &header() { return m_header; }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _request Union.
     */
    inline user_cpp_DllExport void data(const Photo_Call &_data) { m_data = _data; }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _request Union.
     */
    inline user_cpp_DllExport void data(Photo_Call &&_data) { m_data = std::move(_data); }

    /*!
     * @brief This method returns the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport const Photo_Call &data() const { return m_data; }

    /*!
     * @brief This method returns the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport Photo_Call &data() { return m_data; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Photo_Request &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    eprosima::rpc::protocol::dds::rpc::RequestHeader m_header;

    Photo_Call m_data;
};

/*!
 * @brief This class represents the union used in the DDS topic to encapsulate the operations in reply samples.
 * @ingroup AIOPENAPI
 */
class Photo_Return {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Photo_Return();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Photo_Return();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Photo_Return that will be copied.
     */
    user_cpp_DllExport Photo_Return(const Photo_Return &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Photo_Return that will be copied.
     */
    user_cpp_DllExport Photo_Return(Photo_Return &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Photo_Return that will be copied.
     */
    user_cpp_DllExport Photo_Return &operator=(const Photo_Return &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Photo_Return that will be copied.
     */
    user_cpp_DllExport Photo_Return &operator=(Photo_Return &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't
     * correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t &_d();

    user_cpp_DllExport void unknownOp(eprosima::rpc::protocol::dds::rpc::UnknownOperation _unknownOp);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownOperation unknownOp() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownOperation &unknownOp();

    /*!
     * @brief This function copies the value in member getPhotoInfo
     * @param _getPhotoInfo New value to be copied in member getPhotoInfo
     */
    user_cpp_DllExport void getPhotoInfo(const Photo_getPhotoInfo_Result &_getPhotoInfo);

    /*!
     * @brief This function moves the value in member getPhotoInfo
     * @param _getPhotoInfo New value to be moved in member getPhotoInfo
     */
    user_cpp_DllExport void getPhotoInfo(Photo_getPhotoInfo_Result &&_getPhotoInfo);

    /*!
     * @brief This function returns a constant reference to member getPhotoInfo
     * @return Constant reference to member getPhotoInfo
     */
    user_cpp_DllExport const Photo_getPhotoInfo_Result &getPhotoInfo() const;

    /*!
     * @brief This function returns a reference to member getPhotoInfo
     * @return Reference to member getPhotoInfo
     */
    user_cpp_DllExport Photo_getPhotoInfo_Result &getPhotoInfo();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Photo_Return &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownOperation m_unknownOp;

    Photo_getPhotoInfo_Result m_getPhotoInfo;
};

/*!
 * @brief This class represents the structure Photo_Reply that can be used to send/receive replies
 * for the interface Photo.
 * @ingroup AIOPENAPI
 */
class Photo_Reply {
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Photo_Reply();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Photo_Reply();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object Photo_Reply that will be copied.
     */
    user_cpp_DllExport Photo_Reply(const Photo_Reply &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Photo_Reply that will be copied.
     */
    user_cpp_DllExport Photo_Reply(Photo_Reply &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Photo that will be copied.
     */
    user_cpp_DllExport Photo_Reply &operator=(const Photo_Reply &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Photo that will be copied.
     */
    user_cpp_DllExport Photo_Reply &operator=(Photo_Reply &&x);

    /*!
     * @brief This method sets the reply header information.
     * @param _header Reply header.
     */
    inline user_cpp_DllExport void header(const eprosima::rpc::protocol::dds::rpc::ReplyHeader &_header) {
        m_header = _header;
    }

    /*!
     * @brief This method sets the reply header information.
     * @param _header Reply header.
     */
    inline user_cpp_DllExport void header(eprosima::rpc::protocol::dds::rpc::ReplyHeader &&_header) {
        m_header = std::move(_header);
    }

    /*!
     * @brief This method returns the reply header information.
     * @return Reply header.
     */
    inline user_cpp_DllExport const eprosima::rpc::protocol::dds::rpc::ReplyHeader &header() const { return m_header; }

    /*!
     * @brief This method returns the reply header information.
     * @return Reply header.
     */
    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::ReplyHeader &header() { return m_header; }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _reply Union.
     */
    inline user_cpp_DllExport void data(const Photo_Return &_data) { m_data = _data; }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _reply Union.
     */
    inline user_cpp_DllExport void data(Photo_Return &&_data) { m_data = std::move(_data); }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport const Photo_Return &data() const { return m_data; }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport Photo_Return &data() { return m_data; }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Photo_Reply &data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:
    eprosima::rpc::protocol::dds::rpc::ReplyHeader m_header;

    Photo_Return m_data;
};
}  // namespace OpenApi
}  // namespace AI

#endif  // _AIOpenApi_TOPICS_H_