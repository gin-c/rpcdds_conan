/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * _LICENSE file included in this  distribution.
 *
 *************************************************************************
 *
 * @file AIOpenApi.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _AIOPENAPI_H_
#define _AIOPENAPI_H_

// TODO Poner en el contexto.
#include <rpcdds/exceptions/UserException.h>

#include <array>
#include <bitset>
#include <map>
#include <stdint.h>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(AIOpenApi_SOURCE)
#define AIOpenApi_DllAPI __declspec(dllexport)
#else
#define AIOpenApi_DllAPI __declspec(dllimport)
#endif  // AIOpenApi_SOURCE
#else
#define AIOpenApi_DllAPI
#endif
#else
#define AIOpenApi_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
}
}  // namespace eprosima

namespace AI {
/*!
 * @brief This class represents the structure Error defined by the user in the IDL file.
 * @ingroup AIOPENAPI
 */
class Error {
public:
    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Error();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Error();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AI::Error that will be copied.
     */
    eProsima_user_DllExport Error(const Error& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AI::Error that will be copied.
     */
    eProsima_user_DllExport Error(Error&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AI::Error that will be copied.
     */
    eProsima_user_DllExport Error& operator=(const Error& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AI::Error that will be copied.
     */
    eProsima_user_DllExport Error& operator=(Error&& x);

    /*!
     * @brief This function copies the value in member errMsg
     * @param _errMsg New value to be copied in member errMsg
     */
    eProsima_user_DllExport void errMsg(const std::string& _errMsg);

    /*!
     * @brief This function moves the value in member errMsg
     * @param _errMsg New value to be moved in member errMsg
     */
    eProsima_user_DllExport void errMsg(std::string&& _errMsg);

    /*!
     * @brief This function returns a constant reference to member errMsg
     * @return Constant reference to member errMsg
     */
    eProsima_user_DllExport const std::string& errMsg() const;

    /*!
     * @brief This function returns a reference to member errMsg
     * @return Reference to member errMsg
     */
    eProsima_user_DllExport std::string& errMsg();
    /*!
     * @brief This function sets a value in member errNo
     * @param _errNo New value for member errNo
     */
    eProsima_user_DllExport void errNo(int32_t _errNo);

    /*!
     * @brief This function returns the value of member errNo
     * @return Value of member errNo
     */
    eProsima_user_DllExport int32_t errNo() const;

    /*!
     * @brief This function returns a reference to member errNo
     * @return Reference to member errNo
     */
    eProsima_user_DllExport int32_t& errNo();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const AI::Error& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr& cdr);

private:
    std::string m_errMsg;
    int32_t m_errNo;
};
namespace OpenApi {
/*!
 * @brief This class represents the interface VSP defined by the user in the IDL file.
 * @ingroup AIOPENAPI
 */
class AIOpenApi_DllAPI VSP {
public:
    virtual bool beginVoice() = 0;

    virtual bool stopVoice() = 0;
};

class AIOpenApi_DllAPI VSPHandle {
public:
    virtual bool beginVoiceHandle(const std::string& sendId) = 0;

    virtual bool stopVoiceHandle(const std::string& sendId) = 0;
};

class AIOpenApi_DllAPI VSPNotify {
public:
    virtual void init(/*in*/ int32_t state) = 0;

    virtual void ready() = 0;

    virtual void vadBegin() = 0;

    virtual void vadEnd() = 0;

    virtual void error(/*in*/ const AI::Error& error) = 0;

    virtual void partial(/*in*/ const std::string& text) = 0;

    virtual void finalResult(/*in*/ const std::string& text) = 0;
};

class AIOpenApi_DllAPI VSPNotifyHandle {
public:
    virtual void initHandle(const std::string& sendId, /*in*/ int32_t state) = 0;

    virtual void readyHandle(const std::string& sendId) = 0;

    virtual void vadBeginHandle(const std::string& sendId) = 0;

    virtual void vadEndHandle(const std::string& sendId) = 0;

    virtual void errorHandle(const std::string& sendId, /*in*/ const AI::Error& error) = 0;

    virtual void partialHandle(const std::string& sendId, /*in*/ const std::string& text) = 0;

    virtual void finalResultHandle(const std::string& sendId, /*in*/ const std::string& text) = 0;
};

/*!
 * @brief This class represents the interface Photo defined by the user in the IDL file.
 * @ingroup AIOPENAPI
 */
class AIOpenApi_DllAPI Photo {
public:
    virtual std::string getPhotoInfo(/*in*/ const std::string& pId) = 0;
};

class AIOpenApi_DllAPI PhotoHandle {
public:
    virtual std::string getPhotoInfoHandle(const std::string& sendId, /*in*/ const std::string& pId) = 0;
};

class AIOpenApi_DllAPI PhotoNotify {
public:
};

class AIOpenApi_DllAPI PhotoNotifyHandle {
public:
};

}  // namespace OpenApi
}  // namespace AI

#endif  // _AIOPENAPI_H_