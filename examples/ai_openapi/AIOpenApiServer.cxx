/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 *
 * @file AIOpenApiServer.cxx
 * This source file contains the definition of the server for all interfaces.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "AIOpenApiServer.h"
#include "AIOpenApiProtocol.h"
#include <rpcdds/exceptions/ServerInternalException.h>
#include <rpcdds/strategies/ServerStrategy.h>
#include <rpcdds/transports/ServerTransport.h>

namespace AI {

namespace OpenApi {
VSPServer::VSPServer(eprosima::rpc::strategy::ServerStrategy &strategy,
                     eprosima::rpc::transport::ServerTransport &transport,
                     eprosima::rpc::protocol::AIOpenApiProtocol &protocol, VSPServerImpl &servant)
    : Server(strategy, transport, protocol), _impl(servant) {
    protocol.activateInterface("AI::OpenApi::VSP");
    protocol.linkAI_OpenApi_VSPImpl(servant);
}

VSPServer::~VSPServer() {
    // TODO Unlink an deactivate.
}

void VSPServer::init(/*in*/ int32_t state) {
    dynamic_cast<eprosima::rpc::protocol::AIOpenApiProtocol &>(getProtocol()).AI_OpenApi_VSP_init(state);
}

void VSPServer::ready() {
    dynamic_cast<eprosima::rpc::protocol::AIOpenApiProtocol &>(getProtocol()).AI_OpenApi_VSP_ready();
}

void VSPServer::vadBegin() {
    dynamic_cast<eprosima::rpc::protocol::AIOpenApiProtocol &>(getProtocol()).AI_OpenApi_VSP_vadBegin();
}

void VSPServer::vadEnd() {
    dynamic_cast<eprosima::rpc::protocol::AIOpenApiProtocol &>(getProtocol()).AI_OpenApi_VSP_vadEnd();
}

void VSPServer::error(/*in*/ const AI::Error &error) {
    dynamic_cast<eprosima::rpc::protocol::AIOpenApiProtocol &>(getProtocol()).AI_OpenApi_VSP_error(error);
}

void VSPServer::partial(/*in*/ const std::string &text) {
    dynamic_cast<eprosima::rpc::protocol::AIOpenApiProtocol &>(getProtocol()).AI_OpenApi_VSP_partial(text);
}

void VSPServer::finalResult(/*in*/ const std::string &text) {
    dynamic_cast<eprosima::rpc::protocol::AIOpenApiProtocol &>(getProtocol()).AI_OpenApi_VSP_finalResult(text);
}

PhotoServer::PhotoServer(eprosima::rpc::strategy::ServerStrategy &strategy,
                         eprosima::rpc::transport::ServerTransport &transport,
                         eprosima::rpc::protocol::AIOpenApiProtocol &protocol, PhotoServerImpl &servant)
    : Server(strategy, transport, protocol), _impl(servant) {
    protocol.activateInterface("AI::OpenApi::Photo");
    protocol.linkAI_OpenApi_PhotoImpl(servant);
}

PhotoServer::~PhotoServer() {
    // TODO Unlink an deactivate.
}

};  // namespace OpenApi

};  // namespace AI
