/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 *
 * @file AIOpenApiAsyncSupport.h
 * This header file contains functionality to use asynchronous calls for all interfaces.
 *
 * This file was generated by the tool rpcddsgen.
 */

#ifndef _AIOpenApi_DDS_ASYNC_SUPPORT_H_
#define _AIOpenApi_DDS_ASYNC_SUPPORT_H_

#include "AIOpenApiAsyncCallbackHandlers.h"
#include "AIOpenApiTopics.h"
#include <rpcdds/exceptions/UserException.h>
#include <rpcdds/transports/dds/RTPSAsyncTask.h>
namespace AI {

namespace OpenApi {
/*!
 * @brief This class represents a asynchronous task created to wait the reply of the procedure VSP::beginVoice from the
 * server in an asynchronous call.
 * @ingroup AIOPENAPI
 */
class VSP_beginVoiceTask : public eprosima::rpc::transport::dds::RTPSAsyncTask {
public:
    /*!
     * @brief The default constructor.
     *
     * @param obj Object that implements the callbacks that FastRPC will call when
     *            the reply will be received or and exception will be launched.
     * @param client Pointer to the server's proxy. Cannot be NULL.
     */
    VSP_beginVoiceTask(VSP_beginVoiceCallbackHandler &obj);

    //! @brief Destructor.
    virtual ~VSP_beginVoiceTask();

    /*!
     * @brief This funcion is called when the reply sample is received.
     */
    virtual void execute();

    /*!
     * @brief This function is called when an exception occurs.
     *        This exception can be launched in the server's side or in the client's side.
     *
     * @param ex The exception that will be launched.
     */
    virtual void on_exception(const eprosima::rpc::exception::SystemException &ex);

    /*!
     * @brief This function returns the object used by the task.
     *
     * @return The object that implements the callbacks.
     */
    VSP_beginVoiceCallbackHandler &getObject();

    /*!
     * @brief This function returns the allocated reply sample.
     * @return Pointer to the allocated reply sample.
     */
    virtual void *getReplyInstance();

private:
    VSP_beginVoiceCallbackHandler &m_obj;

    VSP_Reply m_reply;
};

/*!
 * @brief This class represents a asynchronous task created to wait the reply of the procedure VSP::stopVoice from the
 * server in an asynchronous call.
 * @ingroup AIOPENAPI
 */
class VSP_stopVoiceTask : public eprosima::rpc::transport::dds::RTPSAsyncTask {
public:
    /*!
     * @brief The default constructor.
     *
     * @param obj Object that implements the callbacks that FastRPC will call when
     *            the reply will be received or and exception will be launched.
     * @param client Pointer to the server's proxy. Cannot be NULL.
     */
    VSP_stopVoiceTask(VSP_stopVoiceCallbackHandler &obj);

    //! @brief Destructor.
    virtual ~VSP_stopVoiceTask();

    /*!
     * @brief This funcion is called when the reply sample is received.
     */
    virtual void execute();

    /*!
     * @brief This function is called when an exception occurs.
     *        This exception can be launched in the server's side or in the client's side.
     *
     * @param ex The exception that will be launched.
     */
    virtual void on_exception(const eprosima::rpc::exception::SystemException &ex);

    /*!
     * @brief This function returns the object used by the task.
     *
     * @return The object that implements the callbacks.
     */
    VSP_stopVoiceCallbackHandler &getObject();

    /*!
     * @brief This function returns the allocated reply sample.
     * @return Pointer to the allocated reply sample.
     */
    virtual void *getReplyInstance();

private:
    VSP_stopVoiceCallbackHandler &m_obj;

    VSP_Reply m_reply;
};

/*!
 * @brief This class represents a asynchronous task created to wait the reply of the procedure Photo::getPhotoInfo from
 * the server in an asynchronous call.
 * @ingroup AIOPENAPI
 */
class Photo_getPhotoInfoTask : public eprosima::rpc::transport::dds::RTPSAsyncTask {
public:
    /*!
     * @brief The default constructor.
     *
     * @param obj Object that implements the callbacks that FastRPC will call when
     *            the reply will be received or and exception will be launched.
     * @param client Pointer to the server's proxy. Cannot be NULL.
     */
    Photo_getPhotoInfoTask(Photo_getPhotoInfoCallbackHandler &obj);

    //! @brief Destructor.
    virtual ~Photo_getPhotoInfoTask();

    /*!
     * @brief This funcion is called when the reply sample is received.
     */
    virtual void execute();

    /*!
     * @brief This function is called when an exception occurs.
     *        This exception can be launched in the server's side or in the client's side.
     *
     * @param ex The exception that will be launched.
     */
    virtual void on_exception(const eprosima::rpc::exception::SystemException &ex);

    /*!
     * @brief This function returns the object used by the task.
     *
     * @return The object that implements the callbacks.
     */
    Photo_getPhotoInfoCallbackHandler &getObject();

    /*!
     * @brief This function returns the allocated reply sample.
     * @return Pointer to the allocated reply sample.
     */
    virtual void *getReplyInstance();

private:
    Photo_getPhotoInfoCallbackHandler &m_obj;

    Photo_Reply m_reply;
};

};  // namespace OpenApi

};  // namespace AI

#endif  // _AIOpenApi_DDS_ASYNC_SUPPORT_H_