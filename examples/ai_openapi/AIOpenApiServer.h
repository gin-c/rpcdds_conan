/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 *
 * @file AIOpenApiServer.h
 * This header file contains the declaration of the server for all interfaces.
 *
 * This file was generated by the tool rpcddsgen.
 */

#ifndef _AIOpenApiSERVER_H_
#define _AIOpenApiSERVER_H_

#include "AIOpenApi.h"
#include "AIOpenApiServerImpl.h"
#include <rpcdds/server/Server.h>

namespace eprosima {
namespace rpc {
namespace protocol {
class AIOpenApiProtocol;
}
}  // namespace rpc
}  // namespace eprosima

namespace AI {

namespace OpenApi {
/*!
 * @brief This class implements a specific server for the defined interface VSP by user.
 * @ingroup AIOPENAPI
 */
class RPCUSERDllExport VSPServer : public eprosima::rpc::server::Server, public VSPNotify {
public:
    /*!
     * @brief This constructor sets the transport that will be used by the server.
     *
     * @param strategy Strategy used by server to work with new requests.
     *        This class doesn't delete this object in its destructor. Cannot be NULL.
     * @param transport The network transport that the server has to use.
     *        This transport's object is not deleted by this class in its destructor. Cannot be NULL.
     * @param protocol Generated protocol that the server has to use.
     *        This class has the information to process requests and build responses for this application environment.
     * @param servant Servant that the server will use to invoke user's functions.
     * @exception eProsima::RPCDDS::InitializeException This exception is thrown when the initialization was wrong.
     */
    VSPServer(eprosima::rpc::strategy::ServerStrategy &strategy, eprosima::rpc::transport::ServerTransport &transport,
              eprosima::rpc::protocol::AIOpenApiProtocol &protocol, VSPServerImpl &servant);

    //! @brief Destructor.
    virtual ~VSPServer();

    //! @brief Proxy method for the operation init.
    void init(/*in*/ int32_t state);

    //! @brief Proxy method for the operation ready.
    void ready();

    //! @brief Proxy method for the operation vadBegin.
    void vadBegin();

    //! @brief Proxy method for the operation vadEnd.
    void vadEnd();

    //! @brief Proxy method for the operation error.
    void error(/*in*/ const AI::Error &error);

    //! @brief Proxy method for the operation partial.
    void partial(/*in*/ const std::string &text);

    //! @brief Proxy method for the operation finalResult.
    void finalResult(/*in*/ const std::string &text);

private:
    //! \brief Pointer to the server's servant implemented by the user.
    VSPServerImpl &_impl;
};

/*!
 * @brief This class implements a specific server for the defined interface Photo by user.
 * @ingroup AIOPENAPI
 */
class RPCUSERDllExport PhotoServer : public eprosima::rpc::server::Server, public PhotoNotify {
public:
    /*!
     * @brief This constructor sets the transport that will be used by the server.
     *
     * @param strategy Strategy used by server to work with new requests.
     *        This class doesn't delete this object in its destructor. Cannot be NULL.
     * @param transport The network transport that the server has to use.
     *        This transport's object is not deleted by this class in its destructor. Cannot be NULL.
     * @param protocol Generated protocol that the server has to use.
     *        This class has the information to process requests and build responses for this application environment.
     * @param servant Servant that the server will use to invoke user's functions.
     * @exception eProsima::RPCDDS::InitializeException This exception is thrown when the initialization was wrong.
     */
    PhotoServer(eprosima::rpc::strategy::ServerStrategy &strategy, eprosima::rpc::transport::ServerTransport &transport,
                eprosima::rpc::protocol::AIOpenApiProtocol &protocol, PhotoServerImpl &servant);

    //! @brief Destructor.
    virtual ~PhotoServer();

private:
    //! \brief Pointer to the server's servant implemented by the user.
    PhotoServerImpl &_impl;
};

};  // namespace OpenApi

};  // namespace AI

#endif  // _AIOpenApiSERVER_H_