/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 *
 * @file AIOpenApiAsyncSupport.cxx
 * This source file contains functionality to use asynchronous calls for all interfaces.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "AIOpenApiDDSAsyncSupport.h"
#include <rpcdds/exceptions/ClientInternalException.h>
#include <rpcdds/exceptions/ServerInternalException.h>
#include <rpcdds/utils/Messages.h>

using namespace eprosima::rpc;
using namespace ::exception;

namespace AI {

namespace OpenApi {
VSP_beginVoiceTask::VSP_beginVoiceTask(VSP_beginVoiceCallbackHandler& obj) : RTPSAsyncTask(), m_obj(obj) {}

VSP_beginVoiceTask::~VSP_beginVoiceTask() {}

VSP_beginVoiceCallbackHandler& VSP_beginVoiceTask::getObject() { return m_obj; }

void* VSP_beginVoiceTask::getReplyInstance() { return &m_reply; }

void VSP_beginVoiceTask::execute() {
    bool return_ = false;

    if (m_reply.header().remoteEx() == eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK) {
        switch (m_reply.data().beginVoice()._d()) {
            case 0:
                return_ = m_reply.data().beginVoice().result().return_();
                getObject().beginVoice(return_);
                break;
            default:
                getObject().on_exception(ClientInternalException("Error extracting information from server"));
        }
    } else
        getObject().on_exception(ServerInternalException(""));
}

void VSP_beginVoiceTask::on_exception(const SystemException& ex) { getObject().on_exception(ex); }

VSP_stopVoiceTask::VSP_stopVoiceTask(VSP_stopVoiceCallbackHandler& obj) : RTPSAsyncTask(), m_obj(obj) {}

VSP_stopVoiceTask::~VSP_stopVoiceTask() {}

VSP_stopVoiceCallbackHandler& VSP_stopVoiceTask::getObject() { return m_obj; }

void* VSP_stopVoiceTask::getReplyInstance() { return &m_reply; }

void VSP_stopVoiceTask::execute() {
    bool return_ = false;

    if (m_reply.header().remoteEx() == eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK) {
        switch (m_reply.data().stopVoice()._d()) {
            case 0:
                return_ = m_reply.data().stopVoice().result().return_();
                getObject().stopVoice(return_);
                break;
            default:
                getObject().on_exception(ClientInternalException("Error extracting information from server"));
        }
    } else
        getObject().on_exception(ServerInternalException(""));
}

void VSP_stopVoiceTask::on_exception(const SystemException& ex) { getObject().on_exception(ex); }

Photo_getPhotoInfoTask::Photo_getPhotoInfoTask(Photo_getPhotoInfoCallbackHandler& obj) : RTPSAsyncTask(), m_obj(obj) {}

Photo_getPhotoInfoTask::~Photo_getPhotoInfoTask() {}

Photo_getPhotoInfoCallbackHandler& Photo_getPhotoInfoTask::getObject() { return m_obj; }

void* Photo_getPhotoInfoTask::getReplyInstance() { return &m_reply; }

void Photo_getPhotoInfoTask::execute() {
    std::string return_;

    if (m_reply.header().remoteEx() == eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK) {
        switch (m_reply.data().getPhotoInfo()._d()) {
            case 0:
                return_ = std::move(m_reply.data().getPhotoInfo().result().return_());  // TODO Probar que esto
                                                                                        // funciona.
                getObject().getPhotoInfo(return_);
                break;
            default:
                getObject().on_exception(ClientInternalException("Error extracting information from server"));
        }
    } else
        getObject().on_exception(ServerInternalException(""));
}

void Photo_getPhotoInfoTask::on_exception(const SystemException& ex) { getObject().on_exception(ex); }

};  // namespace OpenApi

};  // namespace AI
