/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 *
 * @file AIOpenApiServerExample.cxx
 * This source file shows a simple example of how to create a server for an interface.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "AIOpenApiDDSProtocol.h"
#include "AIOpenApiServer.h"
#include "AIOpenApiServerImplExample.h"
#include <rpcdds/exceptions/Exceptions.h>
#include <rpcdds/strategies/ThreadPoolStrategy.h>
#include <rpcdds/transports/dds/RTPSServerTransport.h>
#include <rpcdds/utils/Utilities.h>

#include <iostream>

using namespace eprosima::rpc;
using namespace ::exception;
using namespace ::strategy;
using namespace ::transport::dds;
using namespace ::protocol::dds;

int main(int argc, char **argv) {
    unsigned int threadPoolSize = 5;
    ThreadPoolStrategy *pool = NULL;
    AIOpenApiProtocol *protocol = NULL;
    RTPSServerTransport *transport = NULL;
    AI::OpenApi::VSPServer *server = NULL;
    VSPServerImplExample servant;

    // Create and initialize the server for interface "AI::OpenApi::VSP".
    try {
        pool = new ThreadPoolStrategy(threadPoolSize);
        protocol = new AIOpenApiProtocol();
        transport = new RTPSServerTransport("AIOpenApiService", "Instance");
        server = new AI::OpenApi::VSPServer(*pool, *transport, *protocol, servant);
        server->serve();
    } catch (InitializeException &ex) {
        std::cout << ex.what() << std::endl;
        return -1;
    }

    while (1) {
        eprosima::rpc::sleep(10000);
    }

    // Stop and delete the server.
    server->stop();
    delete server;
    delete protocol;
    delete transport;
    delete pool;

    return 0;
}
