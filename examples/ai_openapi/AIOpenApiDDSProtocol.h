/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 *
 * @file AIOpenApiDDSProtocol.h
 * This header file contains the declaration of the protocol used to create DDS messages.
 *
 * This file was generated by the tool rpcddsgen.
 */

#ifndef _AIOpenApi_DDS_PROTOCOL_H_
#define _AIOpenApi_DDS_PROTOCOL_H_

#include "AIOpenApiProtocol.h"
#include <rpcdds/utils/Messages.h>

#include "AIOpenApiTopicsPlugin.h"

namespace eprosima {
namespace rpc {
namespace transport {
namespace dds {
class RTPSProxyProcedureEndpoint;
class RTPSServerProcedureEndpoint;
class RTPSTransport;
}  // namespace dds
}  // namespace transport

namespace protocol {
namespace dds {
/*!
 * @brief This class is responsible for serializing and deserializing the requests and responses of this application.
 * It uses DDS.
 * @ingroup AIOPENAPI
 */
class AIOpenApiProtocol : public eprosima::rpc::protocol::AIOpenApiProtocol {
public:
    /*!
     * @brief Default constructor
     */
    RPCUSERDllExport AIOpenApiProtocol();

    /*!
     * @brief Destructor
     */
    virtual RPCUSERDllExport ~AIOpenApiProtocol();

    /*!
     * @brief This method sets the transport for the communications.
     * @param transport Transport to use
     * @return True if the assignment is successful, false otherwise
     */
    virtual RPCUSERDllExport bool setTransport(eprosima::rpc::transport::Transport &transport);

    /*!
     * @brief This function activates needed DDS entities to use an interface.
     * @param interfaceName Interface name.
     * @return Whether the activation works successfully.
     */
    RPCUSERDllExport bool activateInterface(const char *interfaceName);

    /*!
     * @brief This method implements the server part of the protocol for the interface VSP.
     * It is called when a request sample is received.
     * @param protocol DDS protocol object that is in used.
     * @param data Pointer to the received request sample. Cannot be NULL.
     * @param endpoint Pointer to the endpoint that sent the request reply. Cannot be NULL.
     */
    RPCUSERDllExport static void AI_OpenApi_VSP_serve(eprosima::rpc::protocol::Protocol &protocol, void *data,
                                                      eprosima::rpc::transport::Endpoint *endpoint);
    /*!
     * @brief This method implements the server part of the protocol for the interface VSP.
     * It is called when a request sample is received.
     * @param protocol DDS protocol object that is in used.
     * @param data Pointer to the received request sample. Cannot be NULL.
     * @param endpoint Pointer to the endpoint that sent the request reply. Cannot be NULL.
     */
    static void AI_OpenApi_VSP_proxy(eprosima::rpc::protocol::Protocol &protocol, void *data,
                                     eprosima::rpc::transport::Endpoint *endpoint);

    /*!
     * @brief This method implements the proxy part of the protocol for the operation beginVoice.
     * It is called from the Proxy interface.
     */

    RPCUSERDllExport bool AI_OpenApi_VSP_beginVoice();

    /*!
     * @brief This asynchronous method implements the proxy part of the protocol for the operation beginVoice.
     * It is called from the Proxy interface.
     */
    RPCUSERDllExport void AI_OpenApi_VSP_beginVoice_async(AI::OpenApi::VSP_beginVoiceCallbackHandler &obj);

    /*!
     * @brief This method implements the proxy part of the protocol for the operation stopVoice.
     * It is called from the Proxy interface.
     */

    RPCUSERDllExport bool AI_OpenApi_VSP_stopVoice();

    /*!
     * @brief This asynchronous method implements the proxy part of the protocol for the operation stopVoice.
     * It is called from the Proxy interface.
     */
    RPCUSERDllExport void AI_OpenApi_VSP_stopVoice_async(AI::OpenApi::VSP_stopVoiceCallbackHandler &obj);

    /*!
     * @brief This method implements the proxy part of the protocol for the operation init.
     * It is called from the Proxy interface.
     */

    /*!
     * @brief This method implements the proxy part of the protocol for the operation init.
     * It is called from the Proxy interface.
     */
    void AI_OpenApi_VSP_init(/*in*/ int32_t state);

    /*!
     * @brief This method implements the proxy part of the protocol for the operation ready.
     * It is called from the Proxy interface.
     */

    /*!
     * @brief This method implements the proxy part of the protocol for the operation ready.
     * It is called from the Proxy interface.
     */
    void AI_OpenApi_VSP_ready();

    /*!
     * @brief This method implements the proxy part of the protocol for the operation vadBegin.
     * It is called from the Proxy interface.
     */

    /*!
     * @brief This method implements the proxy part of the protocol for the operation vadBegin.
     * It is called from the Proxy interface.
     */
    void AI_OpenApi_VSP_vadBegin();

    /*!
     * @brief This method implements the proxy part of the protocol for the operation vadEnd.
     * It is called from the Proxy interface.
     */

    /*!
     * @brief This method implements the proxy part of the protocol for the operation vadEnd.
     * It is called from the Proxy interface.
     */
    void AI_OpenApi_VSP_vadEnd();

    /*!
     * @brief This method implements the proxy part of the protocol for the operation error.
     * It is called from the Proxy interface.
     */

    /*!
     * @brief This method implements the proxy part of the protocol for the operation error.
     * It is called from the Proxy interface.
     */
    void AI_OpenApi_VSP_error(/*in*/ const AI::Error &error);

    /*!
     * @brief This method implements the proxy part of the protocol for the operation partial.
     * It is called from the Proxy interface.
     */

    /*!
     * @brief This method implements the proxy part of the protocol for the operation partial.
     * It is called from the Proxy interface.
     */
    void AI_OpenApi_VSP_partial(/*in*/ const std::string &text);

    /*!
     * @brief This method implements the proxy part of the protocol for the operation finalResult.
     * It is called from the Proxy interface.
     */

    /*!
     * @brief This method implements the proxy part of the protocol for the operation finalResult.
     * It is called from the Proxy interface.
     */
    void AI_OpenApi_VSP_finalResult(/*in*/ const std::string &text);

    /*!
     * @brief This method implements the server part of the protocol for the interface Photo.
     * It is called when a request sample is received.
     * @param protocol DDS protocol object that is in used.
     * @param data Pointer to the received request sample. Cannot be NULL.
     * @param endpoint Pointer to the endpoint that sent the request reply. Cannot be NULL.
     */
    RPCUSERDllExport static void AI_OpenApi_Photo_serve(eprosima::rpc::protocol::Protocol &protocol, void *data,
                                                        eprosima::rpc::transport::Endpoint *endpoint);
    /*!
     * @brief This method implements the server part of the protocol for the interface Photo.
     * It is called when a request sample is received.
     * @param protocol DDS protocol object that is in used.
     * @param data Pointer to the received request sample. Cannot be NULL.
     * @param endpoint Pointer to the endpoint that sent the request reply. Cannot be NULL.
     */
    static void AI_OpenApi_Photo_proxy(eprosima::rpc::protocol::Protocol &protocol, void *data,
                                       eprosima::rpc::transport::Endpoint *endpoint);

    /*!
     * @brief This method implements the proxy part of the protocol for the operation getPhotoInfo.
     * It is called from the Proxy interface.
     */

    RPCUSERDllExport std::string AI_OpenApi_Photo_getPhotoInfo(/*in*/ const std::string &pId);

    /*!
     * @brief This asynchronous method implements the proxy part of the protocol for the operation getPhotoInfo.
     * It is called from the Proxy interface.
     */
    RPCUSERDllExport void AI_OpenApi_Photo_getPhotoInfo_async(AI::OpenApi::Photo_getPhotoInfoCallbackHandler &obj,
                                                              /*in*/ const std::string &pId);

private:
    eprosima::rpc::transport::dds::RTPSTransport *m_ddsTransport;

    const char *const AI_OpenApi_VSP_str;

    eprosima::rpc::transport::dds::RTPSProxyProcedureEndpoint *AI_OpenApi_VSP_pe;

    eprosima::rpc::transport::dds::RTPSServerProcedureEndpoint *AI_OpenApi_VSP_se;

    AI::OpenApi::VSP_RequestPlugin AI_OpenApi_VSP_requestPlugin;
    AI::OpenApi::VSP_ReplyPlugin AI_OpenApi_VSP_replyPlugin;

    const char *const AI_OpenApi_Photo_str;

    eprosima::rpc::transport::dds::RTPSProxyProcedureEndpoint *AI_OpenApi_Photo_pe;

    eprosima::rpc::transport::dds::RTPSServerProcedureEndpoint *AI_OpenApi_Photo_se;

    AI::OpenApi::Photo_RequestPlugin AI_OpenApi_Photo_requestPlugin;
    AI::OpenApi::Photo_ReplyPlugin AI_OpenApi_Photo_replyPlugin;
};
}  // namespace dds
}  // namespace protocol
}  // namespace rpc
}  // namespace eprosima

#endif  // _AIOpenApi_DDS_PROTOCOL_H_