/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorTopicsPlugin.cpp
 * TODO This header file contains the declaration of topics generated using operations in the IDL file.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "CalculatorTopicsPlugin.h"
#include <rpcdds/protocols/dds/MessageHeaderPlugin.h>
#include <rpcdds/exceptions/BadParamException.h>

#include <fastcdr/Cdr.h>
#include <fastcdr/exceptions/BadParamException.h>
#include <fastcdr/exceptions/NotEnoughMemoryException.h>



 
// Request operations
DDS_TypeCode* CalculatorPlugin::addition_InPlugin::get_typecode()
{
    //printf("=> Calculator_addition_InPlugin::get_typecode\n");
    static bool is_initialized = false;




    static DDS_TypeCode_Member Calculator_addition_In_g_tc_members[2] =
    {
                {
                    (char *)"value1",
                    {
                        0,
                        DDS_BOOLEAN_FALSE,
                        -1,
                        NULL
                    },
                    0,
                    0,
                    0,
                    NULL,
                    RTI_CDR_REQUIRED_MEMBER,
                    DDS_PRIVATE_MEMBER,
                    1,
                    NULL
                },
                {
                    (char *)"value2",
                    {
                        0,
                        DDS_BOOLEAN_FALSE,
                        -1,
                        NULL
                    },
                    0,
                    0,
                    0,
                    NULL,
                    RTI_CDR_REQUIRED_MEMBER,
                    DDS_PRIVATE_MEMBER,
                    1,
                    NULL
                }
    };

    static DDS_TypeCode Calculator_addition_In_g_tc =
    {{
         DDS_TK_STRUCT,
         DDS_BOOLEAN_FALSE,
         -1,
         (char*)"Calculator_addition_In",
         NULL,
         0,
         0,
         NULL,
         2,
         Calculator_addition_In_g_tc_members,
         DDS_VM_NONE
    }};
    
    if(!is_initialized)
    {
        Calculator_addition_In_g_tc_members[1 - 1]._representation._typeCode = (RTICdrTypeCode*)&DDS_g_tc_long;
        Calculator_addition_In_g_tc_members[2 - 1]._representation._typeCode = (RTICdrTypeCode*)&DDS_g_tc_long;

        is_initialized = true;
    }

    return &Calculator_addition_In_g_tc;
}

// Reply operations


DDS_TypeCode* CalculatorPlugin::addition_OutPlugin::get_typecode()
{
    static bool is_initialized = false;


    static DDS_TypeCode_Member Calculator_addition_Out_g_tc_members[1] =
    {
                {
                    (char *)"return_",
                    {
                        0,
                        DDS_BOOLEAN_FALSE,
                        -1,
                        NULL
                    },
                    0,
                    0,
                    0,
                    NULL,
                    RTI_CDR_REQUIRED_MEMBER,
                    DDS_PRIVATE_MEMBER,
                    1,
                    NULL
                }
    };

    static DDS_TypeCode Calculator_addition_Out_g_tc =
    {{
         DDS_TK_STRUCT,
         DDS_BOOLEAN_FALSE,
         -1,
         (char*)"Calculator_addition_Out",
         NULL,
         0,
         0,
         NULL,
         1,
         Calculator_addition_Out_g_tc_members,
         DDS_VM_NONE
    }};
    
    if(!is_initialized)
    {
        Calculator_addition_Out_g_tc_members[1 - 1]._representation._typeCode = (RTICdrTypeCode*)&DDS_g_tc_long;

        is_initialized = true;
    }

    return &Calculator_addition_Out_g_tc;
}

DDS_TypeCode* CalculatorPlugin::addition_ResultPlugin::get_typecode()
{
    //printf("=> CalculatorPlugin::addition_ResultPlugin::get_typecode\n");
    static bool is_initialized = false;

    static DDS_TypeCode_Member Calculator_addition_Result_g_tc_members[0 + 2] =
    {
        {
            (char *)"unknownEx",/* Member name */
            {
                1,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            1, /* Number of labels */
            RTI_CDR_TYPE_CODE_UNION_DEFAULT_LABEL, /* First label */
            NULL, /* Labels (it is NULL when there is only one label)*/
            RTI_CDR_NONKEY_MEMBER, /* Member flags */
            DDS_PRIVATE_MEMBER,/* Ignored */
            1,
            NULL/* Ignored */
        }
        ,
        {
            (char *)"result",
            {
                0,
                DDS_BOOLEAN_FALSE,
                -1,
                NULL
            },
            0,
            1,
            0,
            NULL,
            RTI_CDR_NONKEY_MEMBER,
            DDS_PRIVATE_MEMBER,
            1,
            NULL
        }
    };

    static DDS_TypeCode Calculator_addition_Result_g_tc =
    {{
         DDS_TK_UNION,
         DDS_BOOLEAN_FALSE,
         -1,
         (char*)"Calculator_addition_Result",
         NULL,
         0,
         0,
         NULL,
         0 + 2,
         Calculator_addition_Result_g_tc_members,
         DDS_VM_NONE
    }};
    
    if(!is_initialized)
    {
        Calculator_addition_Result_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)eprosima::rpc::protocol::dds::rpc::UnknownExceptionPlugin::get_typecode();
        Calculator_addition_Result_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)CalculatorPlugin::addition_OutPlugin::get_typecode();

        Calculator_addition_Result_g_tc._data._typeCode = (RTICdrTypeCode*)&DDS_g_tc_long;

        is_initialized = true;
    }

    return &Calculator_addition_Result_g_tc;
}

// Request operations
DDS_TypeCode* CalculatorPlugin::subtraction_InPlugin::get_typecode()
{
    //printf("=> Calculator_subtraction_InPlugin::get_typecode\n");
    static bool is_initialized = false;




    static DDS_TypeCode_Member Calculator_subtraction_In_g_tc_members[2] =
    {
                {
                    (char *)"value1",
                    {
                        0,
                        DDS_BOOLEAN_FALSE,
                        -1,
                        NULL
                    },
                    0,
                    0,
                    0,
                    NULL,
                    RTI_CDR_REQUIRED_MEMBER,
                    DDS_PRIVATE_MEMBER,
                    1,
                    NULL
                },
                {
                    (char *)"value2",
                    {
                        0,
                        DDS_BOOLEAN_FALSE,
                        -1,
                        NULL
                    },
                    0,
                    0,
                    0,
                    NULL,
                    RTI_CDR_REQUIRED_MEMBER,
                    DDS_PRIVATE_MEMBER,
                    1,
                    NULL
                }
    };

    static DDS_TypeCode Calculator_subtraction_In_g_tc =
    {{
         DDS_TK_STRUCT,
         DDS_BOOLEAN_FALSE,
         -1,
         (char*)"Calculator_subtraction_In",
         NULL,
         0,
         0,
         NULL,
         2,
         Calculator_subtraction_In_g_tc_members,
         DDS_VM_NONE
    }};
    
    if(!is_initialized)
    {
        Calculator_subtraction_In_g_tc_members[1 - 1]._representation._typeCode = (RTICdrTypeCode*)&DDS_g_tc_long;
        Calculator_subtraction_In_g_tc_members[2 - 1]._representation._typeCode = (RTICdrTypeCode*)&DDS_g_tc_long;

        is_initialized = true;
    }

    return &Calculator_subtraction_In_g_tc;
}

// Reply operations


DDS_TypeCode* CalculatorPlugin::subtraction_OutPlugin::get_typecode()
{
    static bool is_initialized = false;


    static DDS_TypeCode_Member Calculator_subtraction_Out_g_tc_members[1] =
    {
                {
                    (char *)"return_",
                    {
                        0,
                        DDS_BOOLEAN_FALSE,
                        -1,
                        NULL
                    },
                    0,
                    0,
                    0,
                    NULL,
                    RTI_CDR_REQUIRED_MEMBER,
                    DDS_PRIVATE_MEMBER,
                    1,
                    NULL
                }
    };

    static DDS_TypeCode Calculator_subtraction_Out_g_tc =
    {{
         DDS_TK_STRUCT,
         DDS_BOOLEAN_FALSE,
         -1,
         (char*)"Calculator_subtraction_Out",
         NULL,
         0,
         0,
         NULL,
         1,
         Calculator_subtraction_Out_g_tc_members,
         DDS_VM_NONE
    }};
    
    if(!is_initialized)
    {
        Calculator_subtraction_Out_g_tc_members[1 - 1]._representation._typeCode = (RTICdrTypeCode*)&DDS_g_tc_long;

        is_initialized = true;
    }

    return &Calculator_subtraction_Out_g_tc;
}

DDS_TypeCode* CalculatorPlugin::subtraction_ResultPlugin::get_typecode()
{
    //printf("=> CalculatorPlugin::subtraction_ResultPlugin::get_typecode\n");
    static bool is_initialized = false;

    static DDS_TypeCode_Member Calculator_subtraction_Result_g_tc_members[0 + 2] =
    {
        {
            (char *)"unknownEx",/* Member name */
            {
                1,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            1, /* Number of labels */
            RTI_CDR_TYPE_CODE_UNION_DEFAULT_LABEL, /* First label */
            NULL, /* Labels (it is NULL when there is only one label)*/
            RTI_CDR_NONKEY_MEMBER, /* Member flags */
            DDS_PRIVATE_MEMBER,/* Ignored */
            1,
            NULL/* Ignored */
        }
        ,
        {
            (char *)"result",
            {
                0,
                DDS_BOOLEAN_FALSE,
                -1,
                NULL
            },
            0,
            1,
            0,
            NULL,
            RTI_CDR_NONKEY_MEMBER,
            DDS_PRIVATE_MEMBER,
            1,
            NULL
        }
    };

    static DDS_TypeCode Calculator_subtraction_Result_g_tc =
    {{
         DDS_TK_UNION,
         DDS_BOOLEAN_FALSE,
         -1,
         (char*)"Calculator_subtraction_Result",
         NULL,
         0,
         0,
         NULL,
         0 + 2,
         Calculator_subtraction_Result_g_tc_members,
         DDS_VM_NONE
    }};
    
    if(!is_initialized)
    {
        Calculator_subtraction_Result_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)eprosima::rpc::protocol::dds::rpc::UnknownExceptionPlugin::get_typecode();
        Calculator_subtraction_Result_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)CalculatorPlugin::subtraction_OutPlugin::get_typecode();

        Calculator_subtraction_Result_g_tc._data._typeCode = (RTICdrTypeCode*)&DDS_g_tc_long;

        is_initialized = true;
    }

    return &Calculator_subtraction_Result_g_tc;
}


// Request interface
const char *Calculator_RequestPlugin::m_typename = "Calculator_Request";

const char* Calculator_RequestPlugin::get_typename()
{
    //printf("=> Calculator_RequestPlugin::get_typename\n");
    return m_typename;
}

Calculator_Request*
Calculator_RequestPlugin::create_data(void)
{
    //printf("=> Calculator_RequestPlugin::create_data\n");
    Calculator_Request *request = new Calculator_Request();
    return request;
}

void 
Calculator_RequestPlugin::destroy_data(
    Calculator_Request *sample)
{
    //printf("=> Calculator_RequestPlugin::destroy_data\n");
    if(sample != NULL)
        delete sample;
}

void 
Calculator_RequestPlugin::copy_data(
    Calculator_Request *dst,
    const Calculator_Request *src)
{
    //printf("=> Calculator_RequestPlugin::copy_data\n");
    *dst = *src;
}

unsigned int 
Calculator_RequestPlugin::get_serialized_sample_max_size(
    PRESTypePluginEndpointData endpoint_data,
    RTIBool include_encapsulation,
    RTIEncapsulationId encapsulation_id,
    unsigned int current_alignment)
{
    //printf("=> Calculator_RequestPlugin::get_serialized_sample_max_size\n");
    unsigned int initial_alignment = current_alignment;

    unsigned int encapsulation_size = current_alignment;

    if (include_encapsulation) {

        if (!RTICdrEncapsulation_validEncapsulationId(encapsulation_id)) {
            return 1;
        }

        RTICdrStream_getEncapsulationSize(encapsulation_size);
        encapsulation_size -= current_alignment;
        current_alignment = 0;
        initial_alignment = 0;

    }

    current_alignment += (unsigned int)Calculator_Request::getMaxCdrSerializedSize(current_alignment);

    if (include_encapsulation) {
        current_alignment += encapsulation_size;
    } 

    //printf("Max ser size: %u\n", current_alignment - initial_alignment);
    return current_alignment - initial_alignment;
}

unsigned int
Calculator_RequestPlugin::get_serialized_sample_size(
    PRESTypePluginEndpointData endpoint_data,
    RTIBool include_encapsulation,
    RTIEncapsulationId encapsulation_id,
    unsigned int current_alignment,
    const Calculator_Request * sample)
{
    //printf("=> Calculator_RequestPlugin::get_serialized_sample_size\n");
    /* TODO
    unsigned int initial_alignment = current_alignment;

    unsigned int encapsulation_size = current_alignment;

    if (include_encapsulation) {

        if (!RTICdrEncapsulation_validEncapsulationId(encapsulation_id)) {
            return 1;
        }

        RTICdrStream_getEncapsulationSize(encapsulation_size);
        encapsulation_size -= current_alignment;
        current_alignment = 0;
        initial_alignment = 0;

    }


    current_alignment += rpc::RequestHeaderPlugin::get_serialized_sample_size(
        endpoint_data,RTI_FALSE, encapsulation_id, 
        current_alignment, &sample->header);
            

    current_alignment += RTICdrType_getOctetMaxSizeSerialized(
        current_alignment);
            

    current_alignment += RTICdrType_getOctetMaxSizeSerialized(
        current_alignment);
            

    if (include_encapsulation) {
        current_alignment += encapsulation_size;
    }

    return current_alignment - initial_alignment;
    */

    return (unsigned int)sample->getSerializedSize(current_alignment);
}

unsigned int 
Calculator_RequestPlugin::get_serialized_sample_min_size(
    PRESTypePluginEndpointData endpoint_data,
    RTIBool include_encapsulation,
    RTIEncapsulationId encapsulation_id,
    unsigned int current_alignment)
{
    //printf("=> Calculator_RequestPlugin::get_serialized_sample_min_size\n");
    // TODO
    return 0;
}

PRESTypePluginParticipantData 
Calculator_RequestPlugin::on_participant_attached(
    void *registration_data, 
    const struct PRESTypePluginParticipantInfo *participant_info,
    RTIBool top_level_registration, 
    void *container_plugin_context,
    RTICdrTypeCode *typeCode)
{
    //printf("=> Calculator_RequestPlugin::on_participant_attached\n");
    return PRESTypePluginDefaultParticipantData_new(participant_info);
}

void
Calculator_RequestPlugin::on_participant_detached(
    PRESTypePluginParticipantData participant_data)
{
    //printf("=> Calculator_RequestPlugin::on_participant_detached\n");
    PRESTypePluginDefaultParticipantData_delete(participant_data);
}

PRESTypePluginEndpointData 
Calculator_RequestPlugin::on_endpoint_attached(
    PRESTypePluginParticipantData participant_data,
    const struct PRESTypePluginEndpointInfo *endpoint_info,
    RTIBool top_level_registration, 
    void *container_plugin_context)
{
    //printf("=> Calculator_RequestPlugin::on_endpoint_attached\n");
    PRESTypePluginEndpointData epd = NULL;
    unsigned int serializedSampleMaxSize;

    epd = PRESTypePluginDefaultEndpointData_new(
            participant_data,
            endpoint_info,
            (PRESTypePluginDefaultEndpointDataCreateSampleFunction)
            Calculator_RequestPlugin::create_data,
            (PRESTypePluginDefaultEndpointDataDestroySampleFunction)
            Calculator_RequestPlugin::destroy_data,
            NULL, NULL);

    if(epd != NULL)
    {
        if(endpoint_info->endpointKind == PRES_TYPEPLUGIN_ENDPOINT_WRITER)
        {
            serializedSampleMaxSize = Calculator_RequestPlugin::get_serialized_sample_max_size(
                    epd, RTI_FALSE, RTI_CDR_ENCAPSULATION_ID_CDR_BE, 0);

            PRESTypePluginDefaultEndpointData_setMaxSizeSerializedSample(epd, serializedSampleMaxSize);

            if(PRESTypePluginDefaultEndpointData_createWriterPool(
                        epd,
                        endpoint_info,
                        (PRESTypePluginGetSerializedSampleMaxSizeFunction)
                        Calculator_RequestPlugin::get_serialized_sample_max_size, epd,
                        (PRESTypePluginGetSerializedSampleSizeFunction)
                        Calculator_RequestPlugin::get_serialized_sample_size,
                        epd) == RTI_FALSE)
            {
                PRESTypePluginDefaultEndpointData_delete(epd);
                epd = NULL;
            }
        }
    }

    return epd;    
}

void 
Calculator_RequestPlugin::on_endpoint_detached(
    PRESTypePluginEndpointData endpoint_data)
{  
    //printf("=> Calculator_RequestPlugin::on_endpoint_detached\n");
    PRESTypePluginDefaultEndpointData_delete(endpoint_data);
}

RTIBool 
Calculator_RequestPlugin::copy_sample(
    PRESTypePluginEndpointData endpoint_data,
    Calculator_Request *dst,
    const Calculator_Request *src)
{
    //printf("=> Calculator_RequestPlugin::copy_sample\n");
    // TODO exception?
    *dst = std::move(*src);
    return RTI_TRUE;
}

RTIBool 
Calculator_RequestPlugin::serialize(
    PRESTypePluginEndpointData endpoint_data,
    const Calculator_Request *sample, 
    struct RTICdrStream *stream,    
    RTIBool serialize_encapsulation,
    RTIEncapsulationId encapsulation_id,
    RTIBool serialize_sample, 
    void *endpoint_plugin_qos)
{
    //printf("=> Calculator_RequestPlugin::serialize\n");
    eprosima::fastcdr::FastBuffer buffer(stream->_buffer, stream->_bufferLength);
    eprosima::fastcdr::Cdr scdr(buffer, (eprosima::fastcdr::Cdr::Endianness)stream->_endian, eprosima::fastcdr::Cdr::DDS_CDR);
    scdr.moveAlignmentForward(stream->_relativeBuffer - stream->_buffer);
    scdr.jump(stream->_currentPosition - stream->_buffer);

    if(serialize_encapsulation)
    {
        scdr.changeEndianness((eprosima::fastcdr::Cdr::Endianness)(encapsulation_id & 0x1));
        scdr.serialize_encapsulation();
        scdr.resetAlignment();
    }

    if(serialize_sample)
    {
        try
        {
            scdr << *sample;
        }
        catch(eprosima::rpc::exception::BadParamException ex)
        {
            //printf("ERROR<eprosima::rpc::exception::BadParamException>: %s\n", ex.what());
            return RTI_FALSE;
        }
        catch(eprosima::fastcdr::exception::BadParamException ex)
        {
            //printf("ERROR<eprosima::fastcdr::exception::BadParamException>: %s\n", ex.what());
            return RTI_FALSE;
        }
        catch(eprosima::fastcdr::exception::NotEnoughMemoryException ex)
        {
            //printf("ERROR<eprosima::fastcdr::exception::NotEnoughMemoryException>: %s\n", ex.what());
            return RTI_FALSE;
        }
    }

    stream->_currentPosition = scdr.getCurrentPosition();

    return RTI_TRUE;
}

RTIBool 
Calculator_RequestPlugin::deserialize(
    PRESTypePluginEndpointData endpoint_data,
    Calculator_Request **sample,
    RTIBool * drop_sample,
    struct RTICdrStream *stream,   
    RTIBool deserialize_encapsulation,
    RTIBool deserialize_sample, 
    void *endpoint_plugin_qos)
{
    //printf("=> Calculator_RequestPlugin::deserialize\n");
    Calculator_Request *_sample = *sample;
    eprosima::fastcdr::FastBuffer buffer(stream->_buffer, stream->_bufferLength);
    eprosima::fastcdr::Cdr dcdr(buffer, (eprosima::fastcdr::Cdr::Endianness)stream->_endian, eprosima::fastcdr::Cdr::DDS_CDR);
    dcdr.moveAlignmentForward(stream->_relativeBuffer - stream->_buffer);
    dcdr.jump(stream->_currentPosition - stream->_buffer);

    if(deserialize_encapsulation)
    {
        dcdr.read_encapsulation();
        dcdr.resetAlignment();
    }

    if(deserialize_sample)
    {
        dcdr >> *_sample;
    }

    stream->_currentPosition = dcdr.getCurrentPosition();

    return RTI_TRUE;
}

PRESTypePluginKeyKind 
Calculator_RequestPlugin::get_key_kind(void)
{
    //printf("=> Calculator_RequestPlugin::get_key_kind\n");
    return PRES_TYPEPLUGIN_NO_KEY;
}

DDS_TypeCode* Calculator_CallPlugin::get_typecode()
{
    static bool is_initialized = false;

    static DDS_TypeCode_Member Calculator_Call_g_tc_members[2 + 1] =
    {
        {
            (char *)"unknownOp",/* Member name */
            {
                1,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            1, /* Number of labels */
            RTI_CDR_TYPE_CODE_UNION_DEFAULT_LABEL, /* First label */
            NULL, /* Labels (it is NULL when there is only one label)*/
            RTI_CDR_NONKEY_MEMBER, /* Member flags */
            DDS_PRIVATE_MEMBER,/* Ignored */
            1,
            NULL/* Ignored */
        }
                ,
                {
                    (char *)"addition",
                    {
                        0,
                        DDS_BOOLEAN_FALSE,
                        -1,
                        NULL
                    },
                    0,
                    1,
                    (RTICdrLong)0xCBC6CEAA,
                    NULL,
                    RTI_CDR_NONKEY_MEMBER,
                    DDS_PRIVATE_MEMBER,
                    1,
                    NULL
                }
                ,
                {
                    (char *)"subtraction",
                    {
                        0,
                        DDS_BOOLEAN_FALSE,
                        -1,
                        NULL
                    },
                    0,
                    1,
                    (RTICdrLong)0xCA019A14,
                    NULL,
                    RTI_CDR_NONKEY_MEMBER,
                    DDS_PRIVATE_MEMBER,
                    1,
                    NULL
                }
    };

    static DDS_TypeCode Calculator_Call_g_tc =
    {{
         DDS_TK_UNION,
         DDS_BOOLEAN_FALSE,
         -1,
         (char*)"Calculator_Call",
         NULL,
         0,
         0,
         NULL,
         2 + 1,
         Calculator_Call_g_tc_members,
         DDS_VM_NONE
    }};
    
    if(!is_initialized)
    {

        Calculator_Call_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)eprosima::rpc::protocol::dds::rpc::UnknownOperationPlugin::get_typecode();
        Calculator_Call_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode*)CalculatorPlugin::addition_InPlugin::get_typecode();
        Calculator_Call_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode*)CalculatorPlugin::subtraction_InPlugin::get_typecode();

        Calculator_Call_g_tc._data._typeCode = (RTICdrTypeCode*)&DDS_g_tc_long;

        is_initialized = true;
    }

    return &Calculator_Call_g_tc;
}

DDS_TypeCode* Calculator_RequestPlugin::get_typecode()
{
    //printf("=> Calculator_RequestPlugin::get_typecode\n");
    static bool is_initialized = false;

    static DDS_TypeCode_Member Calculator_Request_g_tc_members[2] =
    {
        // TODO Add header.
        {
            (char *)"header",
            {
                0,
                DDS_BOOLEAN_FALSE,
                -1,
                NULL
            },
            0,
            0,
            0,
            NULL,
            RTI_CDR_REQUIRED_MEMBER,
            DDS_PRIVATE_MEMBER,
            1,
            NULL
        },
        {
            (char *)"data",
            {
                0,
                DDS_BOOLEAN_FALSE,
                -1,
                NULL
            },
            0,
            0,
            0,
            NULL,
            RTI_CDR_REQUIRED_MEMBER,
            DDS_PRIVATE_MEMBER,
            1,
            NULL
        }
    };

    static DDS_TypeCode Calculator_Request_g_tc =
    {{
         DDS_TK_STRUCT,
         DDS_BOOLEAN_FALSE,
         -1,
         (char*)m_typename,
         NULL,
         0,
         0,
         NULL,
         2,
         Calculator_Request_g_tc_members,
         DDS_VM_NONE
    }};
    
    if(!is_initialized)
    {
        Calculator_Request_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)eprosima::rpc::protocol::dds::rpc::RequestHeaderPlugin::get_typecode();
        Calculator_Request_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)Calculator_CallPlugin::get_typecode();
        is_initialized = true;
    }

    return &Calculator_Request_g_tc;
}

struct PRESTypePlugin *Calculator_RequestPlugin::new_plugin(void)
{
    //printf("=> Calculator_RequestPlugin::new_plugin\n");
    struct PRESTypePlugin *plugin = NULL;
    const struct PRESTypePluginVersion PLUGIN_VERSION = PRES_TYPE_PLUGIN_VERSION_2_0;

    RTIOsapiHeap_allocateStructure(&plugin, struct PRESTypePlugin);

    if (plugin != NULL)
    {
        plugin->version = PLUGIN_VERSION;

        /* set up parent's function pointers */
        plugin->onParticipantAttached =
            (PRESTypePluginOnParticipantAttachedCallback)
            Calculator_RequestPlugin::on_participant_attached;
        plugin->onParticipantDetached =
            (PRESTypePluginOnParticipantDetachedCallback)
            Calculator_RequestPlugin::on_participant_detached;
        plugin->onEndpointAttached =
            (PRESTypePluginOnEndpointAttachedCallback)
            Calculator_RequestPlugin::on_endpoint_attached;
        plugin->onEndpointDetached =
            (PRESTypePluginOnEndpointDetachedCallback)
            Calculator_RequestPlugin::on_endpoint_detached;

        plugin->copySampleFnc =
            (PRESTypePluginCopySampleFunction)
            Calculator_RequestPlugin::copy_sample;
        plugin->createSampleFnc =
            (PRESTypePluginCreateSampleFunction)
            PRESTypePluginDefaultEndpointData_createSample;
        plugin->destroySampleFnc =
            (PRESTypePluginDestroySampleFunction)
            PRESTypePluginDefaultEndpointData_deleteSample;

        plugin->serializeFnc =
            (PRESTypePluginSerializeFunction)
            Calculator_RequestPlugin::serialize;
        plugin->deserializeFnc =
            (PRESTypePluginDeserializeFunction)
            Calculator_RequestPlugin::deserialize;
        plugin->getSerializedSampleMaxSizeFnc =
            (PRESTypePluginGetSerializedSampleMaxSizeFunction)
            Calculator_RequestPlugin::get_serialized_sample_max_size;
        plugin->getSerializedSampleMinSizeFnc =
            (PRESTypePluginGetSerializedSampleMinSizeFunction)
            Calculator_RequestPlugin::get_serialized_sample_min_size;


        plugin->getSampleFnc =
            (PRESTypePluginGetSampleFunction)
            PRESTypePluginDefaultEndpointData_getSample;

        plugin->returnSampleFnc =
            (PRESTypePluginReturnSampleFunction)
            PRESTypePluginDefaultEndpointData_returnSample;

        plugin->getKeyKindFnc =
            (PRESTypePluginGetKeyKindFunction)
            Calculator_RequestPlugin::get_key_kind;


        /* These functions are only used for keyed types. As this is not a keyed
           type they are all set to NULL
         */
        plugin->serializeKeyFnc = NULL;
        plugin->deserializeKeyFnc = NULL;
        plugin->getKeyFnc = NULL;
        plugin->returnKeyFnc = NULL;
        plugin->instanceToKeyFnc = NULL;
        plugin->keyToInstanceFnc = NULL;
        plugin->getSerializedKeyMaxSizeFnc = NULL;
        plugin->instanceToKeyHashFnc = NULL;
        plugin->serializedSampleToKeyHashFnc = NULL;
        plugin->serializedKeyToKeyHashFnc = NULL;

        plugin->typeCode =  (struct RTICdrTypeCode *)Calculator_RequestPlugin::get_typecode();

        plugin->languageKind = PRES_TYPEPLUGIN_DDS_TYPE; 

        /* Serialized buffer */
        plugin->getBuffer = 
            (PRESTypePluginGetBufferFunction)
            PRESTypePluginDefaultEndpointData_getBuffer;
        plugin->returnBuffer = 
            (PRESTypePluginReturnBufferFunction)
            PRESTypePluginDefaultEndpointData_returnBuffer;
        plugin->getSerializedSampleSizeFnc =
            (PRESTypePluginGetSerializedSampleSizeFunction)
            Calculator_RequestPlugin::get_serialized_sample_size;

        plugin->endpointTypeName = m_typename;

        return plugin;
    }

    return NULL;
}

void
Calculator_RequestPlugin::delete_plugin(struct PRESTypePlugin *plugin)
{
    //printf("=> Calculator_RequestPlugin::delete_plugin\n");
    RTIOsapiHeap_freeStructure(plugin);
}

bool Calculator_RequestPlugin::register_type(DDSDomainParticipant *participant, const char *type_name)
{
    //printf("=> Calculator_RequestPlugin::register_type\n");
    bool returnedValue = false;
    struct PRESTypePlugin *typeDDSPlugin = NULL;
    static DDSTypeSupport *typePlugin = NULL;

    if(participant != NULL)
    {
        typeDDSPlugin = Calculator_RequestPlugin::new_plugin();

        if(typeDDSPlugin != NULL)
        {
            if(typePlugin == NULL)
            {
                typePlugin = new Calculator_RequestPlugin();
            }

            typeDDSPlugin->_userBuffer = (PRESWord*)typePlugin;

            if(DDS_DomainParticipant_register_type(participant->get_c_domain_participantI(), type_name, typeDDSPlugin, NULL) == DDS_RETCODE_OK)
                returnedValue = true;

            Calculator_RequestPlugin::delete_plugin(typeDDSPlugin);
        }
    }

    return returnedValue;
}

DDSDataReader* Calculator_RequestPlugin::create_datareaderI(DDSDataReader* dataReader)
{
    return new Calculator_RequestDataReader(dataReader);
}

DDS_ReturnCode_t Calculator_RequestPlugin::destroy_datareaderI(DDSDataReader* dataReader)
{
    delete (Calculator_RequestDataReader*)dataReader;
    return DDS_RETCODE_OK;
}

DDSDataWriter* Calculator_RequestPlugin::create_datawriterI(DDSDataWriter* dataWriter)
{
    return new Calculator_RequestDataWriter(dataWriter);
}

DDS_ReturnCode_t Calculator_RequestPlugin::destroy_datawriterI(DDSDataWriter* dataWriter)
{
    delete (Calculator_RequestDataWriter*)dataWriter;
    return DDS_RETCODE_OK;
}

// Reply interfaces
const char *Calculator_ReplyPlugin::m_typename = "Calculator_Reply";

const char* Calculator_ReplyPlugin::get_typename()
{
    //printf("=> Calculator_ReplyPlugin::get_typename\n");
    return m_typename;
}

void 
Calculator_ReplyPlugin::copy_data(
    Calculator_Reply *dst,
    const Calculator_Reply *src)
{
    //printf("=> Calculator_ReplyPlugin::copy_data\n");
    *dst = *src;
}

Calculator_Reply*
Calculator_ReplyPlugin::create_data(void)
{
    //printf("=> Calculator_ReplyPlugin::create_data\n");
    Calculator_Reply *reply = new Calculator_Reply();
    return reply;
}

void 
Calculator_ReplyPlugin::destroy_data(
    Calculator_Reply *sample)
{
    //printf("=> Calculator_ReplyPlugin::destroy_data\n");
    if(sample != NULL)
        delete sample;
}

unsigned int 
Calculator_ReplyPlugin::get_serialized_sample_max_size(
    PRESTypePluginEndpointData endpoint_data,
    RTIBool include_encapsulation,
    RTIEncapsulationId encapsulation_id,
    unsigned int current_alignment)
{
    //printf("=> Calculator_ReplyPlugin::get_serialized_sample_max_size\n");
    unsigned int initial_alignment = current_alignment;

    unsigned int encapsulation_size = current_alignment;

    if (include_encapsulation) {

        if (!RTICdrEncapsulation_validEncapsulationId(encapsulation_id)) {
            return 1;
        }

        RTICdrStream_getEncapsulationSize(encapsulation_size);
        encapsulation_size -= current_alignment;
        current_alignment = 0;
        initial_alignment = 0;

    }


    current_alignment += (unsigned int)Calculator_Reply::getMaxCdrSerializedSize(current_alignment);

    if (include_encapsulation) {
        current_alignment += encapsulation_size;
    } 

    //printf("Max ser size: %u\n", current_alignment - initial_alignment);
    return current_alignment - initial_alignment;
}

unsigned int
Calculator_ReplyPlugin::get_serialized_sample_size(
    PRESTypePluginEndpointData endpoint_data,
    RTIBool include_encapsulation,
    RTIEncapsulationId encapsulation_id,
    unsigned int current_alignment,
    const Calculator_Reply * sample)
{
    //printf("=> Calculator_ReplyPlugin::get_serialized_sample_size\n");
    /* TODO
    unsigned int initial_alignment = current_alignment;

    unsigned int encapsulation_size = current_alignment;

    if (include_encapsulation) {

        if (!RTICdrEncapsulation_validEncapsulationId(encapsulation_id)) {
            return 1;
        }

        RTICdrStream_getEncapsulationSize(encapsulation_size);
        encapsulation_size -= current_alignment;
        current_alignment = 0;
        initial_alignment = 0;

    }


    current_alignment += rpc::ReplyHeaderPlugin::get_serialized_sample_size(
        endpoint_data,RTI_FALSE, encapsulation_id, 
        current_alignment, &sample->header);
            

    current_alignment += RTICdrType_getOctetMaxSizeSerialized(
        current_alignment);
            

    current_alignment += RTICdrType_getOctetMaxSizeSerialized(
        current_alignment);
            

    if (include_encapsulation) {
        current_alignment += encapsulation_size;
    }

    return current_alignment - initial_alignment;
    */

    return (unsigned int)sample->getSerializedSize(current_alignment);
}

unsigned int 
Calculator_ReplyPlugin::get_serialized_sample_min_size(
    PRESTypePluginEndpointData endpoint_data,
    RTIBool include_encapsulation,
    RTIEncapsulationId encapsulation_id,
    unsigned int current_alignment)
{
    //printf("=> Calculator_ReplyPlugin::get_serialized_sample_min_size\n");
    // TODO
    return 0;
}

PRESTypePluginParticipantData 
Calculator_ReplyPlugin::on_participant_attached(
    void *registration_data, 
    const struct PRESTypePluginParticipantInfo *participant_info,
    RTIBool top_level_registration, 
    void *container_plugin_context,
    RTICdrTypeCode *typeCode)
{
    //printf("=> Calculator_ReplyPlugin::on_participant_attached\n");
    return PRESTypePluginDefaultParticipantData_new(participant_info);
}

void
Calculator_ReplyPlugin::on_participant_detached(
    PRESTypePluginParticipantData participant_data)
{
    //printf("=> Calculator_ReplyPlugin::on_participant_detached\n");
    PRESTypePluginDefaultParticipantData_delete(participant_data);
}

PRESTypePluginEndpointData 
Calculator_ReplyPlugin::on_endpoint_attached(
    PRESTypePluginParticipantData participant_data,
    const struct PRESTypePluginEndpointInfo *endpoint_info,
    RTIBool top_level_registration, 
    void *container_plugin_context)
{
    //printf("=> Calculator_ReplyPlugin::on_endpoint_attached\n");
    PRESTypePluginEndpointData epd = NULL;
    unsigned int serializedSampleMaxSize;

    epd = PRESTypePluginDefaultEndpointData_new(
            participant_data,
            endpoint_info,
            (PRESTypePluginDefaultEndpointDataCreateSampleFunction)
            Calculator_ReplyPlugin::create_data,
            (PRESTypePluginDefaultEndpointDataDestroySampleFunction)
            Calculator_ReplyPlugin::destroy_data,
            NULL, NULL);

    if(epd != NULL)
    {
        if(endpoint_info->endpointKind == PRES_TYPEPLUGIN_ENDPOINT_WRITER)
        {
            serializedSampleMaxSize = Calculator_ReplyPlugin::get_serialized_sample_max_size(
                    epd, RTI_FALSE, RTI_CDR_ENCAPSULATION_ID_CDR_BE, 0);

            PRESTypePluginDefaultEndpointData_setMaxSizeSerializedSample(epd, serializedSampleMaxSize);

            if(PRESTypePluginDefaultEndpointData_createWriterPool(
                        epd,
                        endpoint_info,
                        (PRESTypePluginGetSerializedSampleMaxSizeFunction)
                        Calculator_ReplyPlugin::get_serialized_sample_max_size, epd,
                        (PRESTypePluginGetSerializedSampleSizeFunction)
                        Calculator_ReplyPlugin::get_serialized_sample_size,
                        epd) == RTI_FALSE)
            {
                PRESTypePluginDefaultEndpointData_delete(epd);
                epd = NULL;
            }
        }
    }

    return epd;    
}

void 
Calculator_ReplyPlugin::on_endpoint_detached(
    PRESTypePluginEndpointData endpoint_data)
{  
    //printf("=> Calculator_ReplyPlugin::on_endpoint_detached\n");
    PRESTypePluginDefaultEndpointData_delete(endpoint_data);
}

RTIBool 
Calculator_ReplyPlugin::copy_sample(
    PRESTypePluginEndpointData endpoint_data,
    Calculator_Reply *dst,
    const Calculator_Reply *src)
{
    //printf("=> Calculator_ReplyPlugin::copy_sample\n");
    *dst = std::move(*src);
    return RTI_TRUE;
}

RTIBool 
Calculator_ReplyPlugin::serialize(
    PRESTypePluginEndpointData endpoint_data,
    const Calculator_Reply *sample, 
    struct RTICdrStream *stream,    
    RTIBool serialize_encapsulation,
    RTIEncapsulationId encapsulation_id,
    RTIBool serialize_sample, 
    void *endpoint_plugin_qos)
{
    //printf("=> Calculator_ReplyPlugin::serialize\n");
    eprosima::fastcdr::FastBuffer buffer(stream->_buffer, stream->_bufferLength);
    eprosima::fastcdr::Cdr scdr(buffer, (eprosima::fastcdr::Cdr::Endianness)stream->_endian, eprosima::fastcdr::Cdr::DDS_CDR);
    scdr.moveAlignmentForward(stream->_relativeBuffer - stream->_buffer);
    scdr.jump(stream->_currentPosition - stream->_buffer);

    if(serialize_encapsulation)
    {
        scdr.changeEndianness((eprosima::fastcdr::Cdr::Endianness)(encapsulation_id & 0x1));
        scdr.serialize_encapsulation();
        scdr.resetAlignment();
    }

    if(serialize_sample)
    {
        try
        {
            scdr << *sample;
        }
        catch(eprosima::rpc::exception::BadParamException ex)
        {
            //printf("ERROR<eprosima::rpc::exception::BadParamException>: %s\n", ex.what());
            return RTI_FALSE;
        }
        catch(eprosima::fastcdr::exception::BadParamException ex)
        {
            //printf("ERROR<eprosima::fastcdr::exception::BadParamException>: %s\n", ex.what());
            return RTI_FALSE;
        }
        catch(eprosima::fastcdr::exception::NotEnoughMemoryException ex)
        {
            //printf("ERROR<eprosima::fastcdr::exception::NotEnoughMemoryException>: %s\n", ex.what());
            return RTI_FALSE;
        }
    }

    stream->_currentPosition = scdr.getCurrentPosition();
    return RTI_TRUE;
}

RTIBool 
Calculator_ReplyPlugin::deserialize(
    PRESTypePluginEndpointData endpoint_data,
    Calculator_Reply **sample,
    RTIBool * drop_sample,
    struct RTICdrStream *stream,   
    RTIBool deserialize_encapsulation,
    RTIBool deserialize_sample, 
    void *endpoint_plugin_qos)
{
    //printf("=> Calculator_ReplyPlugin::deserialize\n");
    Calculator_Reply *_sample = *sample;
    eprosima::fastcdr::FastBuffer buffer(stream->_buffer, stream->_bufferLength);
    eprosima::fastcdr::Cdr dcdr(buffer, (eprosima::fastcdr::Cdr::Endianness)stream->_endian, eprosima::fastcdr::Cdr::DDS_CDR);
    dcdr.moveAlignmentForward(stream->_relativeBuffer - stream->_buffer);
    dcdr.jump(stream->_currentPosition - stream->_buffer);

    if(deserialize_encapsulation)
    {
        dcdr.read_encapsulation();
        dcdr.resetAlignment();
    }

    if(deserialize_sample)
    {
        dcdr >> *_sample;
    }

    stream->_currentPosition = dcdr.getCurrentPosition();
    return RTI_TRUE;
}

PRESTypePluginKeyKind 
Calculator_ReplyPlugin::get_key_kind(void)
{
    //printf("=> Calculator_ReplyPlugin::get_key_kind\n");
    return PRES_TYPEPLUGIN_NO_KEY;
}

DDS_TypeCode* Calculator_ReturnPlugin::get_typecode()
{
    static bool is_initialized = false;

    static DDS_TypeCode_Member Calculator_Return_g_tc_members[2 + 1] =
    {
        {
            (char *)"unknownOp",/* Member name */
            {
                1,/* Representation ID */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            0, /* Ignored */
            1, /* Number of labels */
            RTI_CDR_TYPE_CODE_UNION_DEFAULT_LABEL, /* First label */
            NULL, /* Labels (it is NULL when there is only one label)*/
            RTI_CDR_NONKEY_MEMBER, /* Member flags */
            DDS_PRIVATE_MEMBER,/* Ignored */
            1,
            NULL/* Ignored */
        }
                ,
                {
                    (char *)"addition",
                    {
                        0,
                        DDS_BOOLEAN_FALSE,
                        -1,
                        NULL
                    },
                    0,
                    1,
                    (RTICdrLong)0xCBC6CEAA,
                    NULL,
                    RTI_CDR_NONKEY_MEMBER,
                    DDS_PRIVATE_MEMBER,
                    1,
                    NULL
                }
                ,
                {
                    (char *)"subtraction",
                    {
                        0,
                        DDS_BOOLEAN_FALSE,
                        -1,
                        NULL
                    },
                    0,
                    1,
                    (RTICdrLong)0xCA019A14,
                    NULL,
                    RTI_CDR_NONKEY_MEMBER,
                    DDS_PRIVATE_MEMBER,
                    1,
                    NULL
                }
    };

    static DDS_TypeCode Calculator_Return_g_tc =
    {{
         DDS_TK_UNION,
         DDS_BOOLEAN_FALSE,
         -1,
         (char*)"Calculator_Return",
         NULL,
         0,
         0,
         NULL,
         2 + 1,
         Calculator_Return_g_tc_members,
         DDS_VM_NONE
    }};
    
    if(!is_initialized)
    {
        Calculator_Return_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)eprosima::rpc::protocol::dds::rpc::UnknownOperationPlugin::get_typecode();
        Calculator_Return_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode*)CalculatorPlugin::addition_ResultPlugin::get_typecode();
        Calculator_Return_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode*)CalculatorPlugin::subtraction_ResultPlugin::get_typecode();

        Calculator_Return_g_tc._data._typeCode = (RTICdrTypeCode*)&DDS_g_tc_long;

        is_initialized = true;
    }

    return &Calculator_Return_g_tc;
}

DDS_TypeCode* Calculator_ReplyPlugin::get_typecode()
{
    //printf("=> Calculator_ReplyPlugin::get_typecode\n");
    static bool is_initialized = false;

    static DDS_TypeCode_Member Calculator_Reply_g_tc_members[2] =
    {
        // TODO Add header.
        {
            (char *)"header",
            {
                0,
                DDS_BOOLEAN_FALSE,
                -1,
                NULL
            },
            0,
            0,
            0,
            NULL,
            RTI_CDR_REQUIRED_MEMBER,
            DDS_PRIVATE_MEMBER,
            1,
            NULL
        },
        {
            (char *)"data",
            {
                0,
                DDS_BOOLEAN_FALSE,
                -1,
                NULL
            },
            0,
            0,
            0,
            NULL,
            RTI_CDR_REQUIRED_MEMBER,
            DDS_PRIVATE_MEMBER,
            1,
            NULL
        }
    };

    static DDS_TypeCode Calculator_Reply_g_tc =
    {{
         DDS_TK_STRUCT,
         DDS_BOOLEAN_FALSE,
         -1,
         (char*)m_typename,
         NULL,
         0,
         0,
         NULL,
         2,
         Calculator_Reply_g_tc_members,
         DDS_VM_NONE
    }};
    
    if(!is_initialized)
    {
        Calculator_Reply_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)eprosima::rpc::protocol::dds::rpc::ReplyHeaderPlugin::get_typecode();
        Calculator_Reply_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)Calculator_ReturnPlugin::get_typecode();

        is_initialized = true;
    }

    return &Calculator_Reply_g_tc;
}

struct PRESTypePlugin *Calculator_ReplyPlugin::new_plugin(void)
{
    //printf("=> Calculator_ReplyPlugin::new_plugin\n");
    struct PRESTypePlugin *plugin = NULL;
    const struct PRESTypePluginVersion PLUGIN_VERSION = PRES_TYPE_PLUGIN_VERSION_2_0;

    RTIOsapiHeap_allocateStructure(&plugin, struct PRESTypePlugin);

    if (plugin != NULL)
    {
        plugin->version = PLUGIN_VERSION;

        /* set up parent's function pointers */
        plugin->onParticipantAttached =
            (PRESTypePluginOnParticipantAttachedCallback)
            Calculator_ReplyPlugin::on_participant_attached;
        plugin->onParticipantDetached =
            (PRESTypePluginOnParticipantDetachedCallback)
            Calculator_ReplyPlugin::on_participant_detached;
        plugin->onEndpointAttached =
            (PRESTypePluginOnEndpointAttachedCallback)
            Calculator_ReplyPlugin::on_endpoint_attached;
        plugin->onEndpointDetached =
            (PRESTypePluginOnEndpointDetachedCallback)
            Calculator_ReplyPlugin::on_endpoint_detached;

        plugin->copySampleFnc =
            (PRESTypePluginCopySampleFunction)
            Calculator_ReplyPlugin::copy_sample;
        plugin->createSampleFnc =
            (PRESTypePluginCreateSampleFunction)
            PRESTypePluginDefaultEndpointData_createSample;
        plugin->destroySampleFnc =
            (PRESTypePluginDestroySampleFunction)
            PRESTypePluginDefaultEndpointData_deleteSample;

        plugin->serializeFnc =
            (PRESTypePluginSerializeFunction)
            Calculator_ReplyPlugin::serialize;
        plugin->deserializeFnc =
            (PRESTypePluginDeserializeFunction)
            Calculator_ReplyPlugin::deserialize;
        plugin->getSerializedSampleMaxSizeFnc =
            (PRESTypePluginGetSerializedSampleMaxSizeFunction)
            Calculator_ReplyPlugin::get_serialized_sample_max_size;
        plugin->getSerializedSampleMinSizeFnc =
            (PRESTypePluginGetSerializedSampleMinSizeFunction)
            Calculator_ReplyPlugin::get_serialized_sample_min_size;


        plugin->getSampleFnc =
            (PRESTypePluginGetSampleFunction)
            PRESTypePluginDefaultEndpointData_getSample;

        plugin->returnSampleFnc =
            (PRESTypePluginReturnSampleFunction)
            PRESTypePluginDefaultEndpointData_returnSample;

        plugin->getKeyKindFnc =
            (PRESTypePluginGetKeyKindFunction)
            Calculator_ReplyPlugin::get_key_kind;


        /* These functions are only used for keyed types. As this is not a keyed
           type they are all set to NULL
         */
        plugin->serializeKeyFnc = NULL;
        plugin->deserializeKeyFnc = NULL;
        plugin->getKeyFnc = NULL;
        plugin->returnKeyFnc = NULL;
        plugin->instanceToKeyFnc = NULL;
        plugin->keyToInstanceFnc = NULL;
        plugin->getSerializedKeyMaxSizeFnc = NULL;
        plugin->instanceToKeyHashFnc = NULL;
        plugin->serializedSampleToKeyHashFnc = NULL;
        plugin->serializedKeyToKeyHashFnc = NULL;

        plugin->typeCode =  (struct RTICdrTypeCode *)Calculator_ReplyPlugin::get_typecode();

        plugin->languageKind = PRES_TYPEPLUGIN_DDS_TYPE; 

        /* Serialized buffer */
        plugin->getBuffer = 
            (PRESTypePluginGetBufferFunction)
            PRESTypePluginDefaultEndpointData_getBuffer;
        plugin->returnBuffer = 
            (PRESTypePluginReturnBufferFunction)
            PRESTypePluginDefaultEndpointData_returnBuffer;
        plugin->getSerializedSampleSizeFnc =
            (PRESTypePluginGetSerializedSampleSizeFunction)
            Calculator_ReplyPlugin::get_serialized_sample_size;

        plugin->endpointTypeName = m_typename;

        return plugin;
    }

    return NULL;
}

void
Calculator_ReplyPlugin::delete_plugin(struct PRESTypePlugin *plugin)
{
    //printf("=> Calculator_ReplyPlugin::delete_plugin\n");
    RTIOsapiHeap_freeStructure(plugin);
}

bool Calculator_ReplyPlugin::register_type(DDSDomainParticipant *participant, const char *type_name)
{
    //printf("=> Calculator_ReplyPlugin::register_type\n");
    bool returnedValue = false;
    struct PRESTypePlugin *typeDDSPlugin = NULL;
    static DDSTypeSupport *typePlugin = NULL;

    if(participant != NULL)
    {
        typeDDSPlugin = Calculator_ReplyPlugin::new_plugin();

        if(typeDDSPlugin != NULL)
        {
            if(typePlugin == NULL)
            {
                typePlugin = new Calculator_ReplyPlugin();
            }

            typeDDSPlugin->_userBuffer = (PRESWord*)typePlugin;

            if(DDS_DomainParticipant_register_type(participant->get_c_domain_participantI(), type_name, typeDDSPlugin, NULL) == DDS_RETCODE_OK)
                returnedValue = true;

            Calculator_ReplyPlugin::delete_plugin(typeDDSPlugin);
        }
    }

    return returnedValue;
}


DDSDataReader* Calculator_ReplyPlugin::create_datareaderI(DDSDataReader* dataReader)
{
    return new Calculator_ReplyDataReader(dataReader);
}

DDS_ReturnCode_t Calculator_ReplyPlugin::destroy_datareaderI(DDSDataReader* dataReader)
{
    delete (Calculator_ReplyDataReader*)dataReader;
    return DDS_RETCODE_OK;
}

DDSDataWriter* Calculator_ReplyPlugin::create_datawriterI(DDSDataWriter* dataWriter)
{
    return new Calculator_ReplyDataWriter(dataWriter);
}

DDS_ReturnCode_t Calculator_ReplyPlugin::destroy_datawriterI(DDSDataWriter* dataWriter)
{
    delete (Calculator_ReplyDataWriter*)dataWriter;
    return DDS_RETCODE_OK;
}

