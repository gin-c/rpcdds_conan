/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorTopics.h
 * This header file contains the declaration of topics generated using operations in the IDL file.
 *
 * This file was generated by the tool rpcddsgen.
 */

#ifndef _Calculator_TOPICS_H_
#define _Calculator_TOPICS_H_

#include "Calculator.h"
#include <rpcdds/protocols/dds/MessageHeader.h>
#include <rpcdds/utils/Messages.h>

#include <cstddef>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define user_cpp_DllExport __declspec( dllexport )
#else
#define user_cpp_DllExport
#endif
#else
#define user_cpp_DllExport
#endif










/*!
 * @brief This class represents the structure Calculator_sendTouchEvent_In that can be used to send/receive requests
 * for the operation Calculator::sendTouchEvent.
 * @ingroup CALCULATOR
 */
class Calculator_sendTouchEvent_In
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_sendTouchEvent_In();
    
    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_sendTouchEvent_In();
    
    /*
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_sendTouchEvent_In that will be copied.
     */
    user_cpp_DllExport Calculator_sendTouchEvent_In(const Calculator_sendTouchEvent_In &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_sendTouchEvent_In that will be copied.
     */
    user_cpp_DllExport Calculator_sendTouchEvent_In(Calculator_sendTouchEvent_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_sendTouchEvent that will be copied.
     */
    user_cpp_DllExport Calculator_sendTouchEvent_In& operator=(const Calculator_sendTouchEvent_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_sendTouchEvent that will be copied.
     */
    user_cpp_DllExport Calculator_sendTouchEvent_In& operator=(Calculator_sendTouchEvent_In &&x);

    /*!
     * @brief This function sets a value in member action
     * @param _action New value for member action
     */
    inline user_cpp_DllExport void action(int32_t _action)
    {
        m_action = _action;
    }

    /*!
     * @brief This function returns the value of member action
     * @return Value of member action
     */
    inline user_cpp_DllExport int32_t action() const
    {
        return m_action;
    }

    /*!
     * @brief This function returns a reference to member action
     * @return Reference to member action
     */
    inline user_cpp_DllExport int32_t& action()
    {
        return m_action;
    }
    /*!
     * @brief This function sets a value in member width
     * @param _width New value for member width
     */
    inline user_cpp_DllExport void width(int32_t _width)
    {
        m_width = _width;
    }

    /*!
     * @brief This function returns the value of member width
     * @return Value of member width
     */
    inline user_cpp_DllExport int32_t width() const
    {
        return m_width;
    }

    /*!
     * @brief This function returns a reference to member width
     * @return Reference to member width
     */
    inline user_cpp_DllExport int32_t& width()
    {
        return m_width;
    }
    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    inline user_cpp_DllExport void height(int32_t _height)
    {
        m_height = _height;
    }

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    inline user_cpp_DllExport int32_t height() const
    {
        return m_height;
    }

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    inline user_cpp_DllExport int32_t& height()
    {
        return m_height;
    }
    /*!
     * @brief This function sets a value in member count
     * @param _count New value for member count
     */
    inline user_cpp_DllExport void count(int32_t _count)
    {
        m_count = _count;
    }

    /*!
     * @brief This function returns the value of member count
     * @return Value of member count
     */
    inline user_cpp_DllExport int32_t count() const
    {
        return m_count;
    }

    /*!
     * @brief This function returns a reference to member count
     * @return Reference to member count
     */
    inline user_cpp_DllExport int32_t& count()
    {
        return m_count;
    }
    /*!
     * @brief This function copies the value in member trackID
     * @param _trackID New value to be copied in member trackID
     */
    inline user_cpp_DllExport void trackID(const LongArray &_trackID)
    {
        m_trackID = _trackID;
    }

    /*!
     * @brief This function moves the value in member trackID
     * @param _trackID New value to be moved in member trackID
     */
    inline user_cpp_DllExport void trackID(LongArray &&_trackID)
    {
        m_trackID = std::move(_trackID);
    }

    /*!
     * @brief This function returns a constant reference to member trackID
     * @return Constant reference to member trackID
     */
    inline user_cpp_DllExport const LongArray& trackID() const
    {
        return m_trackID;
    }

    /*!
     * @brief This function returns a reference to member trackID
     * @return Reference to member trackID
     */
    inline user_cpp_DllExport LongArray& trackID()
    {
        return m_trackID;
    }
    /*!
     * @brief This function copies the value in member x
     * @param _x New value to be copied in member x
     */
    inline user_cpp_DllExport void x(const LongArray &_x)
    {
        m_x = _x;
    }

    /*!
     * @brief This function moves the value in member x
     * @param _x New value to be moved in member x
     */
    inline user_cpp_DllExport void x(LongArray &&_x)
    {
        m_x = std::move(_x);
    }

    /*!
     * @brief This function returns a constant reference to member x
     * @return Constant reference to member x
     */
    inline user_cpp_DllExport const LongArray& x() const
    {
        return m_x;
    }

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    inline user_cpp_DllExport LongArray& x()
    {
        return m_x;
    }
    /*!
     * @brief This function copies the value in member y
     * @param _y New value to be copied in member y
     */
    inline user_cpp_DllExport void y(const LongArray &_y)
    {
        m_y = _y;
    }

    /*!
     * @brief This function moves the value in member y
     * @param _y New value to be moved in member y
     */
    inline user_cpp_DllExport void y(LongArray &&_y)
    {
        m_y = std::move(_y);
    }

    /*!
     * @brief This function returns a constant reference to member y
     * @return Constant reference to member y
     */
    inline user_cpp_DllExport const LongArray& y() const
    {
        return m_y;
    }

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    inline user_cpp_DllExport LongArray& y()
    {
        return m_y;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_sendTouchEvent_In& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    int32_t m_action;
    int32_t m_width;
    int32_t m_height;
    int32_t m_count;
    LongArray m_trackID;
    LongArray m_x;
    LongArray m_y;
};
/*!
 * @brief This class encapsulates output paramaters for operation Calculator::sendTouchEvent.
 * @ingroup CALCULATOR
 */
class Calculator_sendTouchEvent_Out
{
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_sendTouchEvent_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_sendTouchEvent_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_sendTouchEvent_Out that will be copied.
     */
    user_cpp_DllExport Calculator_sendTouchEvent_Out(const Calculator_sendTouchEvent_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_sendTouchEvent_Out that will be copied.
     */
    user_cpp_DllExport Calculator_sendTouchEvent_Out(Calculator_sendTouchEvent_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_sendTouchEvent that will be copied.
     */
    user_cpp_DllExport Calculator_sendTouchEvent_Out& operator=(const Calculator_sendTouchEvent_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_sendTouchEvent that will be copied.
     */
    user_cpp_DllExport Calculator_sendTouchEvent_Out& operator=(Calculator_sendTouchEvent_Out &&x);

    /*!
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    inline user_cpp_DllExport void return_(bool _return_)
    {
        m_return_ = _return_;
    }

    /*!
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    inline user_cpp_DllExport bool return_() const
    {
        return m_return_;
    }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport bool& return_()
    {
        return m_return_;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_sendTouchEvent_Out& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    bool m_return_;
};


/*!
 * @brief This class represents the structure Calculator_sendTouchEvent_Result that can be used to send/receive replies
 * for the operation Calculator::sendTouchEvent.
 * 
 * @ingroup CALCULATOR
 */
class Calculator_sendTouchEvent_Result
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_sendTouchEvent_Result();
    
    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_sendTouchEvent_Result();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_sendTouchEvent_Result that will be copied.
     */
    user_cpp_DllExport Calculator_sendTouchEvent_Result(const Calculator_sendTouchEvent_Result &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_sendTouchEvent_Result that will be copied.
     */
    user_cpp_DllExport Calculator_sendTouchEvent_Result(Calculator_sendTouchEvent_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_sendTouchEvent that will be copied.
     */
    user_cpp_DllExport Calculator_sendTouchEvent_Result& operator=(const Calculator_sendTouchEvent_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_sendTouchEvent that will be copied.
     */
    user_cpp_DllExport Calculator_sendTouchEvent_Result& operator=(Calculator_sendTouchEvent_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);
    
    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;
    
    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t& _d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;
    
    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException& unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const Calculator_sendTouchEvent_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(Calculator_sendTouchEvent_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    user_cpp_DllExport const Calculator_sendTouchEvent_Out& result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    user_cpp_DllExport Calculator_sendTouchEvent_Out& result();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_sendTouchEvent_Result& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    Calculator_sendTouchEvent_Out m_result;

};
/*!
 * @brief This class represents the structure Calculator_sendGotoForeground_In that can be used to send/receive requests
 * for the operation Calculator::sendGotoForeground.
 * @ingroup CALCULATOR
 */
class Calculator_sendGotoForeground_In
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_sendGotoForeground_In();
    
    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_sendGotoForeground_In();
    
    /*
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_sendGotoForeground_In that will be copied.
     */
    user_cpp_DllExport Calculator_sendGotoForeground_In(const Calculator_sendGotoForeground_In &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_sendGotoForeground_In that will be copied.
     */
    user_cpp_DllExport Calculator_sendGotoForeground_In(Calculator_sendGotoForeground_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_sendGotoForeground that will be copied.
     */
    user_cpp_DllExport Calculator_sendGotoForeground_In& operator=(const Calculator_sendGotoForeground_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_sendGotoForeground that will be copied.
     */
    user_cpp_DllExport Calculator_sendGotoForeground_In& operator=(Calculator_sendGotoForeground_In &&x);

    inline user_cpp_DllExport void dummy(eprosima::rpc::protocol::dds::rpc::UnusedMember _dummy)
    {
        m_dummy = _dummy;
    }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember dummy() const
    {
        return m_dummy;
    }

    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnusedMember& dummy()
    {
        return m_dummy;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_sendGotoForeground_In& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    eprosima::rpc::protocol::dds::rpc::UnusedMember m_dummy;
};
/*!
 * @brief This class encapsulates output paramaters for operation Calculator::sendGotoForeground.
 * @ingroup CALCULATOR
 */
class Calculator_sendGotoForeground_Out
{
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_sendGotoForeground_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_sendGotoForeground_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_sendGotoForeground_Out that will be copied.
     */
    user_cpp_DllExport Calculator_sendGotoForeground_Out(const Calculator_sendGotoForeground_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_sendGotoForeground_Out that will be copied.
     */
    user_cpp_DllExport Calculator_sendGotoForeground_Out(Calculator_sendGotoForeground_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_sendGotoForeground that will be copied.
     */
    user_cpp_DllExport Calculator_sendGotoForeground_Out& operator=(const Calculator_sendGotoForeground_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_sendGotoForeground that will be copied.
     */
    user_cpp_DllExport Calculator_sendGotoForeground_Out& operator=(Calculator_sendGotoForeground_Out &&x);

    /*!
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    inline user_cpp_DllExport void return_(bool _return_)
    {
        m_return_ = _return_;
    }

    /*!
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    inline user_cpp_DllExport bool return_() const
    {
        return m_return_;
    }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport bool& return_()
    {
        return m_return_;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_sendGotoForeground_Out& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    bool m_return_;
};


/*!
 * @brief This class represents the structure Calculator_sendGotoForeground_Result that can be used to send/receive replies
 * for the operation Calculator::sendGotoForeground.
 * 
 * @ingroup CALCULATOR
 */
class Calculator_sendGotoForeground_Result
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_sendGotoForeground_Result();
    
    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_sendGotoForeground_Result();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_sendGotoForeground_Result that will be copied.
     */
    user_cpp_DllExport Calculator_sendGotoForeground_Result(const Calculator_sendGotoForeground_Result &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_sendGotoForeground_Result that will be copied.
     */
    user_cpp_DllExport Calculator_sendGotoForeground_Result(Calculator_sendGotoForeground_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_sendGotoForeground that will be copied.
     */
    user_cpp_DllExport Calculator_sendGotoForeground_Result& operator=(const Calculator_sendGotoForeground_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_sendGotoForeground that will be copied.
     */
    user_cpp_DllExport Calculator_sendGotoForeground_Result& operator=(Calculator_sendGotoForeground_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);
    
    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;
    
    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t& _d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;
    
    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException& unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const Calculator_sendGotoForeground_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(Calculator_sendGotoForeground_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    user_cpp_DllExport const Calculator_sendGotoForeground_Out& result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    user_cpp_DllExport Calculator_sendGotoForeground_Out& result();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_sendGotoForeground_Result& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    Calculator_sendGotoForeground_Out m_result;

};


/*!
 * @brief This class encapsulates output paramaters for operation Calculator::videoInitialized.
 * @ingroup CALCULATOR
 */
class Calculator_videoInitialized_Out
{
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_videoInitialized_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_videoInitialized_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_videoInitialized_Out that will be copied.
     */
    user_cpp_DllExport Calculator_videoInitialized_Out(const Calculator_videoInitialized_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_videoInitialized_Out that will be copied.
     */
    user_cpp_DllExport Calculator_videoInitialized_Out(Calculator_videoInitialized_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_videoInitialized that will be copied.
     */
    user_cpp_DllExport Calculator_videoInitialized_Out& operator=(const Calculator_videoInitialized_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_videoInitialized that will be copied.
     */
    user_cpp_DllExport Calculator_videoInitialized_Out& operator=(Calculator_videoInitialized_Out &&x);

    /*!
     * @brief This function sets a value in member type
     * @param _type New value for member type
     */
    inline user_cpp_DllExport void type(VideoType _type)
    {
        m_type = _type;
    }

    /*!
     * @brief This function returns the value of member type
     * @return Value of member type
     */
    inline user_cpp_DllExport VideoType type() const
    {
        return m_type;
    }

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    inline user_cpp_DllExport VideoType& type()
    {
        return m_type;
    }
    /*!
     * @brief This function copies the value in member videFormat
     * @param _videFormat New value to be copied in member videFormat
     */
    inline user_cpp_DllExport void videFormat(const VideoFormat &_videFormat)
    {
        m_videFormat = _videFormat;
    }

    /*!
     * @brief This function moves the value in member videFormat
     * @param _videFormat New value to be moved in member videFormat
     */
    inline user_cpp_DllExport void videFormat(VideoFormat &&_videFormat)
    {
        m_videFormat = std::move(_videFormat);
    }

    /*!
     * @brief This function returns a constant reference to member videFormat
     * @return Constant reference to member videFormat
     */
    inline user_cpp_DllExport const VideoFormat& videFormat() const
    {
        return m_videFormat;
    }

    /*!
     * @brief This function returns a reference to member videFormat
     * @return Reference to member videFormat
     */
    inline user_cpp_DllExport VideoFormat& videFormat()
    {
        return m_videFormat;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_videoInitialized_Out& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    VideoType m_type;
    VideoFormat m_videFormat;
};

/*!
 * @brief This class represents the structure Calculator_videoInitialized_Result that can be used to send/receive replies
 * for the operation Calculator::videoInitialized.
 * 
 * @ingroup CALCULATOR
 */
class Calculator_videoInitialized_Result
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_videoInitialized_Result();
    
    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_videoInitialized_Result();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_videoInitialized_Result that will be copied.
     */
    user_cpp_DllExport Calculator_videoInitialized_Result(const Calculator_videoInitialized_Result &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_videoInitialized_Result that will be copied.
     */
    user_cpp_DllExport Calculator_videoInitialized_Result(Calculator_videoInitialized_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_videoInitialized that will be copied.
     */
    user_cpp_DllExport Calculator_videoInitialized_Result& operator=(const Calculator_videoInitialized_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_videoInitialized that will be copied.
     */
    user_cpp_DllExport Calculator_videoInitialized_Result& operator=(Calculator_videoInitialized_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);
    
    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;
    
    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t& _d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;
    
    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException& unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const Calculator_videoInitialized_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(Calculator_videoInitialized_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    user_cpp_DllExport const Calculator_videoInitialized_Out& result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    user_cpp_DllExport Calculator_videoInitialized_Out& result();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_videoInitialized_Result& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    Calculator_videoInitialized_Out m_result;

};


/*!
 * @brief This class encapsulates output paramaters for operation Calculator::videoDataReceived.
 * @ingroup CALCULATOR
 */
class Calculator_videoDataReceived_Out
{
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_videoDataReceived_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_videoDataReceived_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_videoDataReceived_Out that will be copied.
     */
    user_cpp_DllExport Calculator_videoDataReceived_Out(const Calculator_videoDataReceived_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_videoDataReceived_Out that will be copied.
     */
    user_cpp_DllExport Calculator_videoDataReceived_Out(Calculator_videoDataReceived_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_videoDataReceived that will be copied.
     */
    user_cpp_DllExport Calculator_videoDataReceived_Out& operator=(const Calculator_videoDataReceived_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_videoDataReceived that will be copied.
     */
    user_cpp_DllExport Calculator_videoDataReceived_Out& operator=(Calculator_videoDataReceived_Out &&x);

    /*!
     * @brief This function sets a value in member type
     * @param _type New value for member type
     */
    inline user_cpp_DllExport void type(VideoType _type)
    {
        m_type = _type;
    }

    /*!
     * @brief This function returns the value of member type
     * @return Value of member type
     */
    inline user_cpp_DllExport VideoType type() const
    {
        return m_type;
    }

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    inline user_cpp_DllExport VideoType& type()
    {
        return m_type;
    }
    /*!
     * @brief This function sets a value in member size
     * @param _size New value for member size
     */
    inline user_cpp_DllExport void size(int32_t _size)
    {
        m_size = _size;
    }

    /*!
     * @brief This function returns the value of member size
     * @return Value of member size
     */
    inline user_cpp_DllExport int32_t size() const
    {
        return m_size;
    }

    /*!
     * @brief This function returns a reference to member size
     * @return Reference to member size
     */
    inline user_cpp_DllExport int32_t& size()
    {
        return m_size;
    }
    /*!
     * @brief This function copies the value in member byte
     * @param _byte New value to be copied in member byte
     */
    inline user_cpp_DllExport void byte(const ByteArray &_byte)
    {
        m_byte = _byte;
    }

    /*!
     * @brief This function moves the value in member byte
     * @param _byte New value to be moved in member byte
     */
    inline user_cpp_DllExport void byte(ByteArray &&_byte)
    {
        m_byte = std::move(_byte);
    }

    /*!
     * @brief This function returns a constant reference to member byte
     * @return Constant reference to member byte
     */
    inline user_cpp_DllExport const ByteArray& byte() const
    {
        return m_byte;
    }

    /*!
     * @brief This function returns a reference to member byte
     * @return Reference to member byte
     */
    inline user_cpp_DllExport ByteArray& byte()
    {
        return m_byte;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_videoDataReceived_Out& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    VideoType m_type;
    int32_t m_size;
    ByteArray m_byte;
};

/*!
 * @brief This class represents the structure Calculator_videoDataReceived_Result that can be used to send/receive replies
 * for the operation Calculator::videoDataReceived.
 * 
 * @ingroup CALCULATOR
 */
class Calculator_videoDataReceived_Result
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_videoDataReceived_Result();
    
    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_videoDataReceived_Result();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_videoDataReceived_Result that will be copied.
     */
    user_cpp_DllExport Calculator_videoDataReceived_Result(const Calculator_videoDataReceived_Result &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_videoDataReceived_Result that will be copied.
     */
    user_cpp_DllExport Calculator_videoDataReceived_Result(Calculator_videoDataReceived_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_videoDataReceived that will be copied.
     */
    user_cpp_DllExport Calculator_videoDataReceived_Result& operator=(const Calculator_videoDataReceived_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_videoDataReceived that will be copied.
     */
    user_cpp_DllExport Calculator_videoDataReceived_Result& operator=(Calculator_videoDataReceived_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);
    
    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;
    
    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t& _d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;
    
    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException& unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const Calculator_videoDataReceived_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(Calculator_videoDataReceived_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    user_cpp_DllExport const Calculator_videoDataReceived_Out& result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    user_cpp_DllExport Calculator_videoDataReceived_Out& result();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_videoDataReceived_Result& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    Calculator_videoDataReceived_Out m_result;

};

/*!
 * @brief This class represents the union used in the DDS topic to encapsulate the operations in request samples.
 * @ingroup CALCULATOR
 */
class Calculator_Call
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_Call();
    
    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_Call();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_Call that will be copied.
     */
    user_cpp_DllExport Calculator_Call(const Calculator_Call &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_Call that will be copied.
     */
    user_cpp_DllExport Calculator_Call(Calculator_Call &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_Call that will be copied.
     */
    user_cpp_DllExport Calculator_Call& operator=(const Calculator_Call &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object Calculator_Call that will be copied.
     */
    user_cpp_DllExport Calculator_Call& operator=(Calculator_Call &&x);
    
    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);
    
    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;
    
    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t& _d();

    user_cpp_DllExport void unknownOp(eprosima::rpc::protocol::dds::rpc::UnknownOperation _unknownOp);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownOperation unknownOp() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownOperation& unknownOp();

        /*!
         * @brief This function copies the value in member sendTouchEvent
         * @param _sendTouchEvent New value to be copied in member sendTouchEvent
         */
        user_cpp_DllExport void sendTouchEvent(const Calculator_sendTouchEvent_In &_sendTouchEvent);

        /*!
         * @brief This function moves the value in member sendTouchEvent
         * @param _sendTouchEvent New value to be moved in member sendTouchEvent
         */
        user_cpp_DllExport void sendTouchEvent(Calculator_sendTouchEvent_In &&_sendTouchEvent);

        /*!
         * @brief This function returns a constant reference to member sendTouchEvent
         * @return Constant reference to member sendTouchEvent
         */
        user_cpp_DllExport const Calculator_sendTouchEvent_In& sendTouchEvent() const;

        /*!
         * @brief This function returns a reference to member sendTouchEvent
         * @return Reference to member sendTouchEvent
         */
        user_cpp_DllExport Calculator_sendTouchEvent_In& sendTouchEvent();
        
        /*!
         * @brief This function copies the value in member sendGotoForeground
         * @param _sendGotoForeground New value to be copied in member sendGotoForeground
         */
        user_cpp_DllExport void sendGotoForeground(const Calculator_sendGotoForeground_In &_sendGotoForeground);

        /*!
         * @brief This function moves the value in member sendGotoForeground
         * @param _sendGotoForeground New value to be moved in member sendGotoForeground
         */
        user_cpp_DllExport void sendGotoForeground(Calculator_sendGotoForeground_In &&_sendGotoForeground);

        /*!
         * @brief This function returns a constant reference to member sendGotoForeground
         * @return Constant reference to member sendGotoForeground
         */
        user_cpp_DllExport const Calculator_sendGotoForeground_In& sendGotoForeground() const;

        /*!
         * @brief This function returns a reference to member sendGotoForeground
         * @return Reference to member sendGotoForeground
         */
        user_cpp_DllExport Calculator_sendGotoForeground_In& sendGotoForeground();
        
        
        

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_Call& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);
    
private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownOperation m_unknownOp;
        Calculator_sendTouchEvent_In m_sendTouchEvent;
        
        Calculator_sendGotoForeground_In m_sendGotoForeground;
        
        
        
};

/*!
 * @brief This class represents the structure Calculator_Request that can be used to send/receive requests
 * for the interface Calculator.
 * @ingroup CALCULATOR
 */
class Calculator_Request
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_Request();
    
    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_Request();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_Request that will be copied.
     */
    user_cpp_DllExport Calculator_Request(const Calculator_Request &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_Request that will be copied.
     */
    user_cpp_DllExport Calculator_Request(Calculator_Request &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator that will be copied.
     */
    user_cpp_DllExport Calculator_Request& operator=(const Calculator_Request &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator that will be copied.
     */
    user_cpp_DllExport Calculator_Request& operator=(Calculator_Request &&x);

    /*!
     * @brief This method sets the request header information.
     * @param _header Request header.
     */
    inline user_cpp_DllExport void header(const eprosima::rpc::protocol::dds::rpc::RequestHeader &_header)
    {
        m_header = _header;
    }

    /*!
     * @brief This method sets the request header information.
     * @param _header Request header.
     */
    inline user_cpp_DllExport void header(eprosima::rpc::protocol::dds::rpc::RequestHeader &&_header)
    {
        m_header = std::move(_header);
    }

    /*!
     * @brief This method returns the request header information.
     * @return Request header.
     */
    inline user_cpp_DllExport const eprosima::rpc::protocol::dds::rpc::RequestHeader& header() const
    {
        return m_header;
    }

    /*!
     * @brief This method returns the request header information.
     * @return Request header.
     */
    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::RequestHeader& header()
    {
        return m_header;
    }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _request Union.
     */
    inline user_cpp_DllExport void data(const Calculator_Call &_data)
    {
        m_data = _data;
    }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _request Union.
     */
    inline user_cpp_DllExport void data(Calculator_Call &&_data)
    {
        m_data = std::move(_data);
    }

    /*!
     * @brief This method returns the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport const Calculator_Call& data() const
    {
        return m_data;
    }

    /*!
     * @brief This method returns the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport Calculator_Call& data()
    {
        return m_data;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_Request& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    eprosima::rpc::protocol::dds::rpc::RequestHeader m_header;

    Calculator_Call m_data;
};

/*!
 * @brief This class represents the union used in the DDS topic to encapsulate the operations in reply samples.
 * @ingroup CALCULATOR
 */
class Calculator_Return
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_Return();
    
    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_Return();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_Return that will be copied.
     */
    user_cpp_DllExport Calculator_Return(const Calculator_Return &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_Return that will be copied.
     */
    user_cpp_DllExport Calculator_Return(Calculator_Return &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_Return that will be copied.
     */
    user_cpp_DllExport Calculator_Return& operator=(const Calculator_Return &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object Calculator_Return that will be copied.
     */
    user_cpp_DllExport Calculator_Return& operator=(Calculator_Return &&x);
    
    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);
    
    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;
    
    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t& _d();

    user_cpp_DllExport void unknownOp(eprosima::rpc::protocol::dds::rpc::UnknownOperation _unknownOp);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownOperation unknownOp() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownOperation& unknownOp();

    /*!
     * @brief This function copies the value in member sendTouchEvent
     * @param _sendTouchEvent New value to be copied in member sendTouchEvent
     */
    user_cpp_DllExport void sendTouchEvent(const Calculator_sendTouchEvent_Result &_sendTouchEvent);

    /*!
     * @brief This function moves the value in member sendTouchEvent
     * @param _sendTouchEvent New value to be moved in member sendTouchEvent
     */
    user_cpp_DllExport void sendTouchEvent(Calculator_sendTouchEvent_Result &&_sendTouchEvent);

    /*!
     * @brief This function returns a constant reference to member sendTouchEvent
     * @return Constant reference to member sendTouchEvent
     */
    user_cpp_DllExport const Calculator_sendTouchEvent_Result& sendTouchEvent() const;

    /*!
     * @brief This function returns a reference to member sendTouchEvent
     * @return Reference to member sendTouchEvent
     */
    user_cpp_DllExport Calculator_sendTouchEvent_Result& sendTouchEvent();
    /*!
     * @brief This function copies the value in member sendGotoForeground
     * @param _sendGotoForeground New value to be copied in member sendGotoForeground
     */
    user_cpp_DllExport void sendGotoForeground(const Calculator_sendGotoForeground_Result &_sendGotoForeground);

    /*!
     * @brief This function moves the value in member sendGotoForeground
     * @param _sendGotoForeground New value to be moved in member sendGotoForeground
     */
    user_cpp_DllExport void sendGotoForeground(Calculator_sendGotoForeground_Result &&_sendGotoForeground);

    /*!
     * @brief This function returns a constant reference to member sendGotoForeground
     * @return Constant reference to member sendGotoForeground
     */
    user_cpp_DllExport const Calculator_sendGotoForeground_Result& sendGotoForeground() const;

    /*!
     * @brief This function returns a reference to member sendGotoForeground
     * @return Reference to member sendGotoForeground
     */
    user_cpp_DllExport Calculator_sendGotoForeground_Result& sendGotoForeground();
    /*!
     * @brief This function copies the value in member videoInitialized
     * @param _videoInitialized New value to be copied in member videoInitialized
     */
    user_cpp_DllExport void videoInitialized(const Calculator_videoInitialized_Result &_videoInitialized);

    /*!
     * @brief This function moves the value in member videoInitialized
     * @param _videoInitialized New value to be moved in member videoInitialized
     */
    user_cpp_DllExport void videoInitialized(Calculator_videoInitialized_Result &&_videoInitialized);

    /*!
     * @brief This function returns a constant reference to member videoInitialized
     * @return Constant reference to member videoInitialized
     */
    user_cpp_DllExport const Calculator_videoInitialized_Result& videoInitialized() const;

    /*!
     * @brief This function returns a reference to member videoInitialized
     * @return Reference to member videoInitialized
     */
    user_cpp_DllExport Calculator_videoInitialized_Result& videoInitialized();
    /*!
     * @brief This function copies the value in member videoDataReceived
     * @param _videoDataReceived New value to be copied in member videoDataReceived
     */
    user_cpp_DllExport void videoDataReceived(const Calculator_videoDataReceived_Result &_videoDataReceived);

    /*!
     * @brief This function moves the value in member videoDataReceived
     * @param _videoDataReceived New value to be moved in member videoDataReceived
     */
    user_cpp_DllExport void videoDataReceived(Calculator_videoDataReceived_Result &&_videoDataReceived);

    /*!
     * @brief This function returns a constant reference to member videoDataReceived
     * @return Constant reference to member videoDataReceived
     */
    user_cpp_DllExport const Calculator_videoDataReceived_Result& videoDataReceived() const;

    /*!
     * @brief This function returns a reference to member videoDataReceived
     * @return Reference to member videoDataReceived
     */
    user_cpp_DllExport Calculator_videoDataReceived_Result& videoDataReceived();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_Return& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);
    
private:
    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownOperation m_unknownOp;

    Calculator_sendTouchEvent_Result m_sendTouchEvent;
    Calculator_sendGotoForeground_Result m_sendGotoForeground;
    Calculator_videoInitialized_Result m_videoInitialized;
    Calculator_videoDataReceived_Result m_videoDataReceived;
};

/*!
 * @brief This class represents the structure Calculator_Reply that can be used to send/receive replies
 * for the interface Calculator.
 * @ingroup CALCULATOR
 */
class Calculator_Reply
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_Reply();
    
    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_Reply();
    
    /*
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_Reply that will be copied.
     */
    user_cpp_DllExport Calculator_Reply(const Calculator_Reply &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_Reply that will be copied.
     */
    user_cpp_DllExport Calculator_Reply(Calculator_Reply &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator that will be copied.
     */
    user_cpp_DllExport Calculator_Reply& operator=(const Calculator_Reply &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator that will be copied.
     */
    user_cpp_DllExport Calculator_Reply& operator=(Calculator_Reply &&x);

    /*!
     * @brief This method sets the reply header information.
     * @param _header Reply header.
     */
    inline user_cpp_DllExport void header(const eprosima::rpc::protocol::dds::rpc::ReplyHeader &_header)
    {
        m_header = _header;
    }

    /*!
     * @brief This method sets the reply header information.
     * @param _header Reply header.
     */
    inline user_cpp_DllExport void header(eprosima::rpc::protocol::dds::rpc::ReplyHeader &&_header)
    {
        m_header = std::move(_header);
    }

    /*!
     * @brief This method returns the reply header information.
     * @return Reply header.
     */
    inline user_cpp_DllExport const eprosima::rpc::protocol::dds::rpc::ReplyHeader& header() const
    {
        return m_header;
    }

    /*!
     * @brief This method returns the reply header information.
     * @return Reply header.
     */
    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::ReplyHeader& header()
    {
        return m_header;
    }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _reply Union.
     */
    inline user_cpp_DllExport void data(const Calculator_Return &_data)
    {
        m_data = _data;
    }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @param _reply Union.
     */
    inline user_cpp_DllExport void data(Calculator_Return &&_data)
    {
        m_data = std::move(_data);
    }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport const Calculator_Return& data() const
    {
        return m_data;
    }

    /*!
     * @brief This method sets the union that encapsulates the interface operations.
     * @return Union.
     */
    inline user_cpp_DllExport Calculator_Return& data()
    {
        return m_data;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_Reply& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    eprosima::rpc::protocol::dds::rpc::ReplyHeader m_header;

    Calculator_Return m_data;
};

#endif // _Calculator_TOPICS_H_