/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * _LICENSE file included in this  distribution.
 *
 *************************************************************************
 * 
 * @file Calculator.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "Calculator.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


VideoFormat::VideoFormat()
{
    // m_mimeType com.eprosima.idl.parser.typecode.StringTypeCode@7d0587f1
    m_mimeType ="";
    // m_width com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5d76b067
    m_width = 0;
    // m_height com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2a17b7b6
    m_height = 0;

}

VideoFormat::~VideoFormat()
{



}

VideoFormat::VideoFormat(const VideoFormat &x)
{
    m_mimeType = x.m_mimeType;
    m_width = x.m_width;
    m_height = x.m_height;
}

VideoFormat::VideoFormat(VideoFormat &&x)
{
    m_mimeType = std::move(x.m_mimeType);
    m_width = x.m_width;
    m_height = x.m_height;
}

VideoFormat& VideoFormat::operator=(const VideoFormat &x)
{

    m_mimeType = x.m_mimeType;
    m_width = x.m_width;
    m_height = x.m_height;

    return *this;
}

VideoFormat& VideoFormat::operator=(VideoFormat &&x)
{

    m_mimeType = std::move(x.m_mimeType);
    m_width = x.m_width;
    m_height = x.m_height;

    return *this;
}

size_t VideoFormat::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t VideoFormat::getCdrSerializedSize(const VideoFormat& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.mimeType().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void VideoFormat::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_mimeType;
    scdr << m_width;
    scdr << m_height;
}

void VideoFormat::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_mimeType;
    dcdr >> m_width;
    dcdr >> m_height;
}

/*!
 * @brief This function copies the value in member mimeType
 * @param _mimeType New value to be copied in member mimeType
 */
void VideoFormat::mimeType(const std::string &_mimeType)
{
m_mimeType = _mimeType;
}

/*!
 * @brief This function moves the value in member mimeType
 * @param _mimeType New value to be moved in member mimeType
 */
void VideoFormat::mimeType(std::string &&_mimeType)
{
m_mimeType = std::move(_mimeType);
}

/*!
 * @brief This function returns a constant reference to member mimeType
 * @return Constant reference to member mimeType
 */
const std::string& VideoFormat::mimeType() const
{
    return m_mimeType;
}

/*!
 * @brief This function returns a reference to member mimeType
 * @return Reference to member mimeType
 */
std::string& VideoFormat::mimeType()
{
    return m_mimeType;
}
/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void VideoFormat::width(int32_t _width)
{
m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
int32_t VideoFormat::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
int32_t& VideoFormat::width()
{
    return m_width;
}

/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void VideoFormat::height(int32_t _height)
{
m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
int32_t VideoFormat::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
int32_t& VideoFormat::height()
{
    return m_height;
}









