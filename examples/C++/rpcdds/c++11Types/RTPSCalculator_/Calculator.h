/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * _LICENSE file included in this  distribution.
 *
 *************************************************************************
 * 
 * @file Calculator.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _CALCULATOR_H_
#define _CALCULATOR_H_

// TODO Poner en el contexto.
#include <rpcdds/exceptions/UserException.h>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Calculator_SOURCE)
#define Calculator_DllAPI __declspec( dllexport )
#else
#define Calculator_DllAPI __declspec( dllimport )
#endif // Calculator_SOURCE
#else
#define Calculator_DllAPI
#endif
#else
#define Calculator_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


/*!
 * @brief This class represents the enumeration VideoType defined by the user in the IDL file.
 * @ingroup CALCULATOR
 */
enum VideoType : uint32_t
{
    STREAM_SYSTEM,
    STREAM_COMMUNICATION
};
/*!
 * @brief This class represents the structure VideoFormat defined by the user in the IDL file.
 * @ingroup CALCULATOR
 */
class VideoFormat
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport VideoFormat();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~VideoFormat();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VideoFormat that will be copied.
     */
    eProsima_user_DllExport VideoFormat(const VideoFormat &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VideoFormat that will be copied.
     */
    eProsima_user_DllExport VideoFormat(VideoFormat &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VideoFormat that will be copied.
     */
    eProsima_user_DllExport VideoFormat& operator=(const VideoFormat &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object VideoFormat that will be copied.
     */
    eProsima_user_DllExport VideoFormat& operator=(VideoFormat &&x);

    /*!
     * @brief This function copies the value in member mimeType
     * @param _mimeType New value to be copied in member mimeType
     */
    eProsima_user_DllExport void mimeType(const std::string &_mimeType);

    /*!
     * @brief This function moves the value in member mimeType
     * @param _mimeType New value to be moved in member mimeType
     */
    eProsima_user_DllExport void mimeType(std::string &&_mimeType);

    /*!
     * @brief This function returns a constant reference to member mimeType
     * @return Constant reference to member mimeType
     */
    eProsima_user_DllExport const std::string& mimeType() const;

    /*!
     * @brief This function returns a reference to member mimeType
     * @return Reference to member mimeType
     */
    eProsima_user_DllExport std::string& mimeType();
    /*!
     * @brief This function sets a value in member width
     * @param _width New value for member width
     */
    eProsima_user_DllExport void width(int32_t _width);

    /*!
     * @brief This function returns the value of member width
     * @return Value of member width
     */
    eProsima_user_DllExport int32_t width() const;

    /*!
     * @brief This function returns a reference to member width
     * @return Reference to member width
     */
    eProsima_user_DllExport int32_t& width();

    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    eProsima_user_DllExport void height(int32_t _height);

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    eProsima_user_DllExport int32_t height() const;

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    eProsima_user_DllExport int32_t& height();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const VideoFormat& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);




private:
    std::string m_mimeType;
    int32_t m_width;
    int32_t m_height;
};
typedef std::vector<char> ByteArray;
typedef std::vector<int32_t> LongArray;
/*!
 * @brief This class represents the interface Calculator defined by the user in the IDL file.
 * @ingroup CALCULATOR
 */
class Calculator_DllAPI Calculator 
{
    public:

        virtual bool sendTouchEvent(/*in*/ int32_t action, /*in*/ int32_t width, /*in*/ int32_t height, /*in*/ int32_t count, /*in*/ const LongArray& trackID, /*in*/ const LongArray& x, /*in*/ const LongArray& y) = 0;

        
        virtual bool sendGotoForeground() = 0;

        

        

        
};

class Calculator_DllAPI CalculatorNotify 
{
    public:


        

        
        virtual void videoInitialized(/*in*/ VideoType type, /*in*/ const VideoFormat& videFormat) = 0;

        
        virtual void videoDataReceived(/*in*/ VideoType type, /*in*/ int32_t size, /*in*/ const ByteArray& byte) = 0;

        
};




#endif // _CALCULATOR_H_