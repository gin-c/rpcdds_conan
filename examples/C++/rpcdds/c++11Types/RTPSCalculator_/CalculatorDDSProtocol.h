/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorDDSProtocol.h
 * This header file contains the declaration of the protocol used to create DDS messages.
 *
 * This file was generated by the tool rpcddsgen.
 */

#ifndef _Calculator_DDS_PROTOCOL_H_
#define _Calculator_DDS_PROTOCOL_H_

#include "CalculatorProtocol.h"
#include <rpcdds/utils/Messages.h>

#include "CalculatorTopicsPlugin.h"

namespace eprosima
{
    namespace rpc
    {
        namespace transport
        {
            namespace dds
            {
                class RTPSProxyProcedureEndpoint;
                class RTPSServerProcedureEndpoint;
                class RTPSTransport;
            }
        }
        
        namespace protocol
        {
            namespace dds
            {
                /*!
                 * @brief This class is responsible for serializing and deserializing the requests and responses of this application.
                 * It uses DDS.
		         * @ingroup CALCULATOR
                 */
                class  CalculatorProtocol : public eprosima::rpc::protocol::CalculatorProtocol
                {
                    public:
                    
                       /*!
                        * @brief Default constructor
                        */
                        RPCUSERDllExport CalculatorProtocol();
                        
                       /*!
                        * @brief Destructor
                        */
                        virtual RPCUSERDllExport ~CalculatorProtocol();
                    
                       /*!
                        * @brief This method sets the transport for the communications.
                        * @param transport Transport to use
                        * @return True if the assignment is successful, false otherwise
                        */
                        virtual RPCUSERDllExport bool setTransport(eprosima::rpc::transport::Transport &transport);
                        
                        /*!
                         * @brief This function activates needed DDS entities to use an interface.
                         * @param interfaceName Interface name.
                         * @return Whether the activation works successfully.
                         */
                        RPCUSERDllExport bool activateInterface(const char* interfaceName);
                        




                        /*!
                         * @brief This method implements the server part of the protocol for the interface Calculator.
                         * It is called when a request sample is received.
                         * @param protocol DDS protocol object that is in used.
                         * @param data Pointer to the received request sample. Cannot be NULL.
                         * @param endpoint Pointer to the endpoint that sent the request reply. Cannot be NULL.
                         */
                        RPCUSERDllExport static void Calculator_serve(eprosima::rpc::protocol::Protocol &protocol,
                            void *data , eprosima::rpc::transport::Endpoint *endpoint);
                        /*!
                         * @brief This method implements the server part of the protocol for the interface Calculator.
                         * It is called when a request sample is received.
                         * @param protocol DDS protocol object that is in used.
                         * @param data Pointer to the received request sample. Cannot be NULL.
                         * @param endpoint Pointer to the endpoint that sent the request reply. Cannot be NULL.
                         */
                        static void Calculator_proxy(eprosima::rpc::protocol::Protocol &protocol,
                            void *data , eprosima::rpc::transport::Endpoint *endpoint);

                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation sendTouchEvent.
                         * It is called from the Proxy interface.
                         */

                        RPCUSERDllExport bool Calculator_sendTouchEvent(/*in*/ int32_t action, /*in*/ int32_t width, /*in*/ int32_t height, /*in*/ int32_t count, /*in*/ const LongArray& trackID, /*in*/ const LongArray& x, /*in*/ const LongArray& y);

                        /*!
                         * @brief This asynchronous method implements the proxy part of the protocol for the operation sendTouchEvent.
                         * It is called from the Proxy interface.
                         */
                        RPCUSERDllExport void Calculator_sendTouchEvent_async(Calculator_sendTouchEventCallbackHandler &obj, /*in*/ int32_t action, /*in*/ int32_t width, /*in*/ int32_t height, /*in*/ int32_t count, /*in*/ const LongArray& trackID, /*in*/ const LongArray& x, /*in*/ const LongArray& y);



                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation sendGotoForeground.
                         * It is called from the Proxy interface.
                         */

                        RPCUSERDllExport bool Calculator_sendGotoForeground();

                        /*!
                         * @brief This asynchronous method implements the proxy part of the protocol for the operation sendGotoForeground.
                         * It is called from the Proxy interface.
                         */
                        RPCUSERDllExport void Calculator_sendGotoForeground_async(Calculator_sendGotoForegroundCallbackHandler &obj);



                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation videoInitialized.
                         * It is called from the Proxy interface.
                         */




                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation videoInitialized.
                         * It is called from the Proxy interface.
                         */
                        void Calculator_videoInitialized(/*in*/ VideoType type, /*in*/ const VideoFormat& videFormat);


                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation videoDataReceived.
                         * It is called from the Proxy interface.
                         */




                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation videoDataReceived.
                         * It is called from the Proxy interface.
                         */
                        void Calculator_videoDataReceived(/*in*/ VideoType type, /*in*/ int32_t size, /*in*/ const ByteArray& byte);








                        
                    private:
                    
                        eprosima::rpc::transport::dds::RTPSTransport *m_ddsTransport;
                    
                                                const char* const Calculator_str;
                                                
                                                eprosima::rpc::transport::dds::RTPSProxyProcedureEndpoint *Calculator_pe;
                                                
                                                eprosima::rpc::transport::dds::RTPSServerProcedureEndpoint *Calculator_se;

                                                Calculator_RequestPlugin Calculator_requestPlugin;
                                                Calculator_ReplyPlugin Calculator_replyPlugin;
                                                
                                                
                };
            } // namespace dds
        } // namespace protocol
    } // namespace rpc
} // namespace eprosima

#endif // _Calculator_DDS_PROTOCOL_H_