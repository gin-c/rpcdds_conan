/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorAsyncSupport.cxx
 * This source file contains functionality to use asynchronous calls for all interfaces.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "CalculatorDDSAsyncSupport.h"
#include <rpcdds/exceptions/ServerInternalException.h>
#include <rpcdds/exceptions/ClientInternalException.h>
#include <rpcdds/utils/Messages.h>

using namespace eprosima::rpc;
using namespace ::exception;





Calculator_sendTouchEventTask::Calculator_sendTouchEventTask(Calculator_sendTouchEventCallbackHandler &obj) :
    RTPSAsyncTask(), m_obj(obj)
{
}

Calculator_sendTouchEventTask::~Calculator_sendTouchEventTask()
{
}

Calculator_sendTouchEventCallbackHandler& Calculator_sendTouchEventTask::getObject()
{
    return m_obj;
}

void* Calculator_sendTouchEventTask::getReplyInstance()
{
    return &m_reply;
}

void Calculator_sendTouchEventTask::execute()
{  
    bool  return_ = false;
    
    if(m_reply.header().remoteEx() == eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK)
    {
        switch (m_reply.data().sendTouchEvent()._d())
        {
            case 0:
                return_ = m_reply.data().sendTouchEvent().result().return_();
	    	    getObject().sendTouchEvent(return_);
                break;
            default:
                getObject().on_exception(ClientInternalException("Error extracting information from server"));
        }
    }
    else
        getObject().on_exception(ServerInternalException(""));
}

void Calculator_sendTouchEventTask::on_exception(const SystemException &ex)
{
    getObject().on_exception(ex);
}


Calculator_sendGotoForegroundTask::Calculator_sendGotoForegroundTask(Calculator_sendGotoForegroundCallbackHandler &obj) :
    RTPSAsyncTask(), m_obj(obj)
{
}

Calculator_sendGotoForegroundTask::~Calculator_sendGotoForegroundTask()
{
}

Calculator_sendGotoForegroundCallbackHandler& Calculator_sendGotoForegroundTask::getObject()
{
    return m_obj;
}

void* Calculator_sendGotoForegroundTask::getReplyInstance()
{
    return &m_reply;
}

void Calculator_sendGotoForegroundTask::execute()
{  
    bool  return_ = false;
    
    if(m_reply.header().remoteEx() == eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK)
    {
        switch (m_reply.data().sendGotoForeground()._d())
        {
            case 0:
                return_ = m_reply.data().sendGotoForeground().result().return_();
	    	    getObject().sendGotoForeground(return_);
                break;
            default:
                getObject().on_exception(ClientInternalException("Error extracting information from server"));
        }
    }
    else
        getObject().on_exception(ServerInternalException(""));
}

void Calculator_sendGotoForegroundTask::on_exception(const SystemException &ex)
{
    getObject().on_exception(ex);
}








