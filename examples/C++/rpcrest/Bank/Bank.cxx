/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * _LICENSE file included in this  distribution.
 *
 *************************************************************************
 * 
 * @file Bank.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#include "Bank.h"

#include "rpcrest/exceptions/BadParamException.h"
using namespace eprosima::rpc::exception;

#include <utility>

Bank::account_accountNumberResource::account_accountNumber::account_accountNumber()
{
    m_accountNumber_ = 0;
}

Bank::account_accountNumberResource::account_accountNumber::~account_accountNumber()
{
}

Bank::account_accountNumberResource::account_accountNumber::account_accountNumber(const account_accountNumber &x)
{
    m_accountNumber_ = x.m_accountNumber_;
}

Bank::account_accountNumberResource::account_accountNumber::account_accountNumber(account_accountNumber &&x)
{
    m_accountNumber_ = x.m_accountNumber_;
}

Bank::account_accountNumberResource::account_accountNumber& Bank::account_accountNumberResource::account_accountNumber::operator=(const account_accountNumber &x)
{
    m_accountNumber_ = x.m_accountNumber_;
    
    return *this;
}

Bank::account_accountNumberResource::account_accountNumber& Bank::account_accountNumberResource::account_accountNumber::operator=(account_accountNumber &&x)
{
    m_accountNumber_ = x.m_accountNumber_;
    
    return *this;
}


Bank::account_accountNumberResource::EmptyGetAccountDetailsResponse::EmptyGetAccountDetailsResponse()
{
    m_status = 0;
}

Bank::account_accountNumberResource::EmptyGetAccountDetailsResponse::~EmptyGetAccountDetailsResponse()
{
}

Bank::account_accountNumberResource::EmptyGetAccountDetailsResponse::EmptyGetAccountDetailsResponse(const EmptyGetAccountDetailsResponse &x)
{
    m_status = x.m_status;
}

Bank::account_accountNumberResource::EmptyGetAccountDetailsResponse::EmptyGetAccountDetailsResponse(EmptyGetAccountDetailsResponse &&x)
{
    m_status = x.m_status;
}

Bank::account_accountNumberResource::EmptyGetAccountDetailsResponse& Bank::account_accountNumberResource::EmptyGetAccountDetailsResponse::operator=(const EmptyGetAccountDetailsResponse &x)
{
    m_status = x.m_status;
    
    return *this;
}

Bank::account_accountNumberResource::EmptyGetAccountDetailsResponse& Bank::account_accountNumberResource::EmptyGetAccountDetailsResponse::operator=(EmptyGetAccountDetailsResponse &&x)
{
    m_status = x.m_status;
    
    return *this;
}


Bank::account_accountNumberResource::XMLGetAccountDetailsResponse::XMLGetAccountDetailsResponse()
{
    m_status = 0;
    m_xmlRepresentation = "";
}

Bank::account_accountNumberResource::XMLGetAccountDetailsResponse::~XMLGetAccountDetailsResponse()
{
}

Bank::account_accountNumberResource::XMLGetAccountDetailsResponse::XMLGetAccountDetailsResponse(const XMLGetAccountDetailsResponse &x)
{
    m_status = x.m_status;
    m_xmlRepresentation = x.m_xmlRepresentation;
}

Bank::account_accountNumberResource::XMLGetAccountDetailsResponse::XMLGetAccountDetailsResponse(XMLGetAccountDetailsResponse &&x)
{
    m_status = x.m_status;
    m_xmlRepresentation = x.m_xmlRepresentation;
}

Bank::account_accountNumberResource::XMLGetAccountDetailsResponse& Bank::account_accountNumberResource::XMLGetAccountDetailsResponse::operator=(const XMLGetAccountDetailsResponse &x)
{
    m_status = x.m_status;
    m_xmlRepresentation = x.m_xmlRepresentation;
    
    return *this;
}

Bank::account_accountNumberResource::XMLGetAccountDetailsResponse& Bank::account_accountNumberResource::XMLGetAccountDetailsResponse::operator=(XMLGetAccountDetailsResponse &&x)
{
    m_status = x.m_status;
    m_xmlRepresentation = x.m_xmlRepresentation;
    
    return *this;
}


Bank::account_accountNumberResource::GetAccountDetailsResponse::GetAccountDetailsResponse()
{
    m__d = -1000;

}

Bank::account_accountNumberResource::GetAccountDetailsResponse::~GetAccountDetailsResponse()
{
}

Bank::account_accountNumberResource::GetAccountDetailsResponse::GetAccountDetailsResponse(const GetAccountDetailsResponse &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 0:
        m_emptyGetAccountDetailsResponse = x.m_emptyGetAccountDetailsResponse;
        break;
        case 1:
        m_xmlGetAccountDetailsResponse = x.m_xmlGetAccountDetailsResponse;
        break;
    }
}

Bank::account_accountNumberResource::GetAccountDetailsResponse::GetAccountDetailsResponse(GetAccountDetailsResponse &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 0:
        m_emptyGetAccountDetailsResponse = std::move(x.m_emptyGetAccountDetailsResponse);break;
        case 1:
        m_xmlGetAccountDetailsResponse = std::move(x.m_xmlGetAccountDetailsResponse);break;
    }
}

Bank::account_accountNumberResource::GetAccountDetailsResponse& Bank::account_accountNumberResource::GetAccountDetailsResponse::operator=(const GetAccountDetailsResponse &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 0:
        m_emptyGetAccountDetailsResponse = x.m_emptyGetAccountDetailsResponse;
        break;
        case 1:
        m_xmlGetAccountDetailsResponse = x.m_xmlGetAccountDetailsResponse;
        break;
    }
    
    return *this;
}

Bank::account_accountNumberResource::GetAccountDetailsResponse& Bank::account_accountNumberResource::GetAccountDetailsResponse::operator=(GetAccountDetailsResponse &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 0:
        m_emptyGetAccountDetailsResponse = std::move(x.m_emptyGetAccountDetailsResponse);break;
        case 1:
        m_xmlGetAccountDetailsResponse = std::move(x.m_xmlGetAccountDetailsResponse);break;
    }
    
    return *this;
}

void Bank::account_accountNumberResource::GetAccountDetailsResponse::_d(int32_t __d)
{
    bool b = false;
    
    switch(m__d)
    {
        case 0:
        switch(__d)
        {
            case 0:
            b = true;
            break;
            default:
            break;
        }
        break;
        case 1:
        switch(__d)
        {
            case 1:
            b = true;
            break;
            default:
            break;
        }
        break;
    }
    
    if(!b) throw BadParamException("Discriminator doesn't correspond with the selected union member");
    
    m__d = __d;
}

int32_t Bank::account_accountNumberResource::GetAccountDetailsResponse::_d() const
{
    return m__d;
}

int32_t& Bank::account_accountNumberResource::GetAccountDetailsResponse::_d()
{
    return m__d;
}

void Bank::account_accountNumberResource::GetAccountDetailsResponse::emptyGetAccountDetailsResponse(const Bank::account_accountNumberResource::EmptyGetAccountDetailsResponse &_emptyGetAccountDetailsResponse)
{
    m_emptyGetAccountDetailsResponse = _emptyGetAccountDetailsResponse;
    m__d = 0;
}

void Bank::account_accountNumberResource::GetAccountDetailsResponse::emptyGetAccountDetailsResponse(Bank::account_accountNumberResource::EmptyGetAccountDetailsResponse &&_emptyGetAccountDetailsResponse)
{
    m_emptyGetAccountDetailsResponse = std::move(_emptyGetAccountDetailsResponse);
    m__d = 0;
}

const Bank::account_accountNumberResource::EmptyGetAccountDetailsResponse& Bank::account_accountNumberResource::GetAccountDetailsResponse::emptyGetAccountDetailsResponse() const
{
    bool b = false;
        
    switch(m__d)
    {
        case 0:
        b = true;
        break;
        default:
        break;
    }    
    if(!b) throw BadParamException("This member is not been selected");
    
    return m_emptyGetAccountDetailsResponse;
}

Bank::account_accountNumberResource::EmptyGetAccountDetailsResponse& Bank::account_accountNumberResource::GetAccountDetailsResponse::emptyGetAccountDetailsResponse()
{
    bool b = false;
        
    switch(m__d)
    {
        case 0:
        b = true;
        break;
        default:
        break;
    }    
    if(!b) throw BadParamException("This member is not been selected");
    
    return m_emptyGetAccountDetailsResponse;
}
void Bank::account_accountNumberResource::GetAccountDetailsResponse::xmlGetAccountDetailsResponse(const Bank::account_accountNumberResource::XMLGetAccountDetailsResponse &_xmlGetAccountDetailsResponse)
{
    m_xmlGetAccountDetailsResponse = _xmlGetAccountDetailsResponse;
    m__d = 1;
}

void Bank::account_accountNumberResource::GetAccountDetailsResponse::xmlGetAccountDetailsResponse(Bank::account_accountNumberResource::XMLGetAccountDetailsResponse &&_xmlGetAccountDetailsResponse)
{
    m_xmlGetAccountDetailsResponse = std::move(_xmlGetAccountDetailsResponse);
    m__d = 1;
}

const Bank::account_accountNumberResource::XMLGetAccountDetailsResponse& Bank::account_accountNumberResource::GetAccountDetailsResponse::xmlGetAccountDetailsResponse() const
{
    bool b = false;
        
    switch(m__d)
    {
        case 1:
        b = true;
        break;
        default:
        break;
    }    
    if(!b) throw BadParamException("This member is not been selected");
    
    return m_xmlGetAccountDetailsResponse;
}

Bank::account_accountNumberResource::XMLGetAccountDetailsResponse& Bank::account_accountNumberResource::GetAccountDetailsResponse::xmlGetAccountDetailsResponse()
{
    bool b = false;
        
    switch(m__d)
    {
        case 1:
        b = true;
        break;
        default:
        break;
    }    
    if(!b) throw BadParamException("This member is not been selected");
    
    return m_xmlGetAccountDetailsResponse;
}


Bank::account_accountNumberResource::GetAccountDetailsRequest::GetAccountDetailsRequest()
{
    m__d = -1000;
    m_xmlRepresentation = "";
}

Bank::account_accountNumberResource::GetAccountDetailsRequest::~GetAccountDetailsRequest()
{
}

Bank::account_accountNumberResource::GetAccountDetailsRequest::GetAccountDetailsRequest(const GetAccountDetailsRequest &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 1:
        m_xmlRepresentation = x.m_xmlRepresentation;
        break;
    }
}

Bank::account_accountNumberResource::GetAccountDetailsRequest::GetAccountDetailsRequest(GetAccountDetailsRequest &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 1:
        m_xmlRepresentation = x.m_xmlRepresentation;break;
    }
}

Bank::account_accountNumberResource::GetAccountDetailsRequest& Bank::account_accountNumberResource::GetAccountDetailsRequest::operator=(const GetAccountDetailsRequest &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 1:
        m_xmlRepresentation = x.m_xmlRepresentation;
        break;
    }
    
    return *this;
}

Bank::account_accountNumberResource::GetAccountDetailsRequest& Bank::account_accountNumberResource::GetAccountDetailsRequest::operator=(GetAccountDetailsRequest &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        case 1:
        m_xmlRepresentation = x.m_xmlRepresentation;break;
    }
    
    return *this;
}

void Bank::account_accountNumberResource::GetAccountDetailsRequest::_d(int32_t __d)
{
    bool b = false;
    
    switch(m__d)
    {
        case 1:
        switch(__d)
        {
            case 1:
            b = true;
            break;
            default:
            break;
        }
        break;
    }
    
    if(!b) throw BadParamException("Discriminator doesn't correspond with the selected union member");
    
    m__d = __d;
}

int32_t Bank::account_accountNumberResource::GetAccountDetailsRequest::_d() const
{
    return m__d;
}

int32_t& Bank::account_accountNumberResource::GetAccountDetailsRequest::_d()
{
    return m__d;
}

void Bank::account_accountNumberResource::GetAccountDetailsRequest::xmlRepresentation(std::string _xmlRepresentation)
{
    m_xmlRepresentation = _xmlRepresentation;
    m__d = 1;
}

std::string Bank::account_accountNumberResource::GetAccountDetailsRequest::xmlRepresentation() const
{
    bool b = false;
        
    switch(m__d)
    {
        case 1:
        b = true;
        break;
        default:
        break;
    }    
    if(!b) throw BadParamException("This member is not been selected");
    
    return m_xmlRepresentation;
}

std::string& Bank::account_accountNumberResource::GetAccountDetailsRequest::xmlRepresentation()
{
    bool b = false;
        
    switch(m__d)
    {
        case 1:
        b = true;
        break;
        default:
        break;
    }    
    if(!b) throw BadParamException("This member is not been selected");
    
    return m_xmlRepresentation;
}




