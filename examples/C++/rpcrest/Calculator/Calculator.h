/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * _LICENSE file included in this  distribution.
 *
 *************************************************************************
 * 
 * @file Calculator.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _Calculator_H_
#define _Calculator_H_

// TODO Poner en el contexto.
#include "rpcrest/exceptions/UserException.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

namespace Calculator
{
    /*!
     * @brief This class represents the interface addResource defined by the user in the IDL file.
     * @ingroup CALCULATOR
     */
    namespace addResource
    {
        /*!
         * @brief This class represents the structure EmptyAddResponse defined by the user in the IDL file.
         * @ingroup CALCULATOR
         */
        class eProsima_user_DllExport EmptyAddResponse
        {
        public:

            /*!
             * @brief Default constructor.
             */
            EmptyAddResponse();
            
            /*!
             * @brief Default destructor.
             */
            ~EmptyAddResponse();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object Calculator::addResource::EmptyAddResponse that will be copied.
             */
            EmptyAddResponse(const EmptyAddResponse &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object Calculator::addResource::EmptyAddResponse that will be copied.
             */
            EmptyAddResponse(EmptyAddResponse &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object Calculator::addResource::EmptyAddResponse that will be copied.
             */
            EmptyAddResponse& operator=(const EmptyAddResponse &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object Calculator::addResource::EmptyAddResponse that will be copied.
             */
            EmptyAddResponse& operator=(EmptyAddResponse &&x);
            
            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            inline void status(int32_t _status)
            {
                m_status = _status;
            }

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            inline int32_t status() const
            {
                return m_status;
            }

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            inline int32_t& status()
            {
                return m_status;
            }
            

            
        private:
            int32_t m_status;
        };
        /*!
         * @brief This class represents the structure XMLAddResponse defined by the user in the IDL file.
         * @ingroup CALCULATOR
         */
        class eProsima_user_DllExport XMLAddResponse
        {
        public:

            /*!
             * @brief Default constructor.
             */
            XMLAddResponse();
            
            /*!
             * @brief Default destructor.
             */
            ~XMLAddResponse();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object Calculator::addResource::XMLAddResponse that will be copied.
             */
            XMLAddResponse(const XMLAddResponse &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object Calculator::addResource::XMLAddResponse that will be copied.
             */
            XMLAddResponse(XMLAddResponse &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object Calculator::addResource::XMLAddResponse that will be copied.
             */
            XMLAddResponse& operator=(const XMLAddResponse &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object Calculator::addResource::XMLAddResponse that will be copied.
             */
            XMLAddResponse& operator=(XMLAddResponse &&x);
            
            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            inline void status(int32_t _status)
            {
                m_status = _status;
            }

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            inline int32_t status() const
            {
                return m_status;
            }

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            inline int32_t& status()
            {
                return m_status;
            }
            /*!
             * @brief This function sets a value in member xmlRepresentation
             * @param _xmlRepresentation New value for member xmlRepresentation
             */
            inline void xmlRepresentation(std::string _xmlRepresentation)
            {
                m_xmlRepresentation = _xmlRepresentation;
            }

            /*!
             * @brief This function returns the value of member xmlRepresentation
             * @return Value of member xmlRepresentation
             */
            inline std::string xmlRepresentation() const
            {
                return m_xmlRepresentation;
            }

            /*!
             * @brief This function returns a reference to member xmlRepresentation
             * @return Reference to member xmlRepresentation
             */
            inline std::string& xmlRepresentation()
            {
                return m_xmlRepresentation;
            }
            

            
        private:
            int32_t m_status;
            std::string m_xmlRepresentation;
        };
        /*!
         * @brief This class represents the union AddResponse defined by the user in the IDL file.
         * @ingroup CALCULATOR
         */
        class eProsima_user_DllExport AddResponse
        {
        public:

            /*!
             * @brief Default constructor.
             */
            AddResponse();
            
            /*!
             * @brief Default destructor.
             */
            ~AddResponse();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object Calculator::addResource::AddResponse that will be copied.
             */
            AddResponse(const AddResponse &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object Calculator::addResource::AddResponse that will be copied.
             */
            AddResponse(AddResponse &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object Calculator::addResource::AddResponse that will be copied.
             */
            AddResponse& operator=(const AddResponse &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object Calculator::addResource::AddResponse that will be copied.
             */
            AddResponse& operator=(AddResponse &&x);
            
            /*!
             * @brief This function sets the discriminator value.
             * @param __d New value for the discriminator.
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
             */
            void _d(int32_t __d);
            
            /*!
             * @brief This function returns the value of the discriminator.
             * @return Value of the discriminator
             */
            int32_t _d() const;
            
            /*!
             * @brief This function returns a reference to the discriminator.
             * @return Reference to the discriminator.
             */
            int32_t& _d();
            
            /*!
             * @brief This function copies the value in member emptyAddResponse
             * @param _emptyAddResponse New value to be copied in member emptyAddResponse
             */
            void emptyAddResponse(const Calculator::addResource::EmptyAddResponse &_emptyAddResponse);

            /*!
             * @brief This function moves the value in member emptyAddResponse
             * @param _emptyAddResponse New value to be moved in member emptyAddResponse
             */
            void emptyAddResponse(Calculator::addResource::EmptyAddResponse &&_emptyAddResponse);

            /*!
             * @brief This function returns a constant reference to member emptyAddResponse
             * @return Constant reference to member emptyAddResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            const Calculator::addResource::EmptyAddResponse& emptyAddResponse() const;

            /*!
             * @brief This function returns a reference to member emptyAddResponse
             * @return Reference to member emptyAddResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            Calculator::addResource::EmptyAddResponse& emptyAddResponse();
            /*!
             * @brief This function copies the value in member xmlAddResponse
             * @param _xmlAddResponse New value to be copied in member xmlAddResponse
             */
            void xmlAddResponse(const Calculator::addResource::XMLAddResponse &_xmlAddResponse);

            /*!
             * @brief This function moves the value in member xmlAddResponse
             * @param _xmlAddResponse New value to be moved in member xmlAddResponse
             */
            void xmlAddResponse(Calculator::addResource::XMLAddResponse &&_xmlAddResponse);

            /*!
             * @brief This function returns a constant reference to member xmlAddResponse
             * @return Constant reference to member xmlAddResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            const Calculator::addResource::XMLAddResponse& xmlAddResponse() const;

            /*!
             * @brief This function returns a reference to member xmlAddResponse
             * @return Reference to member xmlAddResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            Calculator::addResource::XMLAddResponse& xmlAddResponse();
            

            
        private:
            int32_t m__d;
            
            Calculator::addResource::EmptyAddResponse m_emptyAddResponse;
            Calculator::addResource::XMLAddResponse m_xmlAddResponse;
        };

    }
    /*!
     * @brief This class represents the interface substractResource defined by the user in the IDL file.
     * @ingroup CALCULATOR
     */
    namespace substractResource
    {
        /*!
         * @brief This class represents the structure EmptySubstractResponse defined by the user in the IDL file.
         * @ingroup CALCULATOR
         */
        class eProsima_user_DllExport EmptySubstractResponse
        {
        public:

            /*!
             * @brief Default constructor.
             */
            EmptySubstractResponse();
            
            /*!
             * @brief Default destructor.
             */
            ~EmptySubstractResponse();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object Calculator::substractResource::EmptySubstractResponse that will be copied.
             */
            EmptySubstractResponse(const EmptySubstractResponse &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object Calculator::substractResource::EmptySubstractResponse that will be copied.
             */
            EmptySubstractResponse(EmptySubstractResponse &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object Calculator::substractResource::EmptySubstractResponse that will be copied.
             */
            EmptySubstractResponse& operator=(const EmptySubstractResponse &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object Calculator::substractResource::EmptySubstractResponse that will be copied.
             */
            EmptySubstractResponse& operator=(EmptySubstractResponse &&x);
            
            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            inline void status(int32_t _status)
            {
                m_status = _status;
            }

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            inline int32_t status() const
            {
                return m_status;
            }

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            inline int32_t& status()
            {
                return m_status;
            }
            

            
        private:
            int32_t m_status;
        };
        /*!
         * @brief This class represents the structure XMLSubstractResponse defined by the user in the IDL file.
         * @ingroup CALCULATOR
         */
        class eProsima_user_DllExport XMLSubstractResponse
        {
        public:

            /*!
             * @brief Default constructor.
             */
            XMLSubstractResponse();
            
            /*!
             * @brief Default destructor.
             */
            ~XMLSubstractResponse();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object Calculator::substractResource::XMLSubstractResponse that will be copied.
             */
            XMLSubstractResponse(const XMLSubstractResponse &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object Calculator::substractResource::XMLSubstractResponse that will be copied.
             */
            XMLSubstractResponse(XMLSubstractResponse &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object Calculator::substractResource::XMLSubstractResponse that will be copied.
             */
            XMLSubstractResponse& operator=(const XMLSubstractResponse &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object Calculator::substractResource::XMLSubstractResponse that will be copied.
             */
            XMLSubstractResponse& operator=(XMLSubstractResponse &&x);
            
            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            inline void status(int32_t _status)
            {
                m_status = _status;
            }

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            inline int32_t status() const
            {
                return m_status;
            }

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            inline int32_t& status()
            {
                return m_status;
            }
            /*!
             * @brief This function sets a value in member xmlRepresentation
             * @param _xmlRepresentation New value for member xmlRepresentation
             */
            inline void xmlRepresentation(std::string _xmlRepresentation)
            {
                m_xmlRepresentation = _xmlRepresentation;
            }

            /*!
             * @brief This function returns the value of member xmlRepresentation
             * @return Value of member xmlRepresentation
             */
            inline std::string xmlRepresentation() const
            {
                return m_xmlRepresentation;
            }

            /*!
             * @brief This function returns a reference to member xmlRepresentation
             * @return Reference to member xmlRepresentation
             */
            inline std::string& xmlRepresentation()
            {
                return m_xmlRepresentation;
            }
            

            
        private:
            int32_t m_status;
            std::string m_xmlRepresentation;
        };
        /*!
         * @brief This class represents the union SubstractResponse defined by the user in the IDL file.
         * @ingroup CALCULATOR
         */
        class eProsima_user_DllExport SubstractResponse
        {
        public:

            /*!
             * @brief Default constructor.
             */
            SubstractResponse();
            
            /*!
             * @brief Default destructor.
             */
            ~SubstractResponse();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object Calculator::substractResource::SubstractResponse that will be copied.
             */
            SubstractResponse(const SubstractResponse &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object Calculator::substractResource::SubstractResponse that will be copied.
             */
            SubstractResponse(SubstractResponse &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object Calculator::substractResource::SubstractResponse that will be copied.
             */
            SubstractResponse& operator=(const SubstractResponse &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object Calculator::substractResource::SubstractResponse that will be copied.
             */
            SubstractResponse& operator=(SubstractResponse &&x);
            
            /*!
             * @brief This function sets the discriminator value.
             * @param __d New value for the discriminator.
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
             */
            void _d(int32_t __d);
            
            /*!
             * @brief This function returns the value of the discriminator.
             * @return Value of the discriminator
             */
            int32_t _d() const;
            
            /*!
             * @brief This function returns a reference to the discriminator.
             * @return Reference to the discriminator.
             */
            int32_t& _d();
            
            /*!
             * @brief This function copies the value in member emptySubstractResponse
             * @param _emptySubstractResponse New value to be copied in member emptySubstractResponse
             */
            void emptySubstractResponse(const Calculator::substractResource::EmptySubstractResponse &_emptySubstractResponse);

            /*!
             * @brief This function moves the value in member emptySubstractResponse
             * @param _emptySubstractResponse New value to be moved in member emptySubstractResponse
             */
            void emptySubstractResponse(Calculator::substractResource::EmptySubstractResponse &&_emptySubstractResponse);

            /*!
             * @brief This function returns a constant reference to member emptySubstractResponse
             * @return Constant reference to member emptySubstractResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            const Calculator::substractResource::EmptySubstractResponse& emptySubstractResponse() const;

            /*!
             * @brief This function returns a reference to member emptySubstractResponse
             * @return Reference to member emptySubstractResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            Calculator::substractResource::EmptySubstractResponse& emptySubstractResponse();
            /*!
             * @brief This function copies the value in member xmlSubstractResponse
             * @param _xmlSubstractResponse New value to be copied in member xmlSubstractResponse
             */
            void xmlSubstractResponse(const Calculator::substractResource::XMLSubstractResponse &_xmlSubstractResponse);

            /*!
             * @brief This function moves the value in member xmlSubstractResponse
             * @param _xmlSubstractResponse New value to be moved in member xmlSubstractResponse
             */
            void xmlSubstractResponse(Calculator::substractResource::XMLSubstractResponse &&_xmlSubstractResponse);

            /*!
             * @brief This function returns a constant reference to member xmlSubstractResponse
             * @return Constant reference to member xmlSubstractResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            const Calculator::substractResource::XMLSubstractResponse& xmlSubstractResponse() const;

            /*!
             * @brief This function returns a reference to member xmlSubstractResponse
             * @return Reference to member xmlSubstractResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            Calculator::substractResource::XMLSubstractResponse& xmlSubstractResponse();
            

            
        private:
            int32_t m__d;
            
            Calculator::substractResource::EmptySubstractResponse m_emptySubstractResponse;
            Calculator::substractResource::XMLSubstractResponse m_xmlSubstractResponse;
        };

    }
    /*!
     * @brief This class represents the interface multiplyResource defined by the user in the IDL file.
     * @ingroup CALCULATOR
     */
    namespace multiplyResource
    {
        /*!
         * @brief This class represents the structure EmptyMultiplyResponse defined by the user in the IDL file.
         * @ingroup CALCULATOR
         */
        class eProsima_user_DllExport EmptyMultiplyResponse
        {
        public:

            /*!
             * @brief Default constructor.
             */
            EmptyMultiplyResponse();
            
            /*!
             * @brief Default destructor.
             */
            ~EmptyMultiplyResponse();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object Calculator::multiplyResource::EmptyMultiplyResponse that will be copied.
             */
            EmptyMultiplyResponse(const EmptyMultiplyResponse &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object Calculator::multiplyResource::EmptyMultiplyResponse that will be copied.
             */
            EmptyMultiplyResponse(EmptyMultiplyResponse &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object Calculator::multiplyResource::EmptyMultiplyResponse that will be copied.
             */
            EmptyMultiplyResponse& operator=(const EmptyMultiplyResponse &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object Calculator::multiplyResource::EmptyMultiplyResponse that will be copied.
             */
            EmptyMultiplyResponse& operator=(EmptyMultiplyResponse &&x);
            
            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            inline void status(int32_t _status)
            {
                m_status = _status;
            }

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            inline int32_t status() const
            {
                return m_status;
            }

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            inline int32_t& status()
            {
                return m_status;
            }
            

            
        private:
            int32_t m_status;
        };
        /*!
         * @brief This class represents the structure XMLMultiplyResponse defined by the user in the IDL file.
         * @ingroup CALCULATOR
         */
        class eProsima_user_DllExport XMLMultiplyResponse
        {
        public:

            /*!
             * @brief Default constructor.
             */
            XMLMultiplyResponse();
            
            /*!
             * @brief Default destructor.
             */
            ~XMLMultiplyResponse();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object Calculator::multiplyResource::XMLMultiplyResponse that will be copied.
             */
            XMLMultiplyResponse(const XMLMultiplyResponse &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object Calculator::multiplyResource::XMLMultiplyResponse that will be copied.
             */
            XMLMultiplyResponse(XMLMultiplyResponse &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object Calculator::multiplyResource::XMLMultiplyResponse that will be copied.
             */
            XMLMultiplyResponse& operator=(const XMLMultiplyResponse &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object Calculator::multiplyResource::XMLMultiplyResponse that will be copied.
             */
            XMLMultiplyResponse& operator=(XMLMultiplyResponse &&x);
            
            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            inline void status(int32_t _status)
            {
                m_status = _status;
            }

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            inline int32_t status() const
            {
                return m_status;
            }

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            inline int32_t& status()
            {
                return m_status;
            }
            /*!
             * @brief This function sets a value in member xmlRepresentation
             * @param _xmlRepresentation New value for member xmlRepresentation
             */
            inline void xmlRepresentation(std::string _xmlRepresentation)
            {
                m_xmlRepresentation = _xmlRepresentation;
            }

            /*!
             * @brief This function returns the value of member xmlRepresentation
             * @return Value of member xmlRepresentation
             */
            inline std::string xmlRepresentation() const
            {
                return m_xmlRepresentation;
            }

            /*!
             * @brief This function returns a reference to member xmlRepresentation
             * @return Reference to member xmlRepresentation
             */
            inline std::string& xmlRepresentation()
            {
                return m_xmlRepresentation;
            }
            

            
        private:
            int32_t m_status;
            std::string m_xmlRepresentation;
        };
        /*!
         * @brief This class represents the union MultiplyResponse defined by the user in the IDL file.
         * @ingroup CALCULATOR
         */
        class eProsima_user_DllExport MultiplyResponse
        {
        public:

            /*!
             * @brief Default constructor.
             */
            MultiplyResponse();
            
            /*!
             * @brief Default destructor.
             */
            ~MultiplyResponse();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object Calculator::multiplyResource::MultiplyResponse that will be copied.
             */
            MultiplyResponse(const MultiplyResponse &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object Calculator::multiplyResource::MultiplyResponse that will be copied.
             */
            MultiplyResponse(MultiplyResponse &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object Calculator::multiplyResource::MultiplyResponse that will be copied.
             */
            MultiplyResponse& operator=(const MultiplyResponse &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object Calculator::multiplyResource::MultiplyResponse that will be copied.
             */
            MultiplyResponse& operator=(MultiplyResponse &&x);
            
            /*!
             * @brief This function sets the discriminator value.
             * @param __d New value for the discriminator.
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
             */
            void _d(int32_t __d);
            
            /*!
             * @brief This function returns the value of the discriminator.
             * @return Value of the discriminator
             */
            int32_t _d() const;
            
            /*!
             * @brief This function returns a reference to the discriminator.
             * @return Reference to the discriminator.
             */
            int32_t& _d();
            
            /*!
             * @brief This function copies the value in member emptyMultiplyResponse
             * @param _emptyMultiplyResponse New value to be copied in member emptyMultiplyResponse
             */
            void emptyMultiplyResponse(const Calculator::multiplyResource::EmptyMultiplyResponse &_emptyMultiplyResponse);

            /*!
             * @brief This function moves the value in member emptyMultiplyResponse
             * @param _emptyMultiplyResponse New value to be moved in member emptyMultiplyResponse
             */
            void emptyMultiplyResponse(Calculator::multiplyResource::EmptyMultiplyResponse &&_emptyMultiplyResponse);

            /*!
             * @brief This function returns a constant reference to member emptyMultiplyResponse
             * @return Constant reference to member emptyMultiplyResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            const Calculator::multiplyResource::EmptyMultiplyResponse& emptyMultiplyResponse() const;

            /*!
             * @brief This function returns a reference to member emptyMultiplyResponse
             * @return Reference to member emptyMultiplyResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            Calculator::multiplyResource::EmptyMultiplyResponse& emptyMultiplyResponse();
            /*!
             * @brief This function copies the value in member xmlMultiplyResponse
             * @param _xmlMultiplyResponse New value to be copied in member xmlMultiplyResponse
             */
            void xmlMultiplyResponse(const Calculator::multiplyResource::XMLMultiplyResponse &_xmlMultiplyResponse);

            /*!
             * @brief This function moves the value in member xmlMultiplyResponse
             * @param _xmlMultiplyResponse New value to be moved in member xmlMultiplyResponse
             */
            void xmlMultiplyResponse(Calculator::multiplyResource::XMLMultiplyResponse &&_xmlMultiplyResponse);

            /*!
             * @brief This function returns a constant reference to member xmlMultiplyResponse
             * @return Constant reference to member xmlMultiplyResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            const Calculator::multiplyResource::XMLMultiplyResponse& xmlMultiplyResponse() const;

            /*!
             * @brief This function returns a reference to member xmlMultiplyResponse
             * @return Reference to member xmlMultiplyResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            Calculator::multiplyResource::XMLMultiplyResponse& xmlMultiplyResponse();
            

            
        private:
            int32_t m__d;
            
            Calculator::multiplyResource::EmptyMultiplyResponse m_emptyMultiplyResponse;
            Calculator::multiplyResource::XMLMultiplyResponse m_xmlMultiplyResponse;
        };

    }
    /*!
     * @brief This class represents the interface divideResource defined by the user in the IDL file.
     * @ingroup CALCULATOR
     */
    namespace divideResource
    {
        /*!
         * @brief This class represents the structure EmptyDivideResponse defined by the user in the IDL file.
         * @ingroup CALCULATOR
         */
        class eProsima_user_DllExport EmptyDivideResponse
        {
        public:

            /*!
             * @brief Default constructor.
             */
            EmptyDivideResponse();
            
            /*!
             * @brief Default destructor.
             */
            ~EmptyDivideResponse();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object Calculator::divideResource::EmptyDivideResponse that will be copied.
             */
            EmptyDivideResponse(const EmptyDivideResponse &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object Calculator::divideResource::EmptyDivideResponse that will be copied.
             */
            EmptyDivideResponse(EmptyDivideResponse &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object Calculator::divideResource::EmptyDivideResponse that will be copied.
             */
            EmptyDivideResponse& operator=(const EmptyDivideResponse &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object Calculator::divideResource::EmptyDivideResponse that will be copied.
             */
            EmptyDivideResponse& operator=(EmptyDivideResponse &&x);
            
            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            inline void status(int32_t _status)
            {
                m_status = _status;
            }

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            inline int32_t status() const
            {
                return m_status;
            }

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            inline int32_t& status()
            {
                return m_status;
            }
            

            
        private:
            int32_t m_status;
        };
        /*!
         * @brief This class represents the structure XMLDivideResponse defined by the user in the IDL file.
         * @ingroup CALCULATOR
         */
        class eProsima_user_DllExport XMLDivideResponse
        {
        public:

            /*!
             * @brief Default constructor.
             */
            XMLDivideResponse();
            
            /*!
             * @brief Default destructor.
             */
            ~XMLDivideResponse();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object Calculator::divideResource::XMLDivideResponse that will be copied.
             */
            XMLDivideResponse(const XMLDivideResponse &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object Calculator::divideResource::XMLDivideResponse that will be copied.
             */
            XMLDivideResponse(XMLDivideResponse &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object Calculator::divideResource::XMLDivideResponse that will be copied.
             */
            XMLDivideResponse& operator=(const XMLDivideResponse &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object Calculator::divideResource::XMLDivideResponse that will be copied.
             */
            XMLDivideResponse& operator=(XMLDivideResponse &&x);
            
            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            inline void status(int32_t _status)
            {
                m_status = _status;
            }

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            inline int32_t status() const
            {
                return m_status;
            }

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            inline int32_t& status()
            {
                return m_status;
            }
            /*!
             * @brief This function sets a value in member xmlRepresentation
             * @param _xmlRepresentation New value for member xmlRepresentation
             */
            inline void xmlRepresentation(std::string _xmlRepresentation)
            {
                m_xmlRepresentation = _xmlRepresentation;
            }

            /*!
             * @brief This function returns the value of member xmlRepresentation
             * @return Value of member xmlRepresentation
             */
            inline std::string xmlRepresentation() const
            {
                return m_xmlRepresentation;
            }

            /*!
             * @brief This function returns a reference to member xmlRepresentation
             * @return Reference to member xmlRepresentation
             */
            inline std::string& xmlRepresentation()
            {
                return m_xmlRepresentation;
            }
            

            
        private:
            int32_t m_status;
            std::string m_xmlRepresentation;
        };
        /*!
         * @brief This class represents the union DivideResponse defined by the user in the IDL file.
         * @ingroup CALCULATOR
         */
        class eProsima_user_DllExport DivideResponse
        {
        public:

            /*!
             * @brief Default constructor.
             */
            DivideResponse();
            
            /*!
             * @brief Default destructor.
             */
            ~DivideResponse();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object Calculator::divideResource::DivideResponse that will be copied.
             */
            DivideResponse(const DivideResponse &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object Calculator::divideResource::DivideResponse that will be copied.
             */
            DivideResponse(DivideResponse &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object Calculator::divideResource::DivideResponse that will be copied.
             */
            DivideResponse& operator=(const DivideResponse &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object Calculator::divideResource::DivideResponse that will be copied.
             */
            DivideResponse& operator=(DivideResponse &&x);
            
            /*!
             * @brief This function sets the discriminator value.
             * @param __d New value for the discriminator.
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
             */
            void _d(int32_t __d);
            
            /*!
             * @brief This function returns the value of the discriminator.
             * @return Value of the discriminator
             */
            int32_t _d() const;
            
            /*!
             * @brief This function returns a reference to the discriminator.
             * @return Reference to the discriminator.
             */
            int32_t& _d();
            
            /*!
             * @brief This function copies the value in member emptyDivideResponse
             * @param _emptyDivideResponse New value to be copied in member emptyDivideResponse
             */
            void emptyDivideResponse(const Calculator::divideResource::EmptyDivideResponse &_emptyDivideResponse);

            /*!
             * @brief This function moves the value in member emptyDivideResponse
             * @param _emptyDivideResponse New value to be moved in member emptyDivideResponse
             */
            void emptyDivideResponse(Calculator::divideResource::EmptyDivideResponse &&_emptyDivideResponse);

            /*!
             * @brief This function returns a constant reference to member emptyDivideResponse
             * @return Constant reference to member emptyDivideResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            const Calculator::divideResource::EmptyDivideResponse& emptyDivideResponse() const;

            /*!
             * @brief This function returns a reference to member emptyDivideResponse
             * @return Reference to member emptyDivideResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            Calculator::divideResource::EmptyDivideResponse& emptyDivideResponse();
            /*!
             * @brief This function copies the value in member xmlDivideResponse
             * @param _xmlDivideResponse New value to be copied in member xmlDivideResponse
             */
            void xmlDivideResponse(const Calculator::divideResource::XMLDivideResponse &_xmlDivideResponse);

            /*!
             * @brief This function moves the value in member xmlDivideResponse
             * @param _xmlDivideResponse New value to be moved in member xmlDivideResponse
             */
            void xmlDivideResponse(Calculator::divideResource::XMLDivideResponse &&_xmlDivideResponse);

            /*!
             * @brief This function returns a constant reference to member xmlDivideResponse
             * @return Constant reference to member xmlDivideResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            const Calculator::divideResource::XMLDivideResponse& xmlDivideResponse() const;

            /*!
             * @brief This function returns a reference to member xmlDivideResponse
             * @return Reference to member xmlDivideResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            Calculator::divideResource::XMLDivideResponse& xmlDivideResponse();
            

            
        private:
            int32_t m__d;
            
            Calculator::divideResource::EmptyDivideResponse m_emptyDivideResponse;
            Calculator::divideResource::XMLDivideResponse m_xmlDivideResponse;
        };

    }
}

#endif // _Calculator_H_