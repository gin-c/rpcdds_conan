/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcrest_LICENSE file included in this rpcrest distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorRESTProtocol.h
 * This header file contains the declaration of the protocol used to create REST messages.
 *
 * This file was generated by the tool rpcrestgen.
 */

#ifndef _Calculator_REST_PROTOCOL_H_
#define _Calculator_REST_PROTOCOL_H_

#include "CalculatorProtocol.h"
#include "rpcrest/transports/messages/HttpMessage.h"
#include "rpcrest/utils/Messages.h"
#include <string>

using namespace std;

namespace eprosima
{
    namespace rpc
    {
        namespace protocol
        {
            namespace rest
            {
                // TODO Quitar
                class RESTSerializer;
            
                /*!
                 * @brief This class is responsible for serializing and deserializing the requests and responses of this application.
                 *  It uses a RESTful protocol.
		 * @ingroup CALCULATOR
                 */
                class RPCUSERDllExport CalculatorProtocol : public eprosima::rpc::protocol::CalculatorProtocol
                {
                    public:
                    
                       /*!
                        * @brief Default constructor
                        */
                        CalculatorProtocol();
                        
                       /*!
                        * @brief Default destructor
                        */
                        virtual ~CalculatorProtocol();
                        
                       /*!
                        * @brief This method sets the transport for the communications.
                        *        It must be an HTTP transport.
                        * @param transport Transport to use
                        * @return True if the assignment is successful, false otherwise
                        */
                        bool setTransport(eprosima::rpc::transport::Transport &transport);
                        
                       /*!
                        * @brief This method does not apply to this class
                        */
                        bool activateInterface(const char* interfaceName);
                        
                       /*!
                        * @brief This callback receives the requests and calls the specific protocol to process them
                        * @param protocol Protocol that must process the request
                        * @param buffer Received buffer
                        * @param bufferLength received data length
                        * @param bufferSize Received buffer size
                        * @param endpoint Proxy endpoint where the request came from
                        */
                        static size_t worker(Protocol& protocol, void *&buffer, size_t &bufferLength, size_t &bufferSize, eprosima::rpc::transport::Endpoint *endpoint);
                        



                        /*!
                         * @brief This method implements the server part of the protocol for the operation add
                         */
                        eprosima::rpc::transport::HttpMessage deserialize_addResource_add(RESTSerializer &restSerializer, eprosima::rpc::transport::HttpMessage &httpMessage);

                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation add
                         */
                        Calculator::addResource::AddResponse Calculator_addResource_add(/*in*/ int32_t a, /*in*/ int32_t b);





                        /*!
                         * @brief This method implements the server part of the protocol for the operation substract
                         */
                        eprosima::rpc::transport::HttpMessage deserialize_substractResource_substract(RESTSerializer &restSerializer, eprosima::rpc::transport::HttpMessage &httpMessage);

                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation substract
                         */
                        Calculator::substractResource::SubstractResponse Calculator_substractResource_substract(/*in*/ int32_t a, /*in*/ int32_t b);





                        /*!
                         * @brief This method implements the server part of the protocol for the operation multiply
                         */
                        eprosima::rpc::transport::HttpMessage deserialize_multiplyResource_multiply(RESTSerializer &restSerializer, eprosima::rpc::transport::HttpMessage &httpMessage);

                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation multiply
                         */
                        Calculator::multiplyResource::MultiplyResponse Calculator_multiplyResource_multiply(/*in*/ int32_t a, /*in*/ int32_t b);





                        /*!
                         * @brief This method implements the server part of the protocol for the operation divide
                         */
                        eprosima::rpc::transport::HttpMessage deserialize_divideResource_divide(RESTSerializer &restSerializer, eprosima::rpc::transport::HttpMessage &httpMessage);

                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation divide
                         */
                        Calculator::divideResource::DivideResponse Calculator_divideResource_divide(/*in*/ int32_t a, /*in*/ int32_t b);




                        
                        // Server
                        eprosima::rpc::transport::HttpMessage processRequest(eprosima::rpc::transport::HttpMessage &httpMessage);
                        
                    private:
                    
                    	static int deserializeContentLength(char* buffer);
                    	
                    	static bool isNumeric(string&& myString);
                    
                };
            } // namespace rest
        } // namespace protocol
    } // namespace rpc
} // namespace eprosima

#endif // _Calculator_REST_PROTOCOL_H_
