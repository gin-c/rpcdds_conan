/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcrest_LICENSE file included in this rpcrest distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorServerImplExample.cxx
 * This source file contains an example of the declaration of a servant.
 *
 * This file was generated by the tool rpcrestgen.
 */

#include "CalculatorServerImplExample.h"

#include <sstream>

Calculator::addResource::AddResponse addResourceServerImplExample::add(/*in*/ int32_t a, /*in*/ int32_t b)
{
    Calculator::addResource::AddResponse  add_ret;

	int c = a + b;

    add_ret._d() = 1; // 1 -> XML representation
    add_ret.xmlAddResponse().status(200); // HTTP OK
    std::ostringstream result;
    result << "<Result>" << c << "</Result>";
	add_ret.xmlAddResponse().xmlRepresentation(result.str());
   
    return add_ret;
} 





Calculator::substractResource::SubstractResponse substractResourceServerImplExample::substract(/*in*/ int32_t a, /*in*/ int32_t b)
{
    Calculator::substractResource::SubstractResponse  substract_ret;

	int c = a - b;

    substract_ret._d() = 1; // 1 -> XML representation
    substract_ret.xmlSubstractResponse().status(200); // HTTP OK
    std::ostringstream result;
    result << "<Result>" << c << "</Result>";
	substract_ret.xmlSubstractResponse().xmlRepresentation(result.str());
   
    return substract_ret;
} 





Calculator::multiplyResource::MultiplyResponse multiplyResourceServerImplExample::multiply(/*in*/ int32_t a, /*in*/ int32_t b)
{
    Calculator::multiplyResource::MultiplyResponse  multiply_ret;

	int c = a * b;

    multiply_ret._d() = 1; // 1 -> XML representation
    multiply_ret.xmlMultiplyResponse().status(200); // HTTP OK
    std::ostringstream result;
    result << "<Result>" << c << "</Result>";
	multiply_ret.xmlMultiplyResponse().xmlRepresentation(result.str());
   
    return multiply_ret;
} 





Calculator::divideResource::DivideResponse divideResourceServerImplExample::divide(/*in*/ int32_t a, /*in*/ int32_t b)
{
    Calculator::divideResource::DivideResponse  divide_ret;

	if(b == 0)
    {
	    divide_ret._d() = 1; // 1 -> XML representation
		divide_ret.xmlDivideResponse().status(400); // Request error
		divide_ret.xmlDivideResponse().xmlRepresentation("<Error>Divisor can't be 0</Error>");
		return divide_ret;
	}

	int c = a / b;

    divide_ret._d() = 1; // 1 -> XML representation
    divide_ret.xmlDivideResponse().status(200); // HTTP OK
    std::ostringstream result;
    result << "<Result>" << c << "</Result>";
	divide_ret.xmlDivideResponse().xmlRepresentation(result.str());
   
    return divide_ret;
} 


