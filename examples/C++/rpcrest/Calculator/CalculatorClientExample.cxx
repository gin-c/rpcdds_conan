/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcrest_LICENSE file included in this rpcrest distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorClientExample.cxx
 * This source file shows a simple example of how to create a proxy for an interface.
 *
 * This file was generated by the tool rpcrestgen.
 */

#include "CalculatorProxy.h"
#include "Calculator.h"
#include "CalculatorRESTProtocol.h"
#include "rpcrest/transports/HttpProxyTransport.h"
#include "rpcrest/exceptions/Exceptions.h"

#include <iostream>

using namespace eprosima::rpc;
using namespace eprosima::rpc::exception;
using namespace eprosima::rpc::transport;
using namespace eprosima::rpc::protocol::rest;

int main(int argc, char **argv)
{
    CalculatorProtocol *protocol = NULL;
    ProxyTransport *transport = NULL;
    Calculator::addResourceProxy *addProxy = NULL;
    Calculator::substractResourceProxy *substractProxy = NULL;
    Calculator::multiplyResourceProxy *multiplyProxy = NULL;
    Calculator::divideResourceProxy *divideProxy = NULL;

    // Creation of the proxy for interface "Calculator::addResource".
    try
    {
        protocol = new CalculatorProtocol();
        transport = new HttpProxyTransport("127.0.0.1:8080");
        addProxy = new Calculator::addResourceProxy(*transport, *protocol);
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }

    // Creation of the proxy for interface "Calculator::substractResourceProxy".
    try
    {
        substractProxy = new Calculator::substractResourceProxy(*transport, *protocol);
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }

    // Creation of the proxy for interface "Calculator::multiplyResourceProxy".
    try
    {
        multiplyProxy = new Calculator::multiplyResourceProxy(*transport, *protocol);
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }

    // Creation of the proxy for interface "Calculator::divideResourceProxy".
    try
    {
        divideProxy = new Calculator::divideResourceProxy(*transport, *protocol);
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }

    // Create and initialize parameters.
    int32_t  a = 6;
    int32_t  b = 2;

    ////////////////////////////////////////////////////////////////////////////////////////

    // Create and initialize return value.
    Calculator::addResource::AddResponse add_ret;

    // Call to remote procedure "add".
    try
    {
        add_ret = addProxy->add(a, b);

        if(add_ret._d() == 1)
        {
            cout << a << " + " << b << endl;
            cout << "Result: " << add_ret.xmlAddResponse().xmlRepresentation() << endl;
        }
    }
    catch(SystemException &ex)
    {
        std::cout << ex.what() << std::endl;
    }

    ////////////////////////////////////////////////////////////////////////////////////////

    // Create and initialize return value.
    Calculator::substractResource::SubstractResponse substract_ret;

    // Call to remote procedure "add".
    try
    {
        substract_ret = substractProxy->substract(a, b);

        if(substract_ret._d() == 1)
        {
            cout << a << " - " << b << endl;
            cout << "Result: " << substract_ret.xmlSubstractResponse().xmlRepresentation() << endl;
        }
    }
    catch(SystemException &ex)
    {
        std::cout << ex.what() << std::endl;
    }

    ////////////////////////////////////////////////////////////////////////////////////////

    // Create and initialize return value.
    Calculator::multiplyResource::MultiplyResponse multiply_ret;

    // Call to remote procedure "add".
    try
    {
        multiply_ret = multiplyProxy->multiply(a, b);

        if(multiply_ret._d() == 1)
        {
            cout << a << " * " << b << endl;
            cout << "Result: " << multiply_ret.xmlMultiplyResponse().xmlRepresentation() << endl;
        }
    }
    catch(SystemException &ex)
    {
        std::cout << ex.what() << std::endl;
    }

    ////////////////////////////////////////////////////////////////////////////////////////

    // Create and initialize return value.
    Calculator::divideResource::DivideResponse divide_ret;

    // Call to remote procedure "add".
    try
    {
        divide_ret = divideProxy->divide(a, b);
        
        if(divide_ret._d() == 1)
        {
            cout << a << " / " << b << endl;
            cout << "Result: " << divide_ret.xmlDivideResponse().xmlRepresentation() << endl;
        }
    }
    catch(SystemException &ex)
    {
        std::cout << ex.what() << std::endl;
    }

    ////////////////////////////////////////////////////////////////////////////////////////

    b = 0;

    // Call to remote procedure "divide".
    try
    {
        divide_ret = divideProxy->divide(a, b);

        if(divide_ret._d() == 1)
        {
            cout << a << " / " << b << endl;
            cout << "Result: " << divide_ret.xmlDivideResponse().xmlRepresentation() << endl;
        }
    }
    catch(SystemException &ex)
    {
        std::cout << ex.what() << std::endl;
    }

    ////////////////////////////////////////////////////////////////////////////////////////
    delete(addProxy);
    delete(substractProxy);
    delete(multiplyProxy);
    delete(divideProxy);
    delete(transport);
    delete(protocol);

    return 0;
}
















