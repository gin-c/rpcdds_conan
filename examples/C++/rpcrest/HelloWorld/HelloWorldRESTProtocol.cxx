/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcrest_LICENSE file included in this rpcrest distribution.
 *
 *************************************************************************
 * 
 * @file HelloWorldRESTProtocol.cxx
 * This source file contains the definition of the protocol used to create REST messages.
 *
 * This file was generated by the tool rpcrestgen.
 */

#include "HelloWorldRESTProtocol.h"
#include "rpcrest/exceptions/Exceptions.h"
#include "rpcrest/transports/ProxyTransport.h"
#include "rpcrest/transports/ServerTransport.h"
#include "rpcrest/protocols/rest/RESTSerializer.h"

using namespace eprosima::rpc;
using namespace ::protocol::rest;
using namespace ::transport;
using namespace eprosima::rpc::exception;

#include <sstream>

using namespace std;

HelloWorldProtocol::HelloWorldProtocol() {}

HelloWorldProtocol::~HelloWorldProtocol() {}

bool HelloWorldProtocol::isNumeric(string&& myString) {
    stringstream ss(myString);
    float f;
    ss >> noskipws >> f;

    return ss.eof() && !ss.fail();
}

bool HelloWorldProtocol::setTransport(Transport &transport)
{    
    if(strcmp(transport.getType(), "HTTP") != 0)
    {
        throw IncompatibleException("protocol and transport are incompatibles");
    }
    
    if(transport.getBehaviour() == SERVER_BEHAVIOUR)
    {
        // If this is a server transport, we set its callback
        eprosima::rpc::transport::ServerTransport &serverTransport = dynamic_cast<eprosima::rpc::transport::ServerTransport&>(transport);
        serverTransport.setCallback(&HelloWorldProtocol::worker);
    }
        
    _setTransport(transport);
        
    return true;
}

bool HelloWorldProtocol::activateInterface(const char* interfaceName)
{
    return true;
}

int HelloWorldProtocol::deserializeContentLength(char* buffer) {
    char contentLength[16];
    strcpy(contentLength, "Content-Length:");
    char *p = strtok(buffer, "\r\n");
    while(p) {
        p[strlen(p)] = '\r'; // strtok puts a '\0', we don't want it
        if(memcmp(p, contentLength, 15) == 0) {
            return atoi(p+15); // 15 = "Content-Length:"
        }
        p = strtok(NULL, "\r\n");
    }

    return 0;
}

size_t HelloWorldProtocol::worker(Protocol& protocol, void *&buffer, size_t &bufferLength, size_t &bufferSize, eprosima::rpc::transport::Endpoint *endpoint)
{
    // TODO : Call the protocol
    eprosima::rpc::protocol::rest::HelloWorldProtocol &restProtocol = dynamic_cast<eprosima::rpc::protocol::rest::HelloWorldProtocol&>( protocol );
    HttpMessage *httpMessage = reinterpret_cast<HttpMessage*>(buffer);

    HttpMessage response = restProtocol.processRequest(*httpMessage);
    
    dynamic_cast<ServerTransport&>(restProtocol.getTransport()).sendReply(&response, 0, endpoint);

    return 1;
}

// Server
HttpMessage HelloWorldProtocol::processRequest(HttpMessage &httpMessage)
{
    RESTSerializer restSerializer;
    
    restSerializer.deserializeUri(httpMessage.getUri(), "/resources/");
    
    // TODO Siempre se crea aunque no haya un error. Cambiar
    HttpMessage http404Response;
    http404Response.setResponseCode(404);
    http404Response.setResponseStatus("Resource not found");
    
    // BEGIN ITERATION 
    string tag;
    if(!restSerializer.existsTagLevel(0)) {
    return http404Response; // ERROR NO OPERATIONS
    }
    if(restSerializer.getTag(0).compare("HelloWorld") == 0) {
    // BEGIN ITERATION HelloWorld
    if(!restSerializer.existsTagLevel(1)) {
    if(httpMessage.getMethod() == HttpMessage::HTTP_METHOD_GET) {
    if(restSerializer.existsQueryParameter("name")) {
    return deserialize_HelloWorldResource_hello(restSerializer, httpMessage); // MATCHING
    }
    }
    }
    // END ITERATION HelloWorld
    }
    // ERROR NO MATCH FOUND
    // END ITERATION 

    
    return http404Response;
}




HelloWorld::HelloWorldResource::HelloResponse HelloWorldProtocol::HelloWorld_HelloWorldResource_hello(/*in*/ const std::string& name)
{
     stringstream stream;
     RESTSerializer restSerializer;
     eprosima::rpc::transport::ProxyTransport &proxyTransport = dynamic_cast<eprosima::rpc::transport::ProxyTransport&>( getTransport() );
     HelloWorld::HelloWorldResource::HelloResponse  hello_ret;
     // XXX TODO if NULL -> error
     
     // Resource Base URI = /resources/
     // Path = HelloWorld
     // Method = GET
     // Body Parameter = 

     HttpMessage httpMessage;
     
     httpMessage.setMethod(HttpMessage::HTTP_METHOD_GET);
     //TODO Chequear host en el transport.
     httpMessage.setHost("example.com");
     std::string uri("/resources/HelloWorld"); 
     
        std::string paramValue;
        stream << name;
        paramValue = stream.str();
        stream.str(std::string());
        stream.clear();
        restSerializer.serializeQueryParameter(uri, "name", paramValue);       

     
     httpMessage.setUri(uri);
     



     
     // HTTP connection
     // TODO Check connection error.
     proxyTransport.connect();
     proxyTransport.send(&httpMessage, 0);
     HttpMessage httpResponse;
     size_t dump;
     proxyTransport.receive(&httpResponse, 0, dump);
     
     
     int discriminator = 0;

     if(httpResponse.getBodyContentType().find("xml") != string::npos)
     {
        discriminator = 1;
     } 
     else if(httpResponse.getBodyContentType().find("json") != string::npos)
     {
        discriminator = 2;
     }
    
     switch(discriminator)
     {
     case 0:
          hello_ret._d() = discriminator;
          hello_ret.emptyHelloResponse().status(httpResponse.getResponseCode());
          break;
          case 1:
          hello_ret._d() = discriminator;
          hello_ret.xmlHelloResponse().status(httpResponse.getResponseCode());
          hello_ret.xmlHelloResponse().xmlRepresentation(httpResponse.getBodyData());
          break;
          
     }
     
              
     return hello_ret;
}

HttpMessage HelloWorldProtocol::deserialize_HelloWorldResource_hello(RESTSerializer &restSerializer, HttpMessage &httpMessage)
{
    std::stringstream stream;
    

    // Deserialize name
    std::string name = restSerializer.getQueryParameter("name");

    


    
    // TODO Check implementation.
    HelloWorld::HelloWorldResource::HelloResponse HelloResponse = _HelloWorld_HelloWorldResource_impl->hello(  name.c_str()  );
    
    HttpMessage httpResponse;
    switch(HelloResponse._d())
    {
    case 0:
        httpResponse.setResponseCode(HelloResponse.emptyHelloResponse().status());
        break;
    case 1:
        httpResponse.setResponseCode(HelloResponse.xmlHelloResponse().status());
    httpResponse.setBodyData(HelloResponse.xmlHelloResponse().xmlRepresentation()); 
        break;

    }

    if(httpResponse.getBodyData().size() > 0)
    {
        if(HelloResponse._d() == 1)
            httpResponse.setBodyContentType("application/xml");
        else if(HelloResponse._d() == 2)
            httpResponse.setBodyContentType("application/json");
    }
    
    return httpResponse;
}

