/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * _LICENSE file included in this  distribution.
 *
 *************************************************************************
 * 
 * @file HelloWorld.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _HelloWorld_H_
#define _HelloWorld_H_

// TODO Poner en el contexto.
#include "rpcrest/exceptions/UserException.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

namespace HelloWorld
{
    /*!
     * @brief This class represents the interface HelloWorldResource defined by the user in the IDL file.
     * @ingroup HELLOWORLD
     */
    namespace HelloWorldResource
    {
        /*!
         * @brief This class represents the structure EmptyHelloResponse defined by the user in the IDL file.
         * @ingroup HELLOWORLD
         */
        class eProsima_user_DllExport EmptyHelloResponse
        {
        public:

            /*!
             * @brief Default constructor.
             */
            EmptyHelloResponse();
            
            /*!
             * @brief Default destructor.
             */
            ~EmptyHelloResponse();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object HelloWorld::HelloWorldResource::EmptyHelloResponse that will be copied.
             */
            EmptyHelloResponse(const EmptyHelloResponse &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object HelloWorld::HelloWorldResource::EmptyHelloResponse that will be copied.
             */
            EmptyHelloResponse(EmptyHelloResponse &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object HelloWorld::HelloWorldResource::EmptyHelloResponse that will be copied.
             */
            EmptyHelloResponse& operator=(const EmptyHelloResponse &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object HelloWorld::HelloWorldResource::EmptyHelloResponse that will be copied.
             */
            EmptyHelloResponse& operator=(EmptyHelloResponse &&x);
            
            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            inline void status(int32_t _status)
            {
                m_status = _status;
            }

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            inline int32_t status() const
            {
                return m_status;
            }

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            inline int32_t& status()
            {
                return m_status;
            }
            

            
        private:
            int32_t m_status;
        };
        /*!
         * @brief This class represents the structure XMLHelloResponse defined by the user in the IDL file.
         * @ingroup HELLOWORLD
         */
        class eProsima_user_DllExport XMLHelloResponse
        {
        public:

            /*!
             * @brief Default constructor.
             */
            XMLHelloResponse();
            
            /*!
             * @brief Default destructor.
             */
            ~XMLHelloResponse();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object HelloWorld::HelloWorldResource::XMLHelloResponse that will be copied.
             */
            XMLHelloResponse(const XMLHelloResponse &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object HelloWorld::HelloWorldResource::XMLHelloResponse that will be copied.
             */
            XMLHelloResponse(XMLHelloResponse &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object HelloWorld::HelloWorldResource::XMLHelloResponse that will be copied.
             */
            XMLHelloResponse& operator=(const XMLHelloResponse &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object HelloWorld::HelloWorldResource::XMLHelloResponse that will be copied.
             */
            XMLHelloResponse& operator=(XMLHelloResponse &&x);
            
            /*!
             * @brief This function sets a value in member status
             * @param _status New value for member status
             */
            inline void status(int32_t _status)
            {
                m_status = _status;
            }

            /*!
             * @brief This function returns the value of member status
             * @return Value of member status
             */
            inline int32_t status() const
            {
                return m_status;
            }

            /*!
             * @brief This function returns a reference to member status
             * @return Reference to member status
             */
            inline int32_t& status()
            {
                return m_status;
            }
            /*!
             * @brief This function sets a value in member xmlRepresentation
             * @param _xmlRepresentation New value for member xmlRepresentation
             */
            inline void xmlRepresentation(std::string _xmlRepresentation)
            {
                m_xmlRepresentation = _xmlRepresentation;
            }

            /*!
             * @brief This function returns the value of member xmlRepresentation
             * @return Value of member xmlRepresentation
             */
            inline std::string xmlRepresentation() const
            {
                return m_xmlRepresentation;
            }

            /*!
             * @brief This function returns a reference to member xmlRepresentation
             * @return Reference to member xmlRepresentation
             */
            inline std::string& xmlRepresentation()
            {
                return m_xmlRepresentation;
            }
            

            
        private:
            int32_t m_status;
            std::string m_xmlRepresentation;
        };
        /*!
         * @brief This class represents the union HelloResponse defined by the user in the IDL file.
         * @ingroup HELLOWORLD
         */
        class eProsima_user_DllExport HelloResponse
        {
        public:

            /*!
             * @brief Default constructor.
             */
            HelloResponse();
            
            /*!
             * @brief Default destructor.
             */
            ~HelloResponse();
            
            /*!
             * @brief Copy constructor.
             * @param x Reference to the object HelloWorld::HelloWorldResource::HelloResponse that will be copied.
             */
            HelloResponse(const HelloResponse &x);
            
            /*!
             * @brief Move constructor.
             * @param x Reference to the object HelloWorld::HelloWorldResource::HelloResponse that will be copied.
             */
            HelloResponse(HelloResponse &&x);
            
            /*!
             * @brief Copy assignment.
             * @param x Reference to the object HelloWorld::HelloWorldResource::HelloResponse that will be copied.
             */
            HelloResponse& operator=(const HelloResponse &x);
            
            /*!
             * @brief Move assignment.
             * @param x Reference to the object HelloWorld::HelloWorldResource::HelloResponse that will be copied.
             */
            HelloResponse& operator=(HelloResponse &&x);
            
            /*!
             * @brief This function sets the discriminator value.
             * @param __d New value for the discriminator.
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
             */
            void _d(int32_t __d);
            
            /*!
             * @brief This function returns the value of the discriminator.
             * @return Value of the discriminator
             */
            int32_t _d() const;
            
            /*!
             * @brief This function returns a reference to the discriminator.
             * @return Reference to the discriminator.
             */
            int32_t& _d();
            
            /*!
             * @brief This function copies the value in member emptyHelloResponse
             * @param _emptyHelloResponse New value to be copied in member emptyHelloResponse
             */
            void emptyHelloResponse(const HelloWorld::HelloWorldResource::EmptyHelloResponse &_emptyHelloResponse);

            /*!
             * @brief This function moves the value in member emptyHelloResponse
             * @param _emptyHelloResponse New value to be moved in member emptyHelloResponse
             */
            void emptyHelloResponse(HelloWorld::HelloWorldResource::EmptyHelloResponse &&_emptyHelloResponse);

            /*!
             * @brief This function returns a constant reference to member emptyHelloResponse
             * @return Constant reference to member emptyHelloResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            const HelloWorld::HelloWorldResource::EmptyHelloResponse& emptyHelloResponse() const;

            /*!
             * @brief This function returns a reference to member emptyHelloResponse
             * @return Reference to member emptyHelloResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            HelloWorld::HelloWorldResource::EmptyHelloResponse& emptyHelloResponse();
            /*!
             * @brief This function copies the value in member xmlHelloResponse
             * @param _xmlHelloResponse New value to be copied in member xmlHelloResponse
             */
            void xmlHelloResponse(const HelloWorld::HelloWorldResource::XMLHelloResponse &_xmlHelloResponse);

            /*!
             * @brief This function moves the value in member xmlHelloResponse
             * @param _xmlHelloResponse New value to be moved in member xmlHelloResponse
             */
            void xmlHelloResponse(HelloWorld::HelloWorldResource::XMLHelloResponse &&_xmlHelloResponse);

            /*!
             * @brief This function returns a constant reference to member xmlHelloResponse
             * @return Constant reference to member xmlHelloResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            const HelloWorld::HelloWorldResource::XMLHelloResponse& xmlHelloResponse() const;

            /*!
             * @brief This function returns a reference to member xmlHelloResponse
             * @return Reference to member xmlHelloResponse
             * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
             */
            HelloWorld::HelloWorldResource::XMLHelloResponse& xmlHelloResponse();
            

            
        private:
            int32_t m__d;
            
            HelloWorld::HelloWorldResource::EmptyHelloResponse m_emptyHelloResponse;
            HelloWorld::HelloWorldResource::XMLHelloResponse m_xmlHelloResponse;
        };

    }
}

#endif // _HelloWorld_H_