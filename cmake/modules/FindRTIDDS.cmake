set(RTIDDS_FOUND FALSE)

function(_find_rtidds_ensure_libraries var expected_library_names library_paths)
    foreach(expected_library_name ${expected_library_names})
        set(found FALSE)
        foreach(library_path ${library_paths})
            get_filename_component(library_name "${library_path}" NAME)
            if("${expected_library_name}" STREQUAL "${library_name}")
                set(found TRUE)
                break()
            endif()
        endforeach()
        if(NOT found)
            set(${var} FALSE PARENT_SCOPE)
            return()
        endif()
    endforeach()
    set(${var} TRUE PARENT_SCOPE)
endfunction()

function(_find_rtidds_libraries libs lib_path search_library_paths)
    file(GLOB_RECURSE _libs
        RELATIVE "${lib_path}"
        ${search_library_paths})

    set(_i 0)
    set(_matched_vs2010)
    set(_matched_vs2012)
    set(_matched_vs2013)
    set(_matched_vs2015)
    while(TRUE)
        list(LENGTH _libs _length)
        if(NOT ${_i} LESS ${_length})
            break()
        endif()
        list(GET _libs ${_i} _lib)
        set(_match TRUE)
        # ignore libraries in folder with 'jdk' suffix
        string(FIND "${_lib}" "jdk/" _found)
        if(NOT ${_found} EQUAL -1)
            set(_match FALSE)
        endif()
        if(_match AND ${CMAKE_SYSTEM_NAME} STREQUAL "Linux") 
            string(FIND "${_lib}" "Linux" _found)
            if(${_found} EQUAL -1)
                set(_match FALSE)
            endif()
        endif()
        if(_match AND NOT MSVC AND NOT MSVC_IDE)
            if(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
                string(FIND "${_lib}" "i86" _found)
                if(NOT ${_found} EQUAL -1)
                    set(_match FALSE)
                endif()
            else()
                string(FIND "${_lib}" "x64" _found)
                if(NOT ${_found} EQUAL -1)
                    set(_match FALSE)
                endif()
            endif()
        else()
            if(CMAKE_CL_64)
                string(FIND "${_lib}" "i86" _found)
                if(NOT ${_found} EQUAL -1)
                    set(_match FALSE)
                endif()
            else()
                string(FIND "${_lib}" "x64" _found)
                if(NOT ${_found} EQUAL -1)
                    set(_match FALSE)
                endif()
            endif()
        endif()
        if(_match AND WIN32)
            set(_match FALSE)
            string(FIND "${_lib}" "VS2015/" _found)
            if(NOT ${_found} EQUAL -1)
                set(_match TRUE)
                set(_matched_vs2015 TRUE)
            endif()
            string(FIND "${_lib}" "VS2013/" _found)
            if(NOT ${_found} EQUAL -1)
                set(_match TRUE)
                set(_matched_vs2013 TRUE)
            endif()
            string(FIND "${_lib}" "VS2012/" _found)
            if(NOT ${_found} EQUAL -1)
                set(_match TRUE)
                set(_matched_vs2012 TRUE)
            endif()
            string(FIND "${_lib}" "VS2010/" _found)
            if(NOT ${_found} EQUAL -1)
                set(_match TRUE)
                set(_matched_vs2010 TRUE)
            endif()
        endif()

        if(_match)
            math(EXPR _i "${_i} + 1")
        else()
            list(REMOVE_AT _libs ${_i})
        endif()
    endwhile()

    set(_vsstring "")
    if(MSVC12 AND _matched_vs2013)
        set(_vsstring "VS2013/")
    elseif(MSVC11 AND _matched_vs2012)
        set(_vsstring "VS2012/")
    elseif(MSVC10 AND _matched_vs2010)
        set(_vsstring "VS2010/")
    else()
        if(_matched_vs2015)
            set(_vsstring "VS2015/")
        elseif(_matched_vs2013)
            set(_vsstring "VS2013/")
        elseif(_matched_vs2012)
            set(_vsstring "VS2012/")
        elseif(_matched_vs2010)
            set(_vsstring "VS2010/")
        endif()
    endif()

    if(NOT _vsstring STREQUAL "")
        set(_i 0)
        while(TRUE)
            list(LENGTH _libs _length)
            if(NOT ${_i} LESS ${_length})
                break()
            endif()
            list(GET _libs ${_i} _lib)
            set(_match TRUE)
            string(FIND "${_lib}" "${_vsstring}" _found)
            if(${_found} EQUAL -1)
                set(_match FALSE)
            endif()
            if(_match)
                math(EXPR _i "${_i} + 1")
            else()
                list(REMOVE_AT _libs ${_i})
            endif()
        endwhile()
    endif()

    set(${libs} ${_libs} PARENT_SCOPE)
endfunction()

set(_expected_library_base_names
    "nddsc"
    "nddscore"
    "nddscpp"
    )

set(_expected_library_debug_base_names
    "nddscd"
    "nddscored"
    "nddscppd"
    )

set(_expected_library_names "")
foreach(_base_name IN LISTS _expected_library_base_names)
    if(WIN32)
        list(APPEND _expected_library_names "${_base_name}.lib")
    elseif(APPLE)
        list(APPEND _expected_library_names "lib${_base_name}.dylib")
    else()
        list(APPEND _expected_library_names "lib${_base_name}.so")
    endif()
endforeach()

set(_expected_library_debug_names "")
foreach(_base_name IN LISTS _expected_library_debug_base_names)
    if(WIN32)
        list(APPEND _expected_library_debug_names "${_base_name}.lib")
    elseif(APPLE)
        list(APPEND _expected_library_debug_names "lib${_base_name}.dylib")
    else()
        list(APPEND _expected_library_debug_names "lib${_base_name}.so")
    endif()
endforeach()

file(TO_CMAKE_PATH "$ENV{NDDSHOME}" _NDDSHOME)

if(NOT "${_NDDSHOME}" STREQUAL "")
    set(_goodversion TRUE)
    if(NOT "${RTIDDS_FIND_VERSION}" STREQUAL "")
        string(FIND "${_NDDSHOME}" "ndds." _found)
        if(${_found} EQUAL -1)
            string(FIND "${_NDDSHOME}" "rti_connext_dds-" _found)
            if(${_found} EQUAL -1)
                set(_goodversion FALSE)
            else()
                string(LENGTH "rti_connext_dds-" strlen_)
            endif()
        else()
            string(LENGTH "ndds." strlen_)
        endif()

        if(${_goodversion})
            math(EXPR _vpos "${_found} + ${strlen_}")
            string(SUBSTRING "${_NDDSHOME}" ${_vpos} -1 _rti_version_found)
            string(COMPARE LESS "${RTIDDS_FIND_VERSION}" "${_rti_version_found}" _less_version)
            if(NOT _less_version)
                set(_goodversion FALSE)
            endif()
        endif()
    endif()

    if(${_goodversion})
        if(NOT "${RTIDDS_FIND_VERSION}" STREQUAL "")
            message(STATUS "Found RTI DDS ${_rti_version_found}: ${_NDDSHOME}")
        else()
            message(STATUS "Found RTI DDS: ${_NDDSHOME}")
        endif()

        set(RTIDDS_HOME "${_NDDSHOME}")
        set(RTIDDS_INCLUDE_DIRS "${_NDDSHOME}/include" "${_NDDSHOME}/include/ndds")

        set(_lib_path "${_NDDSHOME}/lib")

        set(_search_library_paths "")
        foreach(_library_name ${_expected_library_names})
            list(APPEND _search_library_paths "${_lib_path}/${_library_name}")
        endforeach()

        set(_search_library_debug_paths "")
        foreach(_library_name ${_expected_library_debug_names})
            list(APPEND _search_library_debug_paths "${_lib_path}/${_library_name}")
        endforeach()

        _find_rtidds_libraries(_libs "${_lib_path}" "${_search_library_paths}")

        _find_rtidds_libraries(_libs_debug "${_lib_path}" "${_search_library_debug_paths}")
        
        _find_rtidds_ensure_libraries(_found_all_libraries "${_expected_library_names};${_expected_library_debug_names}" "${_libs};${_libs_debug}")
        if(NOT _found_all_libraries)
            message(FATAL_ERROR "NDDSHOME set to '${_NDDSHOME}' but could not find all libraries '${_expected_library_names};${_expected_library_debug_names}' under '${_lib_path}': ${_libs};${_libs_debug}")
        endif()

        list(LENGTH _libs _length)
        list(LENGTH _expected_library_names _expected_length)
        list(LENGTH _libs_debug _length_debug)
        list(LENGTH _expected_library_debug_names _expected_length_debug)
        if((_length GREATER _expected_length) OR (_length_debug GREATER _expected_length_debug))
            message(FATAL_ERROR "NDDSHOME set to '${_NDDSHOME}' but found multiple files named '${_expected_library_names};${_expected_library_debug_names}' under '${_lib_path}': ${_libs};${_libs_debug}")
        endif()

        set(RTIDDS_LIBRARIES "")
        foreach(_lib IN LISTS _libs)
            list(APPEND RTIDDS_LIBRARIES "optimized")
            list(APPEND RTIDDS_LIBRARIES "${_lib_path}/${_lib}")
        endforeach()
        foreach(_lib IN LISTS _libs_debug)
            list(APPEND RTIDDS_LIBRARIES "debug")
            list(APPEND RTIDDS_LIBRARIES "${_lib_path}/${_lib}")
        endforeach()

        list(GET _libs 0 _first_lib)
        get_filename_component(RTIDDS_LIBRARY_DIRS "${_lib_path}/${_first_lib}" DIRECTORY)
        # Since we know RTIDDS_LIBRARY_DIRS is a single path, just alias it.
        set(RTIDDS_LIBRARY_DIR "${RTIDDS_LIBRARY_DIRS}")

        if(WIN32)
            set(RTIDDS_DEFINITIONS "RTI_WIN32")
            set(RTIDDS_DLL_DEFINITIONS "NDDS_DLL_VARIABLE")
        else()
            set(RTIDDS_DEFINITIONS "RTI_LINUX" "RTI_UNIX")
        endif()

        set(RTIDDS_FOUND TRUE)
    endif()
else()
    find_package(nddscpp)
    if(nddscpp_FOUND)
        message(STATUS "Found RTI DDS: ${nddscpp_DIR}")
        set(RTIDDS_INCLUDE_DIRS ${nddscpp_INCLUDE_DIRS})
        set(RTIDDS_LIBRARIES ${nddscpp_LIBRARIES})
        set(RTIDDS_LIBRARY_DIRS "")
        set(RTIDDS_LIBRARY_DIR "")
        set(RTIDDS_DEFINITIONS ${nddscpp_DEFINITIONS})
        set(RTIDDS_FOUND TRUE)

        _find_rtidds_ensure_libraries(_found_all_libraries "${_expected_library_names};${_expected_library_debug_names}" "${RTIDDS_LIBRARIES}")
        if(NOT _found_all_libraries)
            message(FATAL_ERROR "RTIDDS_LIBRARIES does not contain all libraries '${_expected_library_names}': ${RTIDDS_LIBRARIES}")
        endif()
    endif()
endif()

if(RTIDDS_FOUND AND NOT WIN32)
    list(APPEND RTIDDS_LIBRARIES "pthread" "dl")
endif()

include(FindPackageHandleStandardArgs)
# RTIDDS_HOME, RTIDDS_LIBRARY_DIRS, and RTIDDS_LIBRARY_DIR are not always set, depending on the source of RTIDDS.
find_package_handle_standard_args(RTIDDS
    FOUND_VAR RTIDDS_FOUND
    REQUIRED_VARS
    RTIDDS_INCLUDE_DIRS
    RTIDDS_LIBRARIES
    RTIDDS_DEFINITIONS
    )
