group ProtocolHeader;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "Protocol.h"], description=["This header file contains the declaration of the interface for all protocols."])$

#ifndef _$ctx.filename;format="toUpper"$_PROTOCOL_H_
#define _$ctx.filename;format="toUpper"$_PROTOCOL_H_

#include <$ctx.includePrefix$protocols/Protocol.h>
#include "$ctx.filename$.h"
$if(ctx.dds)$
#include "$ctx.filename$AsyncCallbackHandlers.h"

$endif$
$if(ctx.server)$
#include "$ctx.filename$ServerImpl.h"
$endif$

$if(ctx.client)$
#include "$ctx.filename$ProxyImpl.h"
$endif$

namespace eprosima
{
    namespace rpc
    {
        namespace protocol
        {
            /*!
             * @brief Protocol base class for the specific application
             * @ingroup $ctx.trimfilename$
             */
            class RPCUSERDllExport $ctx.filename$Protocol : public Protocol
            {
                public:
                
                   /*!
                    * @brief This method sets the transport for the communications. It has to be implemented by the children classes.
                    * @param transport Transport to use.
                    * @return True if the assignment is successful, false otherwise
                    */
                    virtual bool setTransport(eprosima::rpc::transport::Transport &transport) = 0;
                    
                        /*!
                         * @brief In some protocols this function activates needed entities to use an interface.
                         * @param interfaceName Interface name.
                         * @return Whether the activation works successfully.
                         */
                    virtual bool activateInterface(const char* interfaceName) = 0;
                    
                    $if(ctx.server)$
                    $ctx.scopedInterfaces : { interface |
                   /*!
                    * @brief This method links a specific servant with the protocol.
                    * @param s_impl Servant implementation.
                    */
                    void link$interface.formatedScopedname$Impl($interface.scopedname$ServerImpl &s_impl)
                    {
                        _$interface.formatedScopedname$_s_impl = &s_impl;
                    }
                    }; separator="\n"$
                    $endif$

                    $if(ctx.client)$
                    $ctx.scopedInterfaces : { interface |
                   /*!
                    * @brief This method links a specific proxy with the protocol.
                    * @param p_impl Servant implementation.
                    */
                    void link$interface.formatedScopedname$NotifyImpl($interface.scopedname$ProxyImpl &p_impl)
                    {
                        _$interface.formatedScopedname$_p_impl = &p_impl;
                    }
                    }; separator="\n"$
                    $endif$
                    $definitions; separator="\n"$
                    
                protected:
                
                    $ctx.filename$Protocol() : Protocol()
                    $if(ctx.server)$
                    $ctx.scopedInterfaces : { interface |                      
                    , _$interface.formatedScopedname$_s_impl(NULL)
                    }; separator="\n"$
                    $endif$

                    $if(ctx.client)$
                    $ctx.scopedInterfaces : { interface |
                    , _$interface.formatedScopedname$_p_impl(NULL)
                    }; separator="\n"$
                    $endif$

                    {}
                    
                    virtual ~$ctx.filename$Protocol(){}
                
                    $if(ctx.server)$
                	$ctx.scopedInterfaces : { interface |                      
                    $interface.scopedname$ServerImpl *_$interface.formatedScopedname$_s_impl;
                    }; separator="\n"$
                    $endif$

                    $if(ctx.client)$
                	$ctx.scopedInterfaces : { interface |
                    $interface.scopedname$ProxyImpl *_$interface.formatedScopedname$_p_impl;
                    }; separator="\n"$
                    $endif$
                    
            };
        } // namespace protocol
    } // namespace rpc
} // namespace eprosima

#endif // _$ctx.filename;format="toUpper"$_PROTOCOL_H_
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

interface(ctx, parent, interface, export_list) ::= <<
$interface.all_operations : {operation|
$if(ctx.client)$
$if(!operation.notify)$
/*!
 * @brief This method implements the proxy part of the protocol for the operation $operation.name$.
 *        It has to be implemented by the child classes.
 */
virtual $paramRetType(operation.rettype)$ $interface.formatedScopedname$_$operation.name$($paramDeclarations(params=operation.parameters)$) = 0;
$endif$

$if(ctx.dds)$
$if(!operation.oneway)$
$if(!operation.notify)$
/*!
 * @brief This asynchronous method implements the proxy part of the protocol for the operation $operation.name$.
 *        It has to be implemented by the child classes.
 */
virtual void $interface.formatedScopedname$_$operation.name$_async($interface.scopedname$_$operation.name$CallbackHandler &obj$paramDeclarations(params=operation.inputparam, separatorInicial=", ")$) = 0;

$endif$
$endif$
$endif$
$endif$

$if(ctx.server)$
$if(operation.notify)$
/*!
 * @brief This method implements the proxy part of the protocol for the operation $operation.name$.
 *        It has to be implemented by the child classes.
 */
virtual $paramRetType(operation.rettype)$ $interface.formatedScopedname$_$operation.name$($paramDeclarations(params=operation.parameters)$) = 0;
$endif$
$endif$

}; separator="\n"$

$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>
