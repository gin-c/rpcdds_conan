group ProxyImplSourceExample;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "ProxyImplExample.cxx"], description=["This source file contains an example of the declaration of a servant."])$

#include "$ctx.filename$ProxyImplExample.h"

$definitions; separator="\n"$
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, parent, interface, export_list) ::= <<
$interface.all_operations : { operation |
$if(operation.notify)$
$paramRetType(operation.rettype)$ $interface.name$ProxyImplExample::$operation.name$Handle(const std::string& sendId$if(operation.inputparam)$,$endif$$paramDeclarations(params=operation.inputparam)$)
{
    $varDecl(variable=operation.rettypeparam)$
   
    $if(operation.rettypeparam)$
    return $operation.rettypeparam.name$;
    $endif$
}
$endif$
}; separator="\n"$

$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>
