/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 * 
 * @file ucarDDSProtocol.h
 * This header file contains the declaration of the protocol used to create DDS messages.
 *
 * This file was generated by the tool rpcddsgen.
 */

#ifndef _ucar_DDS_PROTOCOL_H_
#define _ucar_DDS_PROTOCOL_H_

#include "ucarProtocol.h"
#include <rpcdds/utils/Messages.h>

#include "ucarTopicsPlugin.h"

namespace eprosima
{
    namespace rpc
    {
        namespace transport
        {
            namespace dds
            {
                class RTPSProxyProcedureEndpoint;
                class RTPSServerProcedureEndpoint;
                class RTPSTransport;
            }
        }
        
        namespace protocol
        {
            namespace dds
            {
                /*!
                 * @brief This class is responsible for serializing and deserializing the requests and responses of this application.
                 * It uses DDS.
		         * @ingroup UCAR
                 */
                class  ucarProtocol : public eprosima::rpc::protocol::ucarProtocol
                {
                    public:
                    
                       /*!
                        * @brief Default constructor
                        */
                        RPCUSERDllExport ucarProtocol();
                        
                       /*!
                        * @brief Destructor
                        */
                        virtual RPCUSERDllExport ~ucarProtocol();
                    
                       /*!
                        * @brief This method sets the transport for the communications.
                        * @param transport Transport to use
                        * @return True if the assignment is successful, false otherwise
                        */
                        virtual RPCUSERDllExport bool setTransport(eprosima::rpc::transport::Transport &transport);
                        
                        /*!
                         * @brief This function activates needed DDS entities to use an interface.
                         * @param interfaceName Interface name.
                         * @return Whether the activation works successfully.
                         */
                        RPCUSERDllExport bool activateInterface(const char* interfaceName);
                        








                        /*!
                         * @brief This method implements the server part of the protocol for the interface UCar.
                         * It is called when a request sample is received.
                         * @param protocol DDS protocol object that is in used.
                         * @param data Pointer to the received request sample. Cannot be NULL.
                         * @param endpoint Pointer to the endpoint that sent the request reply. Cannot be NULL.
                         */
                        RPCUSERDllExport static void UCar_serve(eprosima::rpc::protocol::Protocol &protocol,
                            void *data , eprosima::rpc::transport::Endpoint *endpoint);
                        /*!
                         * @brief This method implements the server part of the protocol for the interface UCar.
                         * It is called when a request sample is received.
                         * @param protocol DDS protocol object that is in used.
                         * @param data Pointer to the received request sample. Cannot be NULL.
                         * @param endpoint Pointer to the endpoint that sent the request reply. Cannot be NULL.
                         */
                        static void UCar_proxy(eprosima::rpc::protocol::Protocol &protocol,
                            void *data , eprosima::rpc::transport::Endpoint *endpoint);

                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation sendTouchEvent.
                         * It is called from the Proxy interface.
                         */

                        RPCUSERDllExport bool UCar_sendTouchEvent(/*in*/ int32_t action, /*in*/ int32_t width, /*in*/ int32_t height, /*in*/ int32_t count, /*in*/ const LongArray& trackID, /*in*/ const LongArray& x, /*in*/ const LongArray& y);

                        /*!
                         * @brief This asynchronous method implements the proxy part of the protocol for the operation sendTouchEvent.
                         * It is called from the Proxy interface.
                         */
                        RPCUSERDllExport void UCar_sendTouchEvent_async(UCar_sendTouchEventCallbackHandler &obj, /*in*/ int32_t action, /*in*/ int32_t width, /*in*/ int32_t height, /*in*/ int32_t count, /*in*/ const LongArray& trackID, /*in*/ const LongArray& x, /*in*/ const LongArray& y);



                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation sendMicRecordData.
                         * It is called from the Proxy interface.
                         */

                        RPCUSERDllExport bool UCar_sendMicRecordData(/*in*/ int32_t i, /*in*/ const ShortArray& shorts, /*in*/ int32_t l);

                        /*!
                         * @brief This asynchronous method implements the proxy part of the protocol for the operation sendMicRecordData.
                         * It is called from the Proxy interface.
                         */
                        RPCUSERDllExport void UCar_sendMicRecordData_async(UCar_sendMicRecordDataCallbackHandler &obj, /*in*/ int32_t i, /*in*/ const ShortArray& shorts, /*in*/ int32_t l);



                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation sendKeyEvent.
                         * It is called from the Proxy interface.
                         */

                        RPCUSERDllExport bool UCar_sendKeyEvent(/*in*/ int32_t keyEventActionType, /*in*/ int32_t keyCodeType, /*in*/ int32_t i);

                        /*!
                         * @brief This asynchronous method implements the proxy part of the protocol for the operation sendKeyEvent.
                         * It is called from the Proxy interface.
                         */
                        RPCUSERDllExport void UCar_sendKeyEvent_async(UCar_sendKeyEventCallbackHandler &obj, /*in*/ int32_t keyEventActionType, /*in*/ int32_t keyCodeType, /*in*/ int32_t i);



                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation sendGotoForeground.
                         * It is called from the Proxy interface.
                         */

                        RPCUSERDllExport bool UCar_sendGotoForeground();

                        /*!
                         * @brief This asynchronous method implements the proxy part of the protocol for the operation sendGotoForeground.
                         * It is called from the Proxy interface.
                         */
                        RPCUSERDllExport void UCar_sendGotoForeground_async(UCar_sendGotoForegroundCallbackHandler &obj);



                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation sendGotoBackground.
                         * It is called from the Proxy interface.
                         */

                        RPCUSERDllExport bool UCar_sendGotoBackground();

                        /*!
                         * @brief This asynchronous method implements the proxy part of the protocol for the operation sendGotoBackground.
                         * It is called from the Proxy interface.
                         */
                        RPCUSERDllExport void UCar_sendGotoBackground_async(UCar_sendGotoBackgroundCallbackHandler &obj);



                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation sendVRCMD.
                         * It is called from the Proxy interface.
                         */

                        RPCUSERDllExport bool UCar_sendVRCMD(/*in*/ int32_t vrcmdType, /*in*/ const std::string& s);

                        /*!
                         * @brief This asynchronous method implements the proxy part of the protocol for the operation sendVRCMD.
                         * It is called from the Proxy interface.
                         */
                        RPCUSERDllExport void UCar_sendVRCMD_async(UCar_sendVRCMDCallbackHandler &obj, /*in*/ int32_t vrcmdType, /*in*/ const std::string& s);



                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation notifyIsCallHungUp.
                         * It is called from the Proxy interface.
                         */

                        RPCUSERDllExport bool UCar_notifyIsCallHungUp();

                        /*!
                         * @brief This asynchronous method implements the proxy part of the protocol for the operation notifyIsCallHungUp.
                         * It is called from the Proxy interface.
                         */
                        RPCUSERDllExport void UCar_notifyIsCallHungUp_async(UCar_notifyIsCallHungUpCallbackHandler &obj);



                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation notifySwitchDayOrNight.
                         * It is called from the Proxy interface.
                         */

                        RPCUSERDllExport bool UCar_notifySwitchDayOrNight(/*in*/ int32_t dayNightMode);

                        /*!
                         * @brief This asynchronous method implements the proxy part of the protocol for the operation notifySwitchDayOrNight.
                         * It is called from the Proxy interface.
                         */
                        RPCUSERDllExport void UCar_notifySwitchDayOrNight_async(UCar_notifySwitchDayOrNightCallbackHandler &obj, /*in*/ int32_t dayNightMode);



                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation awakenVoiceAssistant.
                         * It is called from the Proxy interface.
                         */

                        RPCUSERDllExport bool UCar_awakenVoiceAssistant(/*in*/ const ByteArray& bytes, /*in*/ const AudioFormat& audioFormat);

                        /*!
                         * @brief This asynchronous method implements the proxy part of the protocol for the operation awakenVoiceAssistant.
                         * It is called from the Proxy interface.
                         */
                        RPCUSERDllExport void UCar_awakenVoiceAssistant_async(UCar_awakenVoiceAssistantCallbackHandler &obj, /*in*/ const ByteArray& bytes, /*in*/ const AudioFormat& audioFormat);



                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation presetVendorCustomFields.
                         * It is called from the Proxy interface.
                         */

                        RPCUSERDllExport bool UCar_presetVendorCustomFields(/*in*/ const ByteArray& bytes);

                        /*!
                         * @brief This asynchronous method implements the proxy part of the protocol for the operation presetVendorCustomFields.
                         * It is called from the Proxy interface.
                         */
                        RPCUSERDllExport void UCar_presetVendorCustomFields_async(UCar_presetVendorCustomFieldsCallbackHandler &obj, /*in*/ const ByteArray& bytes);



                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation presetConnectMode.
                         * It is called from the Proxy interface.
                         */

                        RPCUSERDllExport bool UCar_presetConnectMode(/*in*/ int32_t connectMode);

                        /*!
                         * @brief This asynchronous method implements the proxy part of the protocol for the operation presetConnectMode.
                         * It is called from the Proxy interface.
                         */
                        RPCUSERDllExport void UCar_presetConnectMode_async(UCar_presetConnectModeCallbackHandler &obj, /*in*/ int32_t connectMode);



                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation videoInitialized.
                         * It is called from the Proxy interface.
                         */




                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation videoInitialized.
                         * It is called from the Proxy interface.
                         */
                        void UCar_videoInitialized(/*in*/ int32_t type, /*in*/ const VideoFormat& videFormat);


                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation videoDataReceived.
                         * It is called from the Proxy interface.
                         */




                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation videoDataReceived.
                         * It is called from the Proxy interface.
                         */
                        void UCar_videoDataReceived(/*in*/ int32_t type, /*in*/ int32_t size, /*in*/ const ByteArray& byte);


                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation requestGotoHUDesktop.
                         * It is called from the Proxy interface.
                         */




                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation requestGotoHUDesktop.
                         * It is called from the Proxy interface.
                         */
                        void UCar_requestGotoHUDesktop();


                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation audioStateChanged.
                         * It is called from the Proxy interface.
                         */




                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation audioStateChanged.
                         * It is called from the Proxy interface.
                         */
                        void UCar_audioStateChanged(/*in*/ int32_t var2, /*in*/ const AudioFormat& audioFormat, /*in*/ int32_t playerState);


                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation audioDataReceived.
                         * It is called from the Proxy interface.
                         */




                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation audioDataReceived.
                         * It is called from the Proxy interface.
                         */
                        void UCar_audioDataReceived(/*in*/ int32_t var2, /*in*/ int32_t var3, /*in*/ const ByteArray& var4);


                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation musicInfoReceived.
                         * It is called from the Proxy interface.
                         */




                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation musicInfoReceived.
                         * It is called from the Proxy interface.
                         */
                        void UCar_musicInfoReceived(/*in*/ const MusicInfo& var2);


                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation navigationInfoReceived.
                         * It is called from the Proxy interface.
                         */




                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation navigationInfoReceived.
                         * It is called from the Proxy interface.
                         */
                        void UCar_navigationInfoReceived(/*in*/ const NavigationInfo& var2);


                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation phoneStateInfoReceived.
                         * It is called from the Proxy interface.
                         */




                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation phoneStateInfoReceived.
                         * It is called from the Proxy interface.
                         */
                        void UCar_phoneStateInfoReceived(/*in*/ const PhoneStateInfo& var2);


                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation micRecordRequest.
                         * It is called from the Proxy interface.
                         */




                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation micRecordRequest.
                         * It is called from the Proxy interface.
                         */
                        void UCar_micRecordRequest(/*in*/ const AudioFormat& var2, /*in*/ bool var3);


                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation userInterventionNeeded.
                         * It is called from the Proxy interface.
                         */




                        /*!
                         * @brief This method implements the proxy part of the protocol for the operation userInterventionNeeded.
                         * It is called from the Proxy interface.
                         */
                        void UCar_userInterventionNeeded();

























                        
                    private:
                    
                        eprosima::rpc::transport::dds::RTPSTransport *m_ddsTransport;
                    
                                                const char* const UCar_str;
                                                
                                                eprosima::rpc::transport::dds::RTPSProxyProcedureEndpoint *UCar_pe;
                                                
                                                eprosima::rpc::transport::dds::RTPSServerProcedureEndpoint *UCar_se;

                                                UCar_RequestPlugin UCar_requestPlugin;
                                                UCar_ReplyPlugin UCar_replyPlugin;
                                                
                                                
                };
            } // namespace dds
        } // namespace protocol
    } // namespace rpc
} // namespace eprosima

#endif // _ucar_DDS_PROTOCOL_H_