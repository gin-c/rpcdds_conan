/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 * 
 * @file ucarAsyncSupport.h
 * This header file contains functionality to use asynchronous calls for all interfaces.
 *
 * This file was generated by the tool rpcddsgen.
 */

#ifndef _ucar_DDS_ASYNC_SUPPORT_H_
#define _ucar_DDS_ASYNC_SUPPORT_H_

#include <rpcdds/transports/dds/RTPSAsyncTask.h>
#include <rpcdds/exceptions/UserException.h>
#include "ucarAsyncCallbackHandlers.h"
#include "ucarTopics.h"








/*!
 * @brief This class represents a asynchronous task created to wait the reply of the procedure UCar::sendTouchEvent from the server in an asynchronous call.
 * @ingroup UCAR
 */
class UCar_sendTouchEventTask : public eprosima::rpc::transport::dds::RTPSAsyncTask
{
    public:

        /*!
         * @brief The default constructor.
         *
         * @param obj Object that implements the callbacks that FastRPC will call when
         *            the reply will be received or and exception will be launched.
         * @param client Pointer to the server's proxy. Cannot be NULL.
         */
        UCar_sendTouchEventTask(UCar_sendTouchEventCallbackHandler &obj);

        //! @brief Destructor.
        virtual ~UCar_sendTouchEventTask();
        
        /*!
         * @brief This funcion is called when the reply sample is received.
         */
        virtual void execute();
        
        /*!
         * @brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::SystemException &ex);        

        
        /*!
         * @brief This function returns the object used by the task.
         *
         * @return The object that implements the callbacks.
         */
        UCar_sendTouchEventCallbackHandler& getObject();

        /*!
         * @brief This function returns the allocated reply sample.
         * @return Pointer to the allocated reply sample.
         */
        virtual void* getReplyInstance();
        
        private:
        
        UCar_sendTouchEventCallbackHandler &m_obj;

        UCar_Reply m_reply;
};

/*!
 * @brief This class represents a asynchronous task created to wait the reply of the procedure UCar::sendMicRecordData from the server in an asynchronous call.
 * @ingroup UCAR
 */
class UCar_sendMicRecordDataTask : public eprosima::rpc::transport::dds::RTPSAsyncTask
{
    public:

        /*!
         * @brief The default constructor.
         *
         * @param obj Object that implements the callbacks that FastRPC will call when
         *            the reply will be received or and exception will be launched.
         * @param client Pointer to the server's proxy. Cannot be NULL.
         */
        UCar_sendMicRecordDataTask(UCar_sendMicRecordDataCallbackHandler &obj);

        //! @brief Destructor.
        virtual ~UCar_sendMicRecordDataTask();
        
        /*!
         * @brief This funcion is called when the reply sample is received.
         */
        virtual void execute();
        
        /*!
         * @brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::SystemException &ex);        

        
        /*!
         * @brief This function returns the object used by the task.
         *
         * @return The object that implements the callbacks.
         */
        UCar_sendMicRecordDataCallbackHandler& getObject();

        /*!
         * @brief This function returns the allocated reply sample.
         * @return Pointer to the allocated reply sample.
         */
        virtual void* getReplyInstance();
        
        private:
        
        UCar_sendMicRecordDataCallbackHandler &m_obj;

        UCar_Reply m_reply;
};

/*!
 * @brief This class represents a asynchronous task created to wait the reply of the procedure UCar::sendKeyEvent from the server in an asynchronous call.
 * @ingroup UCAR
 */
class UCar_sendKeyEventTask : public eprosima::rpc::transport::dds::RTPSAsyncTask
{
    public:

        /*!
         * @brief The default constructor.
         *
         * @param obj Object that implements the callbacks that FastRPC will call when
         *            the reply will be received or and exception will be launched.
         * @param client Pointer to the server's proxy. Cannot be NULL.
         */
        UCar_sendKeyEventTask(UCar_sendKeyEventCallbackHandler &obj);

        //! @brief Destructor.
        virtual ~UCar_sendKeyEventTask();
        
        /*!
         * @brief This funcion is called when the reply sample is received.
         */
        virtual void execute();
        
        /*!
         * @brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::SystemException &ex);        

        
        /*!
         * @brief This function returns the object used by the task.
         *
         * @return The object that implements the callbacks.
         */
        UCar_sendKeyEventCallbackHandler& getObject();

        /*!
         * @brief This function returns the allocated reply sample.
         * @return Pointer to the allocated reply sample.
         */
        virtual void* getReplyInstance();
        
        private:
        
        UCar_sendKeyEventCallbackHandler &m_obj;

        UCar_Reply m_reply;
};

/*!
 * @brief This class represents a asynchronous task created to wait the reply of the procedure UCar::sendGotoForeground from the server in an asynchronous call.
 * @ingroup UCAR
 */
class UCar_sendGotoForegroundTask : public eprosima::rpc::transport::dds::RTPSAsyncTask
{
    public:

        /*!
         * @brief The default constructor.
         *
         * @param obj Object that implements the callbacks that FastRPC will call when
         *            the reply will be received or and exception will be launched.
         * @param client Pointer to the server's proxy. Cannot be NULL.
         */
        UCar_sendGotoForegroundTask(UCar_sendGotoForegroundCallbackHandler &obj);

        //! @brief Destructor.
        virtual ~UCar_sendGotoForegroundTask();
        
        /*!
         * @brief This funcion is called when the reply sample is received.
         */
        virtual void execute();
        
        /*!
         * @brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::SystemException &ex);        

        
        /*!
         * @brief This function returns the object used by the task.
         *
         * @return The object that implements the callbacks.
         */
        UCar_sendGotoForegroundCallbackHandler& getObject();

        /*!
         * @brief This function returns the allocated reply sample.
         * @return Pointer to the allocated reply sample.
         */
        virtual void* getReplyInstance();
        
        private:
        
        UCar_sendGotoForegroundCallbackHandler &m_obj;

        UCar_Reply m_reply;
};

/*!
 * @brief This class represents a asynchronous task created to wait the reply of the procedure UCar::sendGotoBackground from the server in an asynchronous call.
 * @ingroup UCAR
 */
class UCar_sendGotoBackgroundTask : public eprosima::rpc::transport::dds::RTPSAsyncTask
{
    public:

        /*!
         * @brief The default constructor.
         *
         * @param obj Object that implements the callbacks that FastRPC will call when
         *            the reply will be received or and exception will be launched.
         * @param client Pointer to the server's proxy. Cannot be NULL.
         */
        UCar_sendGotoBackgroundTask(UCar_sendGotoBackgroundCallbackHandler &obj);

        //! @brief Destructor.
        virtual ~UCar_sendGotoBackgroundTask();
        
        /*!
         * @brief This funcion is called when the reply sample is received.
         */
        virtual void execute();
        
        /*!
         * @brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::SystemException &ex);        

        
        /*!
         * @brief This function returns the object used by the task.
         *
         * @return The object that implements the callbacks.
         */
        UCar_sendGotoBackgroundCallbackHandler& getObject();

        /*!
         * @brief This function returns the allocated reply sample.
         * @return Pointer to the allocated reply sample.
         */
        virtual void* getReplyInstance();
        
        private:
        
        UCar_sendGotoBackgroundCallbackHandler &m_obj;

        UCar_Reply m_reply;
};

/*!
 * @brief This class represents a asynchronous task created to wait the reply of the procedure UCar::sendVRCMD from the server in an asynchronous call.
 * @ingroup UCAR
 */
class UCar_sendVRCMDTask : public eprosima::rpc::transport::dds::RTPSAsyncTask
{
    public:

        /*!
         * @brief The default constructor.
         *
         * @param obj Object that implements the callbacks that FastRPC will call when
         *            the reply will be received or and exception will be launched.
         * @param client Pointer to the server's proxy. Cannot be NULL.
         */
        UCar_sendVRCMDTask(UCar_sendVRCMDCallbackHandler &obj);

        //! @brief Destructor.
        virtual ~UCar_sendVRCMDTask();
        
        /*!
         * @brief This funcion is called when the reply sample is received.
         */
        virtual void execute();
        
        /*!
         * @brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::SystemException &ex);        

        
        /*!
         * @brief This function returns the object used by the task.
         *
         * @return The object that implements the callbacks.
         */
        UCar_sendVRCMDCallbackHandler& getObject();

        /*!
         * @brief This function returns the allocated reply sample.
         * @return Pointer to the allocated reply sample.
         */
        virtual void* getReplyInstance();
        
        private:
        
        UCar_sendVRCMDCallbackHandler &m_obj;

        UCar_Reply m_reply;
};

/*!
 * @brief This class represents a asynchronous task created to wait the reply of the procedure UCar::notifyIsCallHungUp from the server in an asynchronous call.
 * @ingroup UCAR
 */
class UCar_notifyIsCallHungUpTask : public eprosima::rpc::transport::dds::RTPSAsyncTask
{
    public:

        /*!
         * @brief The default constructor.
         *
         * @param obj Object that implements the callbacks that FastRPC will call when
         *            the reply will be received or and exception will be launched.
         * @param client Pointer to the server's proxy. Cannot be NULL.
         */
        UCar_notifyIsCallHungUpTask(UCar_notifyIsCallHungUpCallbackHandler &obj);

        //! @brief Destructor.
        virtual ~UCar_notifyIsCallHungUpTask();
        
        /*!
         * @brief This funcion is called when the reply sample is received.
         */
        virtual void execute();
        
        /*!
         * @brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::SystemException &ex);        

        
        /*!
         * @brief This function returns the object used by the task.
         *
         * @return The object that implements the callbacks.
         */
        UCar_notifyIsCallHungUpCallbackHandler& getObject();

        /*!
         * @brief This function returns the allocated reply sample.
         * @return Pointer to the allocated reply sample.
         */
        virtual void* getReplyInstance();
        
        private:
        
        UCar_notifyIsCallHungUpCallbackHandler &m_obj;

        UCar_Reply m_reply;
};

/*!
 * @brief This class represents a asynchronous task created to wait the reply of the procedure UCar::notifySwitchDayOrNight from the server in an asynchronous call.
 * @ingroup UCAR
 */
class UCar_notifySwitchDayOrNightTask : public eprosima::rpc::transport::dds::RTPSAsyncTask
{
    public:

        /*!
         * @brief The default constructor.
         *
         * @param obj Object that implements the callbacks that FastRPC will call when
         *            the reply will be received or and exception will be launched.
         * @param client Pointer to the server's proxy. Cannot be NULL.
         */
        UCar_notifySwitchDayOrNightTask(UCar_notifySwitchDayOrNightCallbackHandler &obj);

        //! @brief Destructor.
        virtual ~UCar_notifySwitchDayOrNightTask();
        
        /*!
         * @brief This funcion is called when the reply sample is received.
         */
        virtual void execute();
        
        /*!
         * @brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::SystemException &ex);        

        
        /*!
         * @brief This function returns the object used by the task.
         *
         * @return The object that implements the callbacks.
         */
        UCar_notifySwitchDayOrNightCallbackHandler& getObject();

        /*!
         * @brief This function returns the allocated reply sample.
         * @return Pointer to the allocated reply sample.
         */
        virtual void* getReplyInstance();
        
        private:
        
        UCar_notifySwitchDayOrNightCallbackHandler &m_obj;

        UCar_Reply m_reply;
};

/*!
 * @brief This class represents a asynchronous task created to wait the reply of the procedure UCar::awakenVoiceAssistant from the server in an asynchronous call.
 * @ingroup UCAR
 */
class UCar_awakenVoiceAssistantTask : public eprosima::rpc::transport::dds::RTPSAsyncTask
{
    public:

        /*!
         * @brief The default constructor.
         *
         * @param obj Object that implements the callbacks that FastRPC will call when
         *            the reply will be received or and exception will be launched.
         * @param client Pointer to the server's proxy. Cannot be NULL.
         */
        UCar_awakenVoiceAssistantTask(UCar_awakenVoiceAssistantCallbackHandler &obj);

        //! @brief Destructor.
        virtual ~UCar_awakenVoiceAssistantTask();
        
        /*!
         * @brief This funcion is called when the reply sample is received.
         */
        virtual void execute();
        
        /*!
         * @brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::SystemException &ex);        

        
        /*!
         * @brief This function returns the object used by the task.
         *
         * @return The object that implements the callbacks.
         */
        UCar_awakenVoiceAssistantCallbackHandler& getObject();

        /*!
         * @brief This function returns the allocated reply sample.
         * @return Pointer to the allocated reply sample.
         */
        virtual void* getReplyInstance();
        
        private:
        
        UCar_awakenVoiceAssistantCallbackHandler &m_obj;

        UCar_Reply m_reply;
};

/*!
 * @brief This class represents a asynchronous task created to wait the reply of the procedure UCar::presetVendorCustomFields from the server in an asynchronous call.
 * @ingroup UCAR
 */
class UCar_presetVendorCustomFieldsTask : public eprosima::rpc::transport::dds::RTPSAsyncTask
{
    public:

        /*!
         * @brief The default constructor.
         *
         * @param obj Object that implements the callbacks that FastRPC will call when
         *            the reply will be received or and exception will be launched.
         * @param client Pointer to the server's proxy. Cannot be NULL.
         */
        UCar_presetVendorCustomFieldsTask(UCar_presetVendorCustomFieldsCallbackHandler &obj);

        //! @brief Destructor.
        virtual ~UCar_presetVendorCustomFieldsTask();
        
        /*!
         * @brief This funcion is called when the reply sample is received.
         */
        virtual void execute();
        
        /*!
         * @brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::SystemException &ex);        

        
        /*!
         * @brief This function returns the object used by the task.
         *
         * @return The object that implements the callbacks.
         */
        UCar_presetVendorCustomFieldsCallbackHandler& getObject();

        /*!
         * @brief This function returns the allocated reply sample.
         * @return Pointer to the allocated reply sample.
         */
        virtual void* getReplyInstance();
        
        private:
        
        UCar_presetVendorCustomFieldsCallbackHandler &m_obj;

        UCar_Reply m_reply;
};

/*!
 * @brief This class represents a asynchronous task created to wait the reply of the procedure UCar::presetConnectMode from the server in an asynchronous call.
 * @ingroup UCAR
 */
class UCar_presetConnectModeTask : public eprosima::rpc::transport::dds::RTPSAsyncTask
{
    public:

        /*!
         * @brief The default constructor.
         *
         * @param obj Object that implements the callbacks that FastRPC will call when
         *            the reply will be received or and exception will be launched.
         * @param client Pointer to the server's proxy. Cannot be NULL.
         */
        UCar_presetConnectModeTask(UCar_presetConnectModeCallbackHandler &obj);

        //! @brief Destructor.
        virtual ~UCar_presetConnectModeTask();
        
        /*!
         * @brief This funcion is called when the reply sample is received.
         */
        virtual void execute();
        
        /*!
         * @brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::SystemException &ex);        

        
        /*!
         * @brief This function returns the object used by the task.
         *
         * @return The object that implements the callbacks.
         */
        UCar_presetConnectModeCallbackHandler& getObject();

        /*!
         * @brief This function returns the allocated reply sample.
         * @return Pointer to the allocated reply sample.
         */
        virtual void* getReplyInstance();
        
        private:
        
        UCar_presetConnectModeCallbackHandler &m_obj;

        UCar_Reply m_reply;
};


































#endif // _ucar_DDS_ASYNC_SUPPORT_H_