group ServerHeader;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "Server.h"], description=["This header file contains the declaration of the server for all interfaces."])$

#ifndef _$ctx.filename;format="toUpper"$SERVER_H_
#define _$ctx.filename;format="toUpper"$SERVER_H_

#include <$ctx.includePrefix$server/Server.h>
#include "$ctx.filename$.h"
#include "$ctx.filename$ServerImpl.h"

namespace eprosima
{
    namespace rpc
    {
        namespace protocol
        {
            class $ctx.filename$Protocol;
        }
    }
}

$definitions; separator="\n"$

#endif // _$ctx.filename;format="toUpper"$SERVER_H_
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
};

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, parent, interface, export_list) ::= <<
/*!
 * @brief This class implements a specific server for the defined interface $interface.name$ by user.
 * @ingroup $ctx.trimfilename$
 */
class RPCUSERDllExport $interface.name$Server : public eprosima::rpc::server::Server, public $interface.name$Notify
{
    public:

        /*!
         * @brief This constructor sets the transport that will be used by the server.
         *
         * @param strategy Strategy used by server to work with new requests.
         *        This class doesn't delete this object in its destructor. Cannot be NULL.
         * @param transport The network transport that the server has to use.
         *        This transport's object is not deleted by this class in its destructor. Cannot be NULL.
         * @param protocol Generated protocol that the server has to use.
         *        This class has the information to process requests and build responses for this application environment. 
         * @param servant Servant that the server will use to invoke user's functions.
         * @exception eProsima::RPCDDS::InitializeException This exception is thrown when the initialization was wrong.
         */
        $interface.name$Server(eprosima::rpc::strategy::ServerStrategy &strategy, eprosima::rpc::transport::ServerTransport &transport,
            eprosima::rpc::protocol::$ctx.filename$Protocol &protocol, $interface.name$ServerImpl &servant);

        //! @brief Destructor.
        virtual ~$interface.name$Server();

        $interface.all_operations : { operation |
                $if(operation.notify)$
                //! @brief Proxy method for the operation $operation.name$.
                $paramRetType(operation.rettype)$ $operation.name$($paramDeclarations(params=operation.inputparam)$);
                $endif$
        }; separator="\n"$

        $export_list$
        
     private:
        
        //! \brief Pointer to the server's servant implemented by the user.
        $interface.name$ServerImpl &_impl;
};

>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>
