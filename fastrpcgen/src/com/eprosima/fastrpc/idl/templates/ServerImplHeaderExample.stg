group ServerImplHeaderExample;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "ServerImplExample.h"], description=["This header file contains an example of the declaration of a servant."])$

#ifndef _$ctx.filename;format="toUpper"$SERVER_IMPL_EXAMPLE_H_
#define _$ctx.filename;format="toUpper"$SERVER_IMPL_EXAMPLE_H_

#include "$ctx.filename$ServerImpl.h"

$definitions; separator="\n"$

#endif // _$ctx.filename;format="toUpper"$SERVER_IMPL_EXAMPLE_H_
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, parent, interface, export_list) ::= <<
/*!
 * @brief This class is an example of a servant and it implements the remote procedures of the servant.
 * @ingroup $ctx.trimfilename$
 */
class $interface.name$ServerImplExample : public $interface.scopedname$ServerImpl
{
    public:

        //! @brief The default constructor.
        $interface.name$ServerImplExample(){}

        //! @brief Destructor.
        virtual ~$interface.name$ServerImplExample(){}
 
        $interface.all_operations : { operation |
        $if(!operation.notify)$
        $if(!operation.oneway)$
        //! @brief Implementation of the remote procedure $operation.name$
        $paramRetType(operation.rettype)$ $operation.name$Handle(const std::string& sendId$if(operation.parameters)$,$endif$$paramDeclarations(params=operation.parameters)$);
        $endif$
        $endif$
        }; separator="\n"$

        $export_list$;
};

>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>
