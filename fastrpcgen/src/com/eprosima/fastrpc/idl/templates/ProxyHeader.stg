group ProxyHeader;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "Proxy.h"], description=["This header file contains the declaration of the proxy for all interfaces."])$

#ifndef _$ctx.filename;format="toUpper"$_PROXY_H_
#define _$ctx.filename;format="toUpper"$_PROXY_H_

#include <$ctx.includePrefix$client/Proxy.h>
#include "$ctx.filename$.h"
#include "$ctx.filename$ProxyImpl.h"

$if(ctx.dds)$
#include "$ctx.filename$AsyncCallbackHandlers.h"

$endif$
$if(ctx.rtiTypes)$
#include "$ctx.filename$Extension.h"

$endif$


namespace eprosima
{
    namespace rpc
    {
        namespace protocol
        {
            class $ctx.filename$Protocol;
        }
    }
}

$definitions; separator="\n"$

#endif // _$ctx.filename;format="toUpper"$_PROXY_H_
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
};

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, parent, interface, export_list) ::= <<
/*!
 * @brief This class implements a specific server's proxy for the defined interface $interface.name$.
 * @ingroup $ctx.trimfilename$
 */
class RPCUSERDllExport $interface.name$Proxy : public eprosima::rpc::proxy::Proxy, public $interface.name$$if(ctx.rtiTypes)$Ext$endif$
{
    public:
   
        /*!
         * @brief This constructor sets the transport that will be used by the server's proxy.
         *
         * @param transport The network transport that server's proxy has to use.
         *        This transport's object is not deleted by this class in its destructor. Cannot be NULL.
         * @param protocol The protocol used to send the information over the transport.
         *        This protocol's object is not deleted by this class in its destructor. Cannot be NULL.
         * @exception eprosima::rpc::exception::InitializeException This exception is thrown when the initialization was wrong.
         */
        $interface.name$Proxy(eprosima::rpc::strategy::ServerStrategy &strategy, eprosima::rpc::transport::ProxyTransport &transport,
            eprosima::rpc::protocol::$ctx.filename$Protocol &protocol, $interface.name$ProxyImpl &servant);

        //! @brief Destructor.
        virtual ~$interface.name$Proxy();

        $interface.all_operations : { operation |
        $if(!operation.notify)$
        //! @brief Proxy method for the operation $operation.name$.
        $paramRetType(operation.rettype)$ $operation.name$($paramDeclarations(params=operation.parameters)$);
        $endif$

        $if(ctx.dds)$
        $if(!operation.oneway)$
        $if(!operation.notify)$
        //! @brief Proxy asynchronous method for the operation $operation.name$.
        void $operation.name$_async($interface.scopedname$_$operation.name$CallbackHandler &obj$paramDeclarations(params=operation.inputparam, separatorInicial=", ")$);

        $endif$
        $endif$
        $endif$
        }; separator="\n"$
        
        $export_list$

        private:

            //! \brief Pointer to the server's servant implemented by the user.
            $interface.name$ProxyImpl &_impl;
};

>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>
